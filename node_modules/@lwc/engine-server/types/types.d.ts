export declare enum HostNodeType {
    Text = "text",
    Comment = "comment",
    Raw = "raw",
    Element = "element",
    ShadowRoot = "shadow-root"
}
export interface HostText {
    type: HostNodeType.Text;
    parent: HostElement | null;
    value: string;
}
export interface HostComment {
    type: HostNodeType.Comment;
    parent: HostElement | null;
    value: string;
}
export interface HostRaw {
    type: HostNodeType.Raw;
    parent: HostElement | null;
    value: string;
}
export interface HostAttribute {
    name: string;
    namespace: string | null;
    value: string;
}
export interface HostShadowRoot {
    type: HostNodeType.ShadowRoot;
    children: HostChildNode[];
    mode: 'open' | 'closed';
    delegatesFocus: boolean;
}
export interface HostElement {
    type: HostNodeType.Element;
    name: string;
    parent: HostElement | null;
    shadowRoot: HostShadowRoot | null;
    children: HostChildNode[];
    attributes: HostAttribute[];
    eventListeners: Record<string, Function[]>;
}
export declare type HostNode = HostText | HostElement | HostComment;
export declare type HostChildNode = HostElement | HostText | HostComment | HostRaw;
