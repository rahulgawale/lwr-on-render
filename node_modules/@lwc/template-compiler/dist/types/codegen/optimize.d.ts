import * as t from '../shared/estree';
/**
 * Given a template function, extract all static objects/arrays (e.g. `{ key : 1 }`)
 * and return them as a list of `const` declarations. Also return the modified function
 * that is now referencing those declarations.
 *
 * Example input:
 *
 * ```
 * function tmpl() {
 *   return {
 *     foo: dynamic(),
 *     bar: { static: true },
 *     baz: { really: { static: ['yep', 'totally', 'static' ] } }
 *   };
 * }
 * ```
 *
 * Example output:
 *
 * ```
 * const stc0 = { static: true };
 * const stc1 = { really: { static: ['yep', 'totally', 'static' ] } };
 * function tmpl() {
 *   return {
 *     foo: dynamic(),
 *     bar: stc0,
 *     baz: stc1
 *   };
 * }
 * ```
 */
export declare function optimizeStaticExpressions(templateFn: t.FunctionDeclaration): Array<t.FunctionDeclaration | t.VariableDeclaration>;
