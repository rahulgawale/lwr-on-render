import * as parse5 from 'parse5';
import { Attribute, BaseElement, SourceLocation } from '../shared/types';
import ParserCtx from './parser';
export declare function isIdReferencingAttribute(attrName: string): boolean;
export declare function isAllowedFragOnlyUrlsXHTML(tagName: string, attrName: string, namespaceURI: string): boolean;
export declare function isSvgUseHref(tagName: string, attrName: string, namespaceURI: string): boolean;
export declare function isFragmentOnlyUrl(url: string): boolean;
export declare function normalizeAttributeValue(ctx: ParserCtx, raw: string, tag: string, attr: parse5.Attribute, location: SourceLocation): {
    value: string;
    escapedExpression: boolean;
};
export declare function attributeName(attr: parse5.Attribute): string;
export declare function isProhibitedIsAttribute(attrName: string): boolean;
export declare function isTabIndexAttribute(attrName: string): boolean;
export declare function isValidTabIndexAttributeValue(value: any): boolean;
export declare function isAriaOrDataOrFmkAttribute(attrName: string): boolean;
export declare function isAttribute(element: BaseElement, attrName: string): boolean;
export declare function isValidHTMLAttribute(tagName: string, attrName: string): boolean;
/**
 * Convert attribute name from kebab case to camel case property name
 */
export declare function attributeToPropertyName(attrName: string): string;
export declare class ParsedAttribute {
    private readonly attributes;
    append(attr: Attribute): void;
    get(pattern: string | RegExp): Attribute | undefined;
    pick(pattern: string | RegExp): Attribute | undefined;
    private getKey;
    getAttributes(): Attribute[];
}
