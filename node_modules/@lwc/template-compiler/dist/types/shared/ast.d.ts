import * as parse5 from 'parse5';
import { Literal, SourceLocation, Element, Component, Expression, Comment, Text, ForEach, ForBlock, Slot, Identifier, Root, EventListener, KeyDirective, DynamicDirective, DomDirective, PreserveCommentsDirective, RenderModeDirective, Attribute, Property, ParentNode, BaseNode, ForOf, LWCDirectiveRenderMode, If, ElementSourceLocation, InnerHTMLDirective, Directive, BaseElement, LWCDirectiveDomMode } from './types';
export declare function root(parse5ElmLocation: parse5.ElementLocation): Root;
export declare function element(parse5Elm: parse5.Element, parse5ElmLocation: parse5.ElementLocation): Element;
export declare function component(parse5Elm: parse5.Element, parse5ElmLocation: parse5.ElementLocation): Component;
export declare function slot(slotName: string, parse5ElmLocation: parse5.ElementLocation): Slot;
export declare function text(raw: string, value: Literal | Expression, parse5Location: parse5.Location): Text;
export declare function comment(raw: string, value: string, parse5Location: parse5.Location): Comment;
export declare function elementSourceLocation(parse5ElmLocation: parse5.ElementLocation): ElementSourceLocation;
export declare function sourceLocation(location: parse5.Location): SourceLocation;
export declare function literal<T extends string | boolean>(value: T): Literal<T>;
export declare function forEach(expression: Expression, elementLocation: SourceLocation, directiveLocation: SourceLocation, item: Identifier, index?: Identifier): ForEach;
export declare function forOf(expression: Expression, iterator: Identifier, elementLocation: SourceLocation, directiveLocation: SourceLocation): ForOf;
export declare function ifNode(modifier: string, condition: Expression, elementLocation: SourceLocation, directiveLocation: SourceLocation): If;
export declare function eventListener(name: string, handler: Expression, location: SourceLocation): EventListener;
export declare function keyDirective(value: Expression, location: SourceLocation): KeyDirective;
export declare function dynamicDirective(value: Expression, location: SourceLocation): DynamicDirective;
export declare function domDirective(lwcDomAttr: LWCDirectiveDomMode, location: SourceLocation): DomDirective;
export declare function innerHTMLDirective(value: Expression | Literal<string>, location: SourceLocation): InnerHTMLDirective;
export declare function preserveCommentsDirective(preserveComments: boolean, location: SourceLocation): PreserveCommentsDirective;
export declare function renderModeDirective(renderMode: LWCDirectiveRenderMode, location: SourceLocation): RenderModeDirective;
export declare function attribute(name: string, value: Expression | Literal, location: SourceLocation): Attribute;
export declare function property(name: string, attributeName: string, value: Expression | Literal, location: SourceLocation): Property;
export declare function isElement(node: BaseNode): node is Element;
export declare function isRoot(node: BaseNode): node is Root;
export declare function isComponent(node: BaseNode): node is Component;
export declare function isSlot(node: BaseNode): node is Slot;
export declare function isBaseElement(node: BaseNode): node is BaseElement;
export declare function isText(node: BaseNode): node is Text;
export declare function isComment(node: BaseNode): node is Comment;
export declare function isExpression(node: Expression | Literal): node is Expression;
export declare function isStringLiteral(node: Expression | Literal): node is Literal<string>;
export declare function isBooleanLiteral(node: Expression | Literal): node is Literal<boolean>;
export declare function isForOf(node: BaseNode): node is ForOf;
export declare function isForEach(node: BaseNode): node is ForEach;
export declare function isForBlock(node: BaseNode): node is ForBlock;
export declare function isIf(node: BaseNode): node is If;
export declare function isParentNode(node: BaseNode): node is ParentNode;
export declare function isDynamicDirective(directive: Directive): directive is DynamicDirective;
export declare function isDomDirective(directive: Directive): directive is DomDirective;
export declare function isInnerHTMLDirective(directive: Directive): directive is InnerHTMLDirective;
export declare function isKeyDirective(directive: Directive): directive is KeyDirective;
export declare function isRenderModeDirective(directive: Directive): directive is RenderModeDirective;
export declare function isPreserveCommentsDirective(directive: Directive): directive is PreserveCommentsDirective;
export declare function isProperty(node: BaseNode): node is Property;
