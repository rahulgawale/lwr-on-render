import State from '../state';
import { BaseElement, ElementDirective } from './types';
/**
 * Config representing criteria for an element match.
 * All conditions specified must be satisfied to be considered a match.
 */
export interface CustomRendererElementConfig {
    /**
     * Tag name to use to match an element.
     */
    tagName: string;
    /**
     * Optional namespace to match an element.
     */
    namespace?: string;
    /**
     * Specify attributes that need to be matched.
     * This field is optional.
     * If undefined or empty, attribute matching is skipped.
     */
    attributes?: string[];
}
/**
 * Config to specify which elements and directives require a customizable renderer.
 * An element is qualified if it matches the CustomRendererElementConfig OR the directives.
 */
export interface CustomRendererConfig {
    /**
     * Element matching criteria. Element much satisfy all conditions of the CustomRendererElementConfig
     */
    elements: CustomRendererElementConfig[];
    /**
     * List of lwc directives that qualify an element. An element must use at least 1
     * directive to be considered a match.
     * If empty, elements matching is not done based on directives.
     */
    directives: string[];
}
/**
 * Mapping of Directive.name to string literals used in template
 */
export declare const LWC_DIRECTIVES: Record<ElementDirective['name'], string>;
export declare function isCustomRendererHookRequired(element: BaseElement, state: State): boolean;
