import { insertStylesheet } from './styles';
export declare function setIsHydrating(value: boolean): void;
declare function isHydrating(): boolean;
export declare const isSyntheticShadowDefined: boolean;
declare function cloneNode(node: Node, deep: boolean): Node;
declare function createFragment(html: string): Node | null;
declare function createElement(tagName: string, namespace?: string): Element;
declare function createText(content: string): Node;
declare function createComment(content: string): Node;
declare function insert(node: Node, parent: Node, anchor: Node): void;
declare function remove(node: Node, parent: Node): void;
declare function nextSibling(node: Node): Node | null;
declare function attachShadow(element: Element, options: ShadowRootInit): ShadowRoot;
declare function setText(node: Node, content: string): void;
declare function getProperty(node: Node, key: string): any;
declare function setProperty(node: Node, key: string, value: any): void;
declare function getAttribute(element: Element, name: string, namespace?: string | null): string | null;
declare function setAttribute(element: Element, name: string, value: string, namespace?: string | null): void;
declare function removeAttribute(element: Element, name: string, namespace?: string | null): void;
declare function addEventListener(target: Node, type: string, callback: EventListener, options?: AddEventListenerOptions | boolean): void;
declare function removeEventListener(target: Node, type: string, callback: EventListener, options?: EventListenerOptions | boolean): void;
declare function dispatchEvent(target: Node, event: Event): boolean;
declare function getClassList(element: Element): DOMTokenList;
declare function setCSSStyleProperty(element: Element, name: string, value: string, important: boolean): void;
declare function getBoundingClientRect(element: Element): DOMRect;
declare function querySelector(element: Element, selectors: string): Element | null;
declare function querySelectorAll(element: Element, selectors: string): NodeList;
declare function getElementsByTagName(element: Element, tagNameOrWildCard: string): HTMLCollection;
declare function getElementsByClassName(element: Element, names: string): HTMLCollection;
declare function getChildren(element: Element): HTMLCollection;
declare function getChildNodes(element: Element): NodeList;
declare function getFirstChild(element: Element): Node | null;
declare function getFirstElementChild(element: Element): Element | null;
declare function getLastChild(element: Element): Node | null;
declare function getLastElementChild(element: Element): Element | null;
declare function isConnected(node: Node): boolean;
declare function assertInstanceOfHTMLElement(elm: any, msg: string): void;
export declare const renderer: {
    ssr: boolean;
    isNativeShadowDefined: boolean;
    isSyntheticShadowDefined: boolean;
    HTMLElementExported: {
        new (): HTMLElement;
        prototype: HTMLElement;
    };
    isHydrating: typeof isHydrating;
    insert: typeof insert;
    remove: typeof remove;
    cloneNode: typeof cloneNode;
    createFragment: typeof createFragment;
    createElement: typeof createElement;
    createText: typeof createText;
    createComment: typeof createComment;
    nextSibling: typeof nextSibling;
    attachShadow: typeof attachShadow;
    getProperty: typeof getProperty;
    setProperty: typeof setProperty;
    setText: typeof setText;
    getAttribute: typeof getAttribute;
    setAttribute: typeof setAttribute;
    removeAttribute: typeof removeAttribute;
    addEventListener: typeof addEventListener;
    removeEventListener: typeof removeEventListener;
    dispatchEvent: typeof dispatchEvent;
    getClassList: typeof getClassList;
    setCSSStyleProperty: typeof setCSSStyleProperty;
    getBoundingClientRect: typeof getBoundingClientRect;
    querySelector: typeof querySelector;
    querySelectorAll: typeof querySelectorAll;
    getElementsByTagName: typeof getElementsByTagName;
    getElementsByClassName: typeof getElementsByClassName;
    getChildren: typeof getChildren;
    getChildNodes: typeof getChildNodes;
    getFirstChild: typeof getFirstChild;
    getFirstElementChild: typeof getFirstElementChild;
    getLastChild: typeof getLastChild;
    getLastElementChild: typeof getLastElementChild;
    isConnected: typeof isConnected;
    insertStylesheet: typeof insertStylesheet;
    assertInstanceOfHTMLElement: typeof assertInstanceOfHTMLElement;
    defineCustomElement: any;
    getCustomElement: any;
};
export {};
