"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeModulesPolyfillPlugin = void 0;
var escape_string_regexp_1 = __importDefault(require("escape-string-regexp"));
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var polyfills_1 = require("./polyfills");
// import { NodeResolvePlugin } from '@esbuild-plugins/node-resolve'
var NAME = require('../package.json').name;
var debug = require('debug')(NAME);
var NAMESPACE = NAME;
function removeEndingSlash(importee) {
    if (importee && importee.slice(-1) === '/') {
        importee = importee.slice(0, -1);
    }
    return importee;
}
function NodeModulesPolyfillPlugin(options) {
    if (options === void 0) { options = {}; }
    var _a = options.namespace, namespace = _a === void 0 ? NAMESPACE : _a;
    var polyfilledBuiltins = polyfills_1.builtinsPolyfills(options);
    var polyfilledBuiltinsNames = __spread(polyfilledBuiltins.keys());
    return {
        name: NAME,
        setup: function setup(_a) {
            var _this = this;
            var onLoad = _a.onLoad, onResolve = _a.onResolve;
            // TODO these module cannot import anything, is that ok?
            onLoad({ filter: /.*/, namespace: namespace }, function (args) { return __awaiter(_this, void 0, void 0, function () {
                var resolved, contents, resolveDir, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            resolved = polyfilledBuiltins.get(removeEndingSlash(args.path));
                            return [4 /*yield*/, fs_1.default.promises.readFile(resolved)];
                        case 1: return [4 /*yield*/, (_a.sent()).toString()];
                        case 2:
                            contents = _a.sent();
                            resolveDir = path_1.default.dirname(resolved);
                            // console.log({ resolveDir })
                            debug('onLoad');
                            return [2 /*return*/, {
                                    loader: 'js',
                                    contents: contents,
                                    resolveDir: resolveDir,
                                }];
                        case 3:
                            e_1 = _a.sent();
                            console.error('node-modules-polyfill', e_1);
                            return [2 /*return*/, {
                                    contents: "export {}",
                                    loader: 'js',
                                }];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
            var filter = new RegExp(polyfilledBuiltinsNames.map(escape_string_regexp_1.default).join('|'));
            onResolve({ filter: filter }, function resolver(args) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (!polyfilledBuiltins.has(args.path)) {
                            return [2 /*return*/];
                        }
                        return [2 /*return*/, {
                                namespace: namespace,
                                path: args.path,
                            }];
                    });
                });
            });
        },
    };
}
exports.NodeModulesPolyfillPlugin = NodeModulesPolyfillPlugin;
exports.default = NodeModulesPolyfillPlugin;
//# sourceMappingURL=index.js.map