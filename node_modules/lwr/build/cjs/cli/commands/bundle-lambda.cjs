var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/lwr/src/cli/commands/bundle-lambda.ts
__markAsModule(exports);
__export(exports, {
  bundleLambda: () => bundleLambda
});
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var import_esbuild = __toModule(require("esbuild"));
var import_vm2 = __toModule(require("vm2"));
var import_core = __toModule(require("@lwrjs/core"));
var import_esm_require_shim = __toModule(require("./shims/esm-require-shim.cjs"));
var import_lwr_lambda_shim = __toModule(require("./shims/lwr-lambda-shim.cjs"));
async function bundleLambda({entryPoint, format}) {
  const arg = await getConfigArg(entryPoint);
  const server = (0, import_core.createServer)(arg);
  const config = server.getConfig();
  const lambdaShim = generateLambdaShim(config);
  const buildDir = import_path.default.resolve("./build/generated");
  const lambdaShimPath = import_path.default.join(buildDir, "lwr-lambda-shim.js");
  import_fs.default.mkdirSync(buildDir, {recursive: true});
  import_fs.default.writeFileSync(lambdaShimPath, lambdaShim);
  const options = {
    bundle: true,
    format,
    treeShaking: true,
    entryPoints: [entryPoint],
    outdir: "./build",
    platform: "node",
    external: ["fsevents", "esbuild", "iltorb", "rollup", "esinstall", "rollup-plugin-node-polyfills"],
    inject: [lambdaShimPath]
  };
  if (format === "esm") {
    options.banner = {
      js: import_esm_require_shim.default
    };
  }
  (0, import_esbuild.build)(options);
}
async function getConfigArg(entryPoint) {
  const result = await (0, import_esbuild.build)({
    entryPoints: [entryPoint],
    bundle: true,
    write: false,
    format: "cjs",
    platform: "node",
    external: [
      "@lwrjs/lambda/aws"
    ]
  });
  const lambda = result.outputFiles[0].text;
  const vm = new import_vm2.NodeVM({
    console: "inherit",
    sandbox: {},
    require: {
      external: true,
      builtin: ["*"],
      root: [import_path.default.dirname(entryPoint)],
      mock: {
        "@lwrjs/lambda/aws": {
          createHandler: (arg) => {
            return arg;
          }
        }
      }
    }
  });
  try {
    const {get} = vm.run(lambda);
    return get;
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
}
function generateLambdaShim(config) {
  const serviceCtors = [];
  const services = [];
  const serviceConfigs = [];
  for (const [index, [servicePath, serviceConfig = {}]] of config.moduleProviders.entries()) {
    serviceCtors.push(`import ServiceCtor${index} from '${servicePath}';`);
    services.push(`ServiceCtor${index}`);
    serviceConfigs.push(JSON.stringify(serviceConfig));
  }
  const hookCtors = [];
  const hooks = [];
  const hookConfigs = [];
  for (const [index, [hookPath, hookConfig = {}]] of config.moduleProviders.entries()) {
    hookCtors.push(`import HookCtor${index} from '${hookPath}';`);
    hooks.push(`HookCtor${index}`);
    hookConfigs.push(JSON.stringify(hookConfig));
  }
  return import_lwr_lambda_shim.default.replace("{ serviceCtors }", serviceCtors.join("\n")).replace("{ services }", services.join()).replace("{ serviceConfigs }", serviceConfigs.join()).replace("{ hookCtors }", hookCtors.join("\n")).replace("{ hooks }", hooks.join()).replace("{ hookConfigs }", hookConfigs.join());
}
