var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/lwr/src/cli/cli.ts
var import_cac = __toModule(require("cac"));
var import_fs = __toModule(require("fs"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_chalk = __toModule(require("chalk"));
var import_utils = __toModule(require("./utils.cjs"));
var import_meta = {};
var {version} = JSON.parse((0, import_fs.readFileSync)(new URL("../../../package.json", import_meta.url), "utf-8"));
var cli = (0, import_cac.cac)("lwr");
cli.option("-c, --config <file>", `[string] use specified config file`).option("-r, --root <path>", `[string] use specified root directory`).option("--base <path>", `[string] public base path (default: /)`).option("-m, --mode <mode>", `[string] set env mode`);
cli.command("").action((o) => {
  console.error(import_chalk.default.red(`Invalid command`));
  cli.outputHelp();
  process.exit(1);
});
cli.command("serve", "Starts an LWR server (defaults to dev mode)").alias("dev").option("--port <port>", `[number] specify port`).option("--mode <mode>", "[string] server mode").option("--open <path>", `[boolean | string] open browser on startup`).action(async (options) => {
  const {createServer} = await Promise.resolve().then(() => __toModule(require("@lwrjs/core")));
  const {port, mode = "dev", open} = options;
  try {
    const server = await createServer({port, serverMode: mode});
    await server.listen(async ({serverMode, port: port2}) => {
      console.log(import_chalk.default.green(`Running LWR v${version} at: http://localhost:${port2} | mode: ${serverMode}`));
      if (open) {
        await (0, import_utils.launch)(port2);
      }
    });
  } catch (error) {
    if (error instanceof import_diagnostics.DiagnosticsError) {
      console.log(error.diagnostics);
      process.exit(1);
    } else {
      throw error;
    }
  }
});
cli.command("build", "Builds a static LWR site").alias("static-build").option("--outputDir <directory>", `[string] output directory`).action(async (options) => {
  const {outputDir, mode = process.env.MODE || "prod"} = options;
  const {generateStaticSite} = await Promise.resolve().then(() => __toModule(require("@lwrjs/core")));
  try {
    await generateStaticSite({
      serverMode: mode,
      staticSiteGenerator: {outputDir}
    });
  } catch (error) {
    if (error instanceof import_diagnostics.DiagnosticsError) {
      console.log(error.diagnostics);
      process.exit(1);
    } else {
      throw error;
    }
  }
});
cli.command("bundle-lambda", "Bundles the lambda source").option("--entryPoint <entry>", "[string] bundling entry point").option("--format <format>", "[string] bundle output format").action(async (options) => {
  const entryPoint = options.entryPoint || "./src/index.ts";
  const format = options.format || "esm";
  try {
    const {bundleLambda} = await Promise.resolve().then(() => __toModule(require("./commands/bundle-lambda.cjs")));
    await bundleLambda({entryPoint, format});
  } catch (error) {
    if (error instanceof import_diagnostics.DiagnosticsError) {
      console.log(error.diagnostics);
      process.exit(1);
    } else {
      throw error;
    }
  }
});
cli.on("command:*", () => {
  console.error(import_chalk.default.redBright(`Invalid command: ${cli.args.join(" ")}`));
  cli.outputHelp();
  process.exit(1);
});
cli.help();
cli.version(version);
cli.parse();
