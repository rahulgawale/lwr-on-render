export declare const PromiseProtoCatch: <TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined) => Promise<any>, PromiseProtoThen: <TResult1 = any, TResult2 = never>(onfulfilled?: ((value: any) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>;
export declare const PromiseResolve: {
    (): Promise<void>;
    <T>(value: T | PromiseLike<T>): Promise<T>;
};
export declare const PromiseReject: <T = never>(reason?: any) => Promise<T>;
//# sourceMappingURL=Promise.d.ts.map