export declare const ArrayCtor: ArrayConstructor;
export declare const ArrayProtoFilter: {
    <S extends any>(predicate: (value: any, index: number, array: any[]) => value is S, thisArg?: any): S[];
    (predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): any[];
}, ArrayProtoIncludes: (searchElement: any, fromIndex?: number | undefined) => boolean, ArrayProtoIndexOf: (searchElement: any, fromIndex?: number | undefined) => number, ArrayProtoJoin: (separator?: string | undefined) => string, ArrayProtoPush: (...items: any[]) => number, ArrayProtoShift: () => any, ArrayProtoSlice: (start?: number | undefined, end?: number | undefined) => any[], ArrayProtoSort: (compareFn?: ((a: any, b: any) => number) | undefined) => any[], ArrayProtoUnshift: (...items: any[]) => number;
export declare const ArrayIsArray: (arg: any) => arg is any[];
export declare function ArrayConcat(array: any[] | readonly any[], ...args: Parameters<typeof Array.prototype.concat>): ReturnType<typeof Array.prototype.concat>;
export declare function toSafeArray<T extends any[]>(array: T): T;
//# sourceMappingURL=Array.d.ts.map