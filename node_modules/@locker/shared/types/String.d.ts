export declare const StringCtor: StringConstructor;
export declare const StringProtoEndsWith: (searchString: string, endPosition?: number | undefined) => boolean, StringProtoIncludes: (searchString: string, position?: number | undefined) => boolean, StringProtoIndexOf: (searchString: string, position?: number | undefined) => number, StringProtoMatch: {
    (regexp: string | RegExp): RegExpMatchArray | null;
    (matcher: {
        [Symbol.match](string: string): RegExpMatchArray | null;
    }): RegExpMatchArray | null;
}, StringProtoReplace: {
    (searchValue: string | RegExp, replaceValue: string): string;
    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
    (searchValue: {
        [Symbol.replace](string: string, replaceValue: string): string;
    }, replaceValue: string): string;
    (searchValue: {
        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
    }, replacer: (substring: string, ...args: any[]) => string): string;
}, StringProtoSlice: (start?: number | undefined, end?: number | undefined) => string, StringProtoSplit: {
    (separator: string | RegExp, limit?: number | undefined): string[];
    (splitter: {
        [Symbol.split](string: string, limit?: number | undefined): string[];
    }, limit?: number | undefined): string[];
}, StringProtoStartsWith: (searchString: string, position?: number | undefined) => boolean, StringProtoToLowerCase: () => string, StringProtoToUpperCase: () => string, StringProtoValueOf: () => string;
export declare function capitalizeFirstChar(string: string): string;
export declare function enquote(string: string, quoteChar?: string): string;
export declare function extractFunctionBodySource(func: Function): string;
export declare function isConvertibleToString(value: any): boolean;
export declare function toString(value: any): string;
export declare function toSafeTemplateStringValue(value: any): string;
//# sourceMappingURL=String.d.ts.map