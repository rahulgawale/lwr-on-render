export declare type Getter = () => any;
export interface GetterSetterDescriptor {
    configurable?: boolean;
    enumerable?: boolean;
    get: Getter;
    set: Setter;
}
export declare type NearMembraneSerializedValue = bigint | boolean | number | string | symbol;
export declare type ProxyTarget = CallableFunction | any[] | object;
export interface SandboxRecord {
    BASIC_INSTRUMENTATION_DATA: any;
    LOCKER_DEBUG_MODE_INSTRUMENTATION_FLAG: boolean;
    LOCKER_VERBOSE_DEBUG_MODE_INSTRUMENTATION_FLAG: boolean;
    UNCOMPILED_CONTEXT: any;
    context: any;
    document: any;
    distortions: WeakMap<any, any>;
    endowments: object;
    globalObject: typeof globalThis;
    helpers: any;
    instrumentation: any;
    key: string;
    sandboxEvaluator: Function;
    top: SandboxRecord;
    type: number;
    virtualEnvironmentEvaluator: Function;
}
export declare type Setter = (value: any) => void;
export declare const enum TargetTraits {
    None = 0,
    IsArray = 1,
    IsArrayBufferView = 2,
    IsFunction = 4,
    IsArrowFunction = 8,
    IsObject = 16,
    IsTypedArray = 32,
    Revoked = 64
}
//# sourceMappingURL=types.d.ts.map