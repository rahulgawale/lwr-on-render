/*!
 * Copyright (C) 2019 salesforce.com, inc.
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var shared$LWS = require('@locker/shared');

const {
  prototype: AttrProto$LWS
} = Attr;
const AttrProtoNameGetter$LWS = shared$LWS.ObjectLookupOwnGetter(AttrProto$LWS, 'name');
const AttrProtoNamespaceURIGetter$LWS = shared$LWS.ObjectLookupOwnGetter(AttrProto$LWS, 'namespaceURI');
const AttrProtoOwnerElementGetter$LWS = shared$LWS.ObjectLookupOwnGetter(AttrProto$LWS, 'ownerElement');
const {
  get: AttrProtoValueGetter$LWS,
  set: AttrProtoValueSetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(AttrProto$LWS, 'value');
const selfDocument$LWS = document;
const {
  prototype: DocumentProto$LWS
} = Document; // Used by '@locker/near-membrane/dom'.

const {
  close: DocumentProtoClose$LWS,
  open: DocumentProtoOpen$LWS
} = DocumentProto$LWS;
const {
  createComment: DocumentProtoCreateComment$LWS,
  createElement: DocumentProtoCreateElement$LWS,
  createElementNS: DocumentProtoCreateElementNS$LWS,
  getElementById: DocumentProtoGetElementById$LWS
} = DocumentProto$LWS;
const DocumentProtoBodyGetter$LWS = shared$LWS.ObjectLookupOwnGetter(DocumentProto$LWS, 'body');
const {
  get: DocumentProtoCookieGetter$LWS,
  set: DocumentProtoCookieSetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(DocumentProto$LWS, 'cookie');
const DocumentProtoDefaultViewGetter$LWS = shared$LWS.ObjectLookupOwnGetter(DocumentProto$LWS, 'defaultView');
const DocumentProtoDocumentElementGetter$LWS = shared$LWS.ObjectLookupOwnGetter(DocumentProto$LWS, 'documentElement');
const DocumentProtoHeadGetter$LWS = shared$LWS.ObjectLookupOwnGetter(DocumentProto$LWS, 'head');
const DocumentProtoImplementationGetter$LWS = shared$LWS.ObjectLookupOwnGetter(DocumentProto$LWS, 'implementation');
const {
  prototype: ElementProto$LWS
} = Element; // Used by '@locker/near-membrane-dom'.

const {
  remove: ElementProtoRemove$LWS
} = ElementProto$LWS;
const {
  closest: ElementProtoClosest$LWS,
  getAttribute: ElementProtoGetAttribute$LWS,
  getAttributeNode: ElementProtoGetAttributeNode$LWS,
  getAttributeNodeNS: ElementProtoGetAttributeNodeNS$LWS,
  hasAttribute: ElementProtoHasAttribute$LWS,
  querySelector: ElementProtoQuerySelector$LWS,
  removeAttributeNode: ElementProtoRemoveAttributeNode$LWS,
  setAttribute: ElementProtoSetAttribute$LWS,
  setAttributeNS: ElementProtoSetAttributeNS$LWS
} = ElementProto$LWS;
const {
  get: ElementProtoInnerHTMLGetter$LWS,
  set: ElementProtoInnerHTMLSetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(ElementProto$LWS, 'innerHTML');
const {
  get: ElementProtoOuterHTMLGetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(ElementProto$LWS, 'outerHTML');
const ElementProtoNamespaceURIGetter$LWS = shared$LWS.ObjectLookupOwnGetter(ElementProto$LWS, 'namespaceURI');
const HTMLTemplateElementProtoContentGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLTemplateElement.prototype, 'content');
const {
  prototype: NodeProto$LWS
} = Node;
const {
  appendChild: NodeProtoAppendChild$LWS,
  cloneNode: NodeProtoCloneNode$LWS,
  isEqualNode: NodeProtoIsEqualNode$LWS
} = NodeProto$LWS;
const NodeProtoChildNodesGetter$LWS = shared$LWS.ObjectLookupOwnGetter(NodeProto$LWS, 'childNodes');
const NodeProtoFirstChildGetter$LWS = shared$LWS.ObjectLookupOwnGetter(NodeProto$LWS, 'firstChild'); // Used by '@locker/near-membrane-dom'.

const NodeProtoLastChildGetter$LWS = shared$LWS.ObjectLookupOwnGetter(NodeProto$LWS, 'lastChild');
const NodeProtoNodeNameGetter$LWS = shared$LWS.ObjectLookupOwnGetter(NodeProto$LWS, 'nodeName');
const NodeProtoOwnerDocumentGetter$LWS = shared$LWS.ObjectLookupOwnGetter(NodeProto$LWS, 'ownerDocument');
const selfWindow$LWS = window;
const {
  setTimeout: WindowSetTimeout$LWS
} = selfWindow$LWS; // These properties are part of the WindowOrGlobalScope mixin and not on
// Window.prototype.
// https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope

const {
  clearInterval: WindowClearInterval$LWS,
  decodeURIComponent: WindowDecodeURIComponent$LWS,
  encodeURIComponent: WindowEncodeURIComponent$LWS,
  setInterval: WindowSetInterval$LWS
} = selfWindow$LWS;

const WindowQueueMicrotask$LWS = (() => {
  const {
    queueMicrotask: queueMicrotask$LWS
  } = selfWindow$LWS; // istanbul ignore else

  if (typeof queueMicrotask$LWS === 'function') {
    return queueMicrotask$LWS;
  } // Edge 15 does not support `queueMicrotask()`.
  // https://caniuse.com/mdn-api_queuemicrotask
  // https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask#when_queuemicrotask_isnt_available
  // istanbul ignore next: coverage is not measured in Edge 15, which means this whole fallback is considered "uncovered" when the tests are run in Chrome.
  // eslint-disable-next-line @typescript-eslint/no-shadow, no-shadow


  return function queueMicrotask$LWS(callback$LWS) {
    let promise$LWS = shared$LWS.PromiseResolve();
    promise$LWS = shared$LWS.ReflectApply(shared$LWS.PromiseProtoThen, promise$LWS, [callback$LWS]);
    shared$LWS.ReflectApply(shared$LWS.PromiseProtoCatch, promise$LWS, [error => WindowSetTimeout$LWS(() => {
      throw error;
    }, 0)]);
  };
})();

const WindowDocumentGetter$LWS = shared$LWS.ObjectLookupOwnGetter(selfWindow$LWS, 'document');
const WindowFrameElementGetter$LWS = shared$LWS.ObjectLookupOwnGetter(selfWindow$LWS, 'frameElement');
const WindowLengthGetter$LWS = shared$LWS.ObjectLookupOwnGetter(selfWindow$LWS, 'length');
const WindowLocationGetter$LWS = shared$LWS.ObjectLookupOwnGetter(selfWindow$LWS, 'location');

function isWindow$LWS(value$LWS) {
  if (typeof value$LWS === 'object' && value$LWS !== null && shared$LWS.ObjectHasOwn(value$LWS, 'window') && value$LWS.window === value$LWS) {
    // Slower check that must certainly detect a window object.
    try {
      // window.self getter only works for a window object, otherwise it
      // throws, additionally, this works fine for a detached window as
      // well, which is important since it will guarantee that this check
      // works also for iframes that are disconnected, and could be connected
      // later on, that should not bypass this check. This check is is also
      // equivalent to window.frames, and here is the very simple spec for
      // this getter:
      // https://html.spec.whatwg.org/multipage/window-object.html#dom-self
      shared$LWS.ReflectApply(WindowLocationGetter$LWS, value$LWS, []);
      return true; // eslint-disable-next-line no-empty
    } catch (_unused$LWS) {}
  }

  return false;
}
/* eslint no-underscore-dangle: ['error',{allowAfterThis:true}] */


class Validator$LWS {
  constructor(globalObject$LWS, document$LWS = globalObject$LWS.document) {
    this.isAllowedSharedElementChild = element$LWS => element$LWS instanceof this._constructors.HTMLLinkElement || element$LWS instanceof this._constructors.HTMLScriptElement;

    this.isEqualDomString = (leftString$LWS, rightString$LWS) => {
      shared$LWS.ReflectApply(ElementProtoInnerHTMLSetter$LWS, this._templates.left, [leftString$LWS]);
      shared$LWS.ReflectApply(ElementProtoInnerHTMLSetter$LWS, this._templates.right, [rightString$LWS]);
      return deepIsEqualNode$LWS(this._templates.left, this._templates.right);
    };

    this.isSharedElement = element$LWS => element$LWS === shared$LWS.ReflectApply(DocumentProtoHeadGetter$LWS, this._document, []) || element$LWS === shared$LWS.ReflectApply(DocumentProtoBodyGetter$LWS, this._document, []) || element$LWS === shared$LWS.ReflectApply(DocumentProtoDocumentElementGetter$LWS, this._document, []);

    const {
      HTMLLinkElement: HTMLLinkElement$LWS,
      HTMLScriptElement: HTMLScriptElement$LWS
    } = globalObject$LWS;
    this._constructors = {
      HTMLLinkElement: HTMLLinkElement$LWS,
      HTMLScriptElement: HTMLScriptElement$LWS
    };
    this._document = document$LWS;
    this._templates = {
      left: shared$LWS.ReflectApply(DocumentProtoCreateElement$LWS, this._document, ['template']),
      right: shared$LWS.ReflectApply(DocumentProtoCreateElement$LWS, this._document, ['template'])
    };
  }

}

function deepIsEqualNode$LWS(leftRoot$LWS, rightRoot$LWS) {
  const leftRootNode$LWS = leftRoot$LWS instanceof HTMLTemplateElement ? shared$LWS.ReflectApply(HTMLTemplateElementProtoContentGetter$LWS, leftRoot$LWS, []) : leftRoot$LWS;
  const rightRootNode$LWS = rightRoot$LWS instanceof HTMLTemplateElement ? shared$LWS.ReflectApply(HTMLTemplateElementProtoContentGetter$LWS, rightRoot$LWS, []) : rightRoot$LWS;

  if (shared$LWS.ReflectApply(NodeProtoIsEqualNode$LWS, leftRootNode$LWS, [rightRootNode$LWS])) {
    const leftChildNodes$LWS = shared$LWS.ReflectApply(NodeProtoChildNodesGetter$LWS, leftRootNode$LWS, []);
    const childCount$LWS = leftChildNodes$LWS.length;

    if (childCount$LWS > 0) {
      const rightChildNodes$LWS = shared$LWS.ReflectApply(NodeProtoChildNodesGetter$LWS, rightRootNode$LWS, []);

      for (let i$LWS = 0; i$LWS < childCount$LWS; i$LWS += 1) {
        if (deepIsEqualNode$LWS(leftChildNodes$LWS[i$LWS], rightChildNodes$LWS[i$LWS]) === false) {
          return false;
        }
      }
    }

    return true;
  }

  return false;
}

const selfValidator$LWS = new Validator$LWS(selfWindow$LWS, selfDocument$LWS);
const documentToValidatorMap$LWS = shared$LWS.toSafeWeakMap(new shared$LWS.WeakMapCtor([[selfDocument$LWS, selfValidator$LWS]]));

function getValidator$LWS(globalObject$LWS, document$LWS = globalObject$LWS == null ? void 0 : globalObject$LWS.document) {
  // Fast path validator lookup for top level window.
  if (globalObject$LWS === undefined || globalObject$LWS === selfWindow$LWS) {
    return selfValidator$LWS;
  } // Use the `document` as the key because a window object maintains its identity
  // continuity when its location changes and while the non-configurable document
  // property does not.


  let validator$LWS = documentToValidatorMap$LWS.get(document$LWS);

  if (validator$LWS === undefined) {
    validator$LWS = new Validator$LWS(globalObject$LWS, document$LWS);
    documentToValidatorMap$LWS.set(document$LWS, validator$LWS);
  }

  return validator$LWS;
}

const BlobCtor$LWS = Blob;
const {
  prototype: BlobProto$LWS
} = BlobCtor$LWS;
const {
  slice: BlobProtoSlice$LWS
} = BlobProto$LWS;
const BlobProtoSizeGetter$LWS = shared$LWS.ObjectLookupOwnGetter(BlobProto$LWS, 'size');
const BlobProtoTypeGetter$LWS = shared$LWS.ObjectLookupOwnGetter(BlobProto$LWS, 'type');
const {
  getElementById: DocumentFragmentProtoGetElementById$LWS
} = DocumentFragment.prototype;
const {
  createDocument: DOMImplementationProtoCreateDocument$LWS
} = DOMImplementation.prototype;
const DOMTokenListProtoValueGetter$LWS = shared$LWS.ObjectLookupOwnGetter(DOMTokenList.prototype, 'value');
const EventProtoCurrentTargetGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Event.prototype, 'currentTarget');
const {
  addEventListener: EventTargetProtoAddEventListener$LWS
} = EventTarget.prototype;
const HTMLAnchorElementProtoHostnameGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLAnchorElement.prototype, 'hostname');
const {
  get: HTMLAnchorElementProtoHrefGetter$LWS,
  set: HTMLAnchorElementProtoHrefSetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(HTMLAnchorElement.prototype, 'href');
const HTMLAnchorElementProtoPathnameGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLAnchorElement.prototype, 'pathname');
const HTMLAnchorElementProtoProtocolGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLAnchorElement.prototype, 'protocol');
const {
  prototype: HTMLElementProto$LWS
} = HTMLElement;
const HTMLElementProtoDatasetGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLElementProto$LWS, 'dataset'); // Used by '@locker/near-membrane-dom'.

const HTMLElementProtoStyleGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLElementProto$LWS, 'style');
const {
  prototype: HTMLIFrameElementProto$LWS
} = HTMLIFrameElement; // Used by '@locker/near-membrane-dom'.

const HTMLIFrameElementProtoContentWindowGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLIFrameElementProto$LWS, 'contentWindow');
const HTMLIFrameElementProtoSrcSetter$LWS = shared$LWS.ObjectLookupOwnSetter(HTMLIFrameElementProto$LWS, 'src');
const {
  get: HTMLScriptElementProtoSrcGetter$LWS,
  set: HTMLScriptElementProtoSrcSetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(HTMLScriptElement.prototype, 'src');
const NAMESPACE_DEFAULT$LWS = 'default';
const NAMESPACE_SVG$LWS = 'http://www.w3.org/2000/svg';
const NAMESPACE_XHTML$LWS = 'http://www.w3.org/1999/xhtml';
const NAMESPACE_XLINK$LWS = 'http://www.w3.org/1999/xlink';
const {
  createContextualFragment: RangeProtoCreateContextualFragment$LWS
} = Range.prototype;
const RequestProtoURLGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Request.prototype, 'url');
const documentPattern$LWS = 'document';
const windowPattern$LWS = 'document\\.defaultView|frames|globalThis|self|window';
const webpackGlobalPattern$LWS = `${windowPattern$LWS}|global`;
const webpackGlobalDocumentPattern$LWS = `${documentPattern$LWS}|global.document`;
const locationReferencesRegExp$LWS = createPropertyReferenceRegExp$LWS(`${documentPattern$LWS}|${windowPattern$LWS}`, 'location');
const locationReferencesWithWebPackRegExp$LWS = createPropertyReferenceRegExp$LWS(`${webpackGlobalDocumentPattern$LWS}|${webpackGlobalPattern$LWS}`, 'location');
const sandboxEvalContextNameRegExp$LWS = new shared$LWS.RegExpCtor(`(?:^|\\W)${shared$LWS.escapeRegExp(shared$LWS.SANDBOX_EVAL_CONTEXT_NAME)}(?:\\W|$)`);
const topReferencesRegExp$LWS = createPropertyReferenceRegExp$LWS(windowPattern$LWS, 'top');
const topWebpackReferencesRegExp$LWS = createPropertyReferenceRegExp$LWS(webpackGlobalPattern$LWS, 'top');
const webpackRequireNameRegExp$LWS = new shared$LWS.RegExpCtor(`\\b${shared$LWS.escapeRegExp(shared$LWS.WEBPACK_REQUIRE_NAME)}\\b`);

function createPropertyReferenceRegExp$LWS(objectPattern$LWS, key$LWS) {
  // An assignment operator is defined by
  // https://tc39.es/ecma262/#prod-AssignmentOperator
  // as one of the following:
  //     *= /= %= += -= <<= >>= >>>= &= ^= |= **=
  return new shared$LWS.RegExpCtor(`\\b(?:${objectPattern$LWS})\\.${key$LWS}(\\s*(?:[?*/%&^|+-]|>>>?|<<)*=(?=[^=]))?`, 'g');
}

function applyUncompiledTransformations$LWS(sourceText$LWS) {
  const isWebpack$LWS = shared$LWS.ReflectApply(shared$LWS.RegExpProtoTest, webpackRequireNameRegExp$LWS, [sourceText$LWS]);
  let locationRegExp$LWS, topRegExp$LWS;

  if (isWebpack$LWS) {
    locationRegExp$LWS = locationReferencesWithWebPackRegExp$LWS;
    topRegExp$LWS = topWebpackReferencesRegExp$LWS;
  } else {
    locationRegExp$LWS = locationReferencesRegExp$LWS;
    topRegExp$LWS = topReferencesRegExp$LWS;
  }

  const transforms$LWS = []; // Input `sourceText` is non-compiled, so `window.location` returns `null` inside
  // the detached iframe sandbox. Our compiler solves this problem by transforming
  // the red `location` reference into a blue `location` reference. The solution
  // below emulates what our compiler does, but using a simple string replacement.

  const locationReplacer$LWS = (_match$LWS, assignmentOperator$LWS) => {
    transforms$LWS[0] = shared$LWS.UNCOMPILED_LOCATION_NAME;
    return assignmentOperator$LWS ? `${shared$LWS.UNCOMPILED_LOCATION_NAME}.href${assignmentOperator$LWS}` : shared$LWS.UNCOMPILED_LOCATION_NAME;
  };

  sourceText$LWS = shared$LWS.ReflectApply(shared$LWS.StringProtoReplace, sourceText$LWS, [locationRegExp$LWS, locationReplacer$LWS]); // In non-compiled source text `window.top` is null when evaluated in a sandbox.
  // We perform a naive transformation to replace references of `window.top` to use
  // our internal sandbox helpers.

  const {
    length: length$LWS
  } = transforms$LWS;

  const topReplacer$LWS = () => {
    transforms$LWS[length$LWS] = shared$LWS.UNCOMPILED_TOP_NAME;
    return shared$LWS.UNCOMPILED_TOP_NAME;
  };

  sourceText$LWS = shared$LWS.ReflectApply(shared$LWS.StringProtoReplace, sourceText$LWS, [topRegExp$LWS, topReplacer$LWS]);
  return {
    code: sourceText$LWS,
    transforms: transforms$LWS
  };
}

function destructureHelpers$LWS(helpers$LWS) {
  const helperNamesCommaSeparated$LWS = shared$LWS.ReflectApply(shared$LWS.ArrayProtoJoin, helpers$LWS, [',']);
  return `const {${helperNamesCommaSeparated$LWS}} = ${shared$LWS.SANDBOX_EVAL_CONTEXT_NAME};`;
}

function transformUncompiledSourceText$LWS(sourceText$LWS) {
  // To avoid conflicts with anyone else using `SANDBOX_EVAL_CONTEXT_NAME`,
  // we sniff the source text to see if it is present, and in that case we
  // don't proceed with the string replacement.
  if (shared$LWS.ReflectApply(shared$LWS.RegExpProtoTest, sandboxEvalContextNameRegExp$LWS, [sourceText$LWS])) {
    return sourceText$LWS;
  }

  const {
    code: code$LWS,
    transforms: transforms$LWS
  } = applyUncompiledTransformations$LWS(sourceText$LWS);

  if (transforms$LWS.length === 0) {
    return sourceText$LWS;
  }

  const destructureSandboxEvalContextSnippet$LWS = destructureHelpers$LWS(transforms$LWS);
  const pragmaIndex$LWS = shared$LWS.indexOfPragma(code$LWS, 'use strict');

  if (pragmaIndex$LWS === -1) {
    return `${destructureSandboxEvalContextSnippet$LWS}${code$LWS}`;
  } // The "use strict" pragma, including quotes, is 12 characters long.


  let afterPragmaIndex$LWS = pragmaIndex$LWS + 12; // istanbul ignore else

  if (afterPragmaIndex$LWS < code$LWS.length && code$LWS[afterPragmaIndex$LWS] === ';') {
    // Move index after the semicolon.
    afterPragmaIndex$LWS += 1;
  }

  return shared$LWS.ReflectApply(shared$LWS.StringProtoSlice, code$LWS, [0, afterPragmaIndex$LWS]) + destructureSandboxEvalContextSnippet$LWS + shared$LWS.ReflectApply(shared$LWS.StringProtoSlice, code$LWS, [afterPragmaIndex$LWS]);
}

const {
  key: StorageProtoKey$LWS,
  getItem: StorageProtoGetItem$LWS,
  removeItem: StorageProtoRemoveItem$LWS,
  setItem: StorageProtoSetItem$LWS
} = Storage.prototype;
const SVGElementProtoDatasetGetter$LWS = shared$LWS.ObjectLookupOwnGetter(SVGElement.prototype, 'dataset');
const {
  createObjectURL: URLCreateObjectURL$LWS,
  revokeObjectURL: URLRevokeObjectURL$LWS
} = URL; // This has to be done 1-by-1 because putting a full file ignore in this file
// will result in dist/index.js containing the directive and subsequently being
// ignored.
// istanbul ignore next

const XhrCtor$LWS = XMLHttpRequest;
const {
  prototype: XhrProto$LWS
} = XhrCtor$LWS;
const {
  open: XhrProtoOpen$LWS,
  send: XhrProtoSend$LWS
} = XhrProto$LWS;
const XhrProtoResponseTextGetter$LWS = shared$LWS.ObjectLookupOwnGetter(XhrProto$LWS, 'responseText');
const XhrProtoStatusGetter$LWS = shared$LWS.ObjectLookupOwnGetter(XhrProto$LWS, 'status');
const XhrProtoWithCredentialsSetter$LWS = shared$LWS.ObjectLookupOwnSetter(XhrProto$LWS, 'withCredentials');
exports.AttrProtoNameGetter = AttrProtoNameGetter$LWS;
exports.AttrProtoNamespaceURIGetter = AttrProtoNamespaceURIGetter$LWS;
exports.AttrProtoOwnerElementGetter = AttrProtoOwnerElementGetter$LWS;
exports.AttrProtoValueGetter = AttrProtoValueGetter$LWS;
exports.AttrProtoValueSetter = AttrProtoValueSetter$LWS;
exports.BlobCtor = BlobCtor$LWS;
exports.BlobProtoSizeGetter = BlobProtoSizeGetter$LWS;
exports.BlobProtoSlice = BlobProtoSlice$LWS;
exports.BlobProtoTypeGetter = BlobProtoTypeGetter$LWS;
exports.DOMImplementationProtoCreateDocument = DOMImplementationProtoCreateDocument$LWS;
exports.DOMTokenListProtoValueGetter = DOMTokenListProtoValueGetter$LWS;
exports.DocumentFragmentProtoGetElementById = DocumentFragmentProtoGetElementById$LWS;
exports.DocumentProtoBodyGetter = DocumentProtoBodyGetter$LWS;
exports.DocumentProtoClose = DocumentProtoClose$LWS;
exports.DocumentProtoCookieGetter = DocumentProtoCookieGetter$LWS;
exports.DocumentProtoCookieSetter = DocumentProtoCookieSetter$LWS;
exports.DocumentProtoCreateComment = DocumentProtoCreateComment$LWS;
exports.DocumentProtoCreateElement = DocumentProtoCreateElement$LWS;
exports.DocumentProtoCreateElementNS = DocumentProtoCreateElementNS$LWS;
exports.DocumentProtoDefaultViewGetter = DocumentProtoDefaultViewGetter$LWS;
exports.DocumentProtoDocumentElementGetter = DocumentProtoDocumentElementGetter$LWS;
exports.DocumentProtoGetElementById = DocumentProtoGetElementById$LWS;
exports.DocumentProtoHeadGetter = DocumentProtoHeadGetter$LWS;
exports.DocumentProtoImplementationGetter = DocumentProtoImplementationGetter$LWS;
exports.DocumentProtoOpen = DocumentProtoOpen$LWS;
exports.ElementProtoClosest = ElementProtoClosest$LWS;
exports.ElementProtoGetAttribute = ElementProtoGetAttribute$LWS;
exports.ElementProtoGetAttributeNode = ElementProtoGetAttributeNode$LWS;
exports.ElementProtoGetAttributeNodeNS = ElementProtoGetAttributeNodeNS$LWS;
exports.ElementProtoHasAttribute = ElementProtoHasAttribute$LWS;
exports.ElementProtoInnerHTMLGetter = ElementProtoInnerHTMLGetter$LWS;
exports.ElementProtoInnerHTMLSetter = ElementProtoInnerHTMLSetter$LWS;
exports.ElementProtoNamespaceURIGetter = ElementProtoNamespaceURIGetter$LWS;
exports.ElementProtoOuterHTMLGetter = ElementProtoOuterHTMLGetter$LWS;
exports.ElementProtoQuerySelector = ElementProtoQuerySelector$LWS;
exports.ElementProtoRemove = ElementProtoRemove$LWS;
exports.ElementProtoRemoveAttributeNode = ElementProtoRemoveAttributeNode$LWS;
exports.ElementProtoSetAttribute = ElementProtoSetAttribute$LWS;
exports.ElementProtoSetAttributeNS = ElementProtoSetAttributeNS$LWS;
exports.EventProtoCurrentTargetGetter = EventProtoCurrentTargetGetter$LWS;
exports.EventTargetProtoAddEventListener = EventTargetProtoAddEventListener$LWS;
exports.HTMLAnchorElementProtoHostnameGetter = HTMLAnchorElementProtoHostnameGetter$LWS;
exports.HTMLAnchorElementProtoHrefGetter = HTMLAnchorElementProtoHrefGetter$LWS;
exports.HTMLAnchorElementProtoHrefSetter = HTMLAnchorElementProtoHrefSetter$LWS;
exports.HTMLAnchorElementProtoPathnameGetter = HTMLAnchorElementProtoPathnameGetter$LWS;
exports.HTMLAnchorElementProtoProtocolGetter = HTMLAnchorElementProtoProtocolGetter$LWS;
exports.HTMLElementProtoDatasetGetter = HTMLElementProtoDatasetGetter$LWS;
exports.HTMLElementProtoStyleGetter = HTMLElementProtoStyleGetter$LWS;
exports.HTMLIFrameElementProtoContentWindowGetter = HTMLIFrameElementProtoContentWindowGetter$LWS;
exports.HTMLIFrameElementProtoSrcSetter = HTMLIFrameElementProtoSrcSetter$LWS;
exports.HTMLScriptElementProtoSrcGetter = HTMLScriptElementProtoSrcGetter$LWS;
exports.HTMLScriptElementProtoSrcSetter = HTMLScriptElementProtoSrcSetter$LWS;
exports.HTMLTemplateElementProtoContentGetter = HTMLTemplateElementProtoContentGetter$LWS;
exports.NAMESPACE_DEFAULT = NAMESPACE_DEFAULT$LWS;
exports.NAMESPACE_SVG = NAMESPACE_SVG$LWS;
exports.NAMESPACE_XHTML = NAMESPACE_XHTML$LWS;
exports.NAMESPACE_XLINK = NAMESPACE_XLINK$LWS;
exports.NodeProtoAppendChild = NodeProtoAppendChild$LWS;
exports.NodeProtoChildNodesGetter = NodeProtoChildNodesGetter$LWS;
exports.NodeProtoCloneNode = NodeProtoCloneNode$LWS;
exports.NodeProtoFirstChildGetter = NodeProtoFirstChildGetter$LWS;
exports.NodeProtoIsEqualNode = NodeProtoIsEqualNode$LWS;
exports.NodeProtoLastChildGetter = NodeProtoLastChildGetter$LWS;
exports.NodeProtoNodeNameGetter = NodeProtoNodeNameGetter$LWS;
exports.NodeProtoOwnerDocumentGetter = NodeProtoOwnerDocumentGetter$LWS;
exports.RangeProtoCreateContextualFragment = RangeProtoCreateContextualFragment$LWS;
exports.RequestProtoURLGetter = RequestProtoURLGetter$LWS;
exports.SVGElementProtoDatasetGetter = SVGElementProtoDatasetGetter$LWS;
exports.StorageProtoGetItem = StorageProtoGetItem$LWS;
exports.StorageProtoKey = StorageProtoKey$LWS;
exports.StorageProtoRemoveItem = StorageProtoRemoveItem$LWS;
exports.StorageProtoSetItem = StorageProtoSetItem$LWS;
exports.URLCreateObjectURL = URLCreateObjectURL$LWS;
exports.URLRevokeObjectURL = URLRevokeObjectURL$LWS;
exports.WindowClearInterval = WindowClearInterval$LWS;
exports.WindowDecodeURIComponent = WindowDecodeURIComponent$LWS;
exports.WindowDocumentGetter = WindowDocumentGetter$LWS;
exports.WindowEncodeURIComponent = WindowEncodeURIComponent$LWS;
exports.WindowFrameElementGetter = WindowFrameElementGetter$LWS;
exports.WindowLengthGetter = WindowLengthGetter$LWS;
exports.WindowLocationGetter = WindowLocationGetter$LWS;
exports.WindowQueueMicrotask = WindowQueueMicrotask$LWS;
exports.WindowSetInterval = WindowSetInterval$LWS;
exports.XhrCtor = XhrCtor$LWS;
exports.XhrProtoOpen = XhrProtoOpen$LWS;
exports.XhrProtoResponseTextGetter = XhrProtoResponseTextGetter$LWS;
exports.XhrProtoSend = XhrProtoSend$LWS;
exports.XhrProtoStatusGetter = XhrProtoStatusGetter$LWS;
exports.XhrProtoWithCredentialsSetter = XhrProtoWithCredentialsSetter$LWS;
exports.applyUncompiledTransformations = applyUncompiledTransformations$LWS;
exports.destructureHelpers = destructureHelpers$LWS;
exports.getValidator = getValidator$LWS;
exports.isWindow = isWindow$LWS;
exports.selfDocument = selfDocument$LWS;
exports.selfValidator = selfValidator$LWS;
exports.selfWindow = selfWindow$LWS;
exports.transformUncompiledSourceText = transformUncompiledSourceText$LWS;
/*! version: 0.17.9 */
