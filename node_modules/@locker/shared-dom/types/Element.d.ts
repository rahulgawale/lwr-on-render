export declare const ElementProtoRemove: () => void;
export declare const ElementProtoClosest: {
    <K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
    <K_1 extends keyof SVGElementTagNameMap>(selector: K_1): SVGElementTagNameMap[K_1] | null;
    <E extends Element = Element>(selectors: string): E | null;
}, ElementProtoGetAttribute: (qualifiedName: string) => string | null, ElementProtoGetAttributeNode: (qualifiedName: string) => Attr | null, ElementProtoGetAttributeNodeNS: (namespace: string | null, localName: string) => Attr | null, ElementProtoHasAttribute: (qualifiedName: string) => boolean, ElementProtoQuerySelector: {
    <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
    <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
    <E extends Element = Element>(selectors: string): E | null;
}, ElementProtoRemoveAttributeNode: (attr: Attr) => Attr, ElementProtoSetAttribute: (qualifiedName: string, value: string) => void, ElementProtoSetAttributeNS: (namespace: string | null, qualifiedName: string, value: string) => void;
export declare const ElementProtoInnerHTMLGetter: import("@locker/shared").Getter, ElementProtoInnerHTMLSetter: import("@locker/shared").Setter;
export declare const ElementProtoOuterHTMLGetter: import("@locker/shared").Getter;
export declare const ElementProtoNamespaceURIGetter: import("@locker/shared").Getter;
//# sourceMappingURL=Element.d.ts.map