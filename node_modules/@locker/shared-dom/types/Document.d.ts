export declare const selfDocument: Document;
export declare const DocumentProtoClose: () => void, DocumentProtoOpen: {
    (unused1?: string | undefined, unused2?: string | undefined): Document;
    (url: string | URL, name: string, features: string): Window | null;
};
export declare const DocumentProtoCreateComment: (data: string) => Comment, DocumentProtoCreateElement: {
    <K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions | undefined): HTMLElementTagNameMap[K];
    <K_1 extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K_1, options?: ElementCreationOptions | undefined): HTMLElementDeprecatedTagNameMap[K_1];
    (tagName: string, options?: ElementCreationOptions | undefined): HTMLElement;
}, DocumentProtoCreateElementNS: {
    (namespaceURI: "http://www.w3.org/1999/xhtml", qualifiedName: string): HTMLElement;
    <K extends keyof SVGElementTagNameMap>(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: K): SVGElementTagNameMap[K];
    (namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: string): SVGElement;
    (namespaceURI: string | null, qualifiedName: string, options?: ElementCreationOptions | undefined): Element;
    (namespace: string | null, qualifiedName: string, options?: string | ElementCreationOptions | undefined): Element;
}, DocumentProtoGetElementById: (elementId: string) => HTMLElement | null;
export declare const DocumentProtoBodyGetter: import("@locker/shared").Getter;
export declare const DocumentProtoCookieGetter: import("@locker/shared").Getter, DocumentProtoCookieSetter: import("@locker/shared").Setter;
export declare const DocumentProtoDefaultViewGetter: import("@locker/shared").Getter;
export declare const DocumentProtoDocumentElementGetter: import("@locker/shared").Getter;
export declare const DocumentProtoHeadGetter: import("@locker/shared").Getter;
export declare const DocumentProtoImplementationGetter: import("@locker/shared").Getter;
//# sourceMappingURL=Document.d.ts.map