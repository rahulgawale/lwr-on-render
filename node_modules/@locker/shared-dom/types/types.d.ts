import type { SandboxRecord as SandboxRecordBase } from '@locker/shared/types';
declare global {
    interface Event {
        path: EventTarget[];
    }
}
export interface CookieStore extends EventTarget {
    prototype: {
        delete: Function;
        get: Function;
        getAll: Function;
        set: Function;
    };
}
export declare type GlobalObject = Window & typeof globalThis & WindowCookieStore;
export declare type SandboxEvaluator = (sourceText: string, context?: any, globalObject?: GlobalObject, document?: Document) => any;
export interface SandboxRecord extends SandboxRecordBase {
    document: Document;
    globalObject: GlobalObject;
    sandboxEvaluator: SandboxEvaluator;
}
export interface WindowCookieStore {
    CookieStore?: CookieStore;
}
//# sourceMappingURL=types.d.ts.map