import type { SandboxKey, SandboxRecord as SandboxRecordBase } from '@locker/distortion/types';
import { SandboxType } from '@locker/distortion/types';
import type { Instrumentation } from '@locker/instrumentation/types';
import type { Getter, ProxyTarget } from '@locker/shared/types';
import type { GlobalObject } from '@locker/shared-dom/types';
export interface ChildWindowRecordOptions {
    context: any;
    document: Document;
    globalObject: GlobalObject;
    key: SandboxKey;
    type: SandboxType;
}
export interface EvalHelpers {
    asyncToGen: (func: GeneratorFunction, thisArg: any) => Promise<any>;
    forAwaitOf: (index: number, stage: number, object?: object) => any;
    loadScript: (thisArg: any, url: string | URL) => Promise<any>;
    loadStyle: (thisArg: any, url: string | URL) => Promise<any>;
    makeRedGet: (...bindings: RedBindings) => RedBindings;
    makeRedResyncImports: (bindings: RedBindings) => () => RedBindings;
    namespace: <T extends object>(object: T) => Readonly<T>;
    spreadable: <T extends any[]>(array: T) => T;
    super: (target: ProxyTarget, key: PropertyKey, thisArgOrReceiver: any, args?: ArrayLike<any>) => any;
}
export interface EvaluateOptions {
    context: any;
    document: Document;
    endowments: object;
    globalObject: GlobalObject;
    instrumentation: Instrumentation;
    key: SandboxKey;
    source: Function | string;
    sourceType: SourceType;
    type: SandboxType;
    verboseInstrumentation: boolean;
}
export interface OpaqueWindowRecordOptions {
    globalObject: GlobalObject;
    key: SandboxKey;
    type: SandboxType;
}
export declare type RedBindings = Getter[];
export interface SandboxRecord extends SandboxRecordBase {
    helpers: EvalHelpers;
    top: SandboxRecord;
    type: SandboxType;
    virtualEnvironmentEvaluator: VirtualEnvironmentEvaluator;
}
export declare type SandboxRegistry = Record<SandboxKey, SandboxRecord>;
export declare const enum SourceType {
    Script = 0,
    Module = 1
}
export interface WindowRecordOptions {
    context: any;
    endowments: object;
    instrumentation: Instrumentation;
    key: SandboxKey;
    type: SandboxType;
    verboseInstrumentation: boolean;
}
export declare type VirtualEnvironmentEvaluator = (sourceText: string) => any;
//# sourceMappingURL=types.d.ts.map