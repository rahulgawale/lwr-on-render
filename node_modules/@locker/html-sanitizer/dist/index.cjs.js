/*!
 * Copyright (C) 2019 salesforce.com, inc.
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var shared$LWS = require('@locker/shared');

var sharedDom$LWS = require('@locker/shared-dom');

var sharedUrl$LWS = require('@locker/shared-url');

var createDOMPurify$LWS = require('dompurify');

function _interopDefaultLegacy$LWS(e$LWS) {
  return e$LWS && typeof e$LWS === 'object' && 'default' in e$LWS ? e$LWS : {
    'default': e$LWS
  };
}

var createDOMPurify__default$LWS = /*#__PURE__*/_interopDefaultLegacy$LWS(createDOMPurify$LWS);

const ariaAttributes$LWS = ['aria-activedescendant', 'aria-atomic', 'aria-autocomplete', 'aria-busy', 'aria-checked', 'aria-controls', 'aria-describedby', 'aria-disabled', 'aria-readonly', 'aria-dropeffect', 'aria-expanded', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-disabled', 'aria-invalid', 'aria-label', 'aria-labelledby', 'aria-level', 'aria-live', 'aria-multiline', 'aria-multiselectable', 'aria-orientation', 'aria-owns', 'aria-posinset', 'aria-pressed', 'aria-readonly', 'aria-relevant', 'aria-required', 'aria-selected', 'aria-setsize', 'aria-sort', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'role', 'target'];
const htmlTags$LWS = ['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'caption', 'canvas', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'datalist', 'dd', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'em', 'fieldset', 'figure', 'figcaption', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'i', 'iframe', 'img', 'input', 'ins', 'keygen', 'kbd', 'label', 'legend', 'li', 'map', 'mark', 'menu', 'meter', 'nav', 'ol', 'optgroup', 'option', 'output', 'p', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'small', 'source', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr'];
const svgTags$LWS = ['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'audio', 'canvas', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'video', 'view', 'vkern', 'use'];
const allTags$LWS = shared$LWS.ArrayConcat(htmlTags$LWS, svgTags$LWS);
const CUSTOM_ELEMENT_HANDLING$LWS = {
  attributeNameCheck: /.+/,
  allowCustomizedBuiltInElements: false,
  // The regexp is based on the WHATWG spec:
  // https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
  // However, DOMPurify sanitizes unicode characters (\u0000-\uFFFF) in tag name.
  tagNameCheck: /^[a-z][-_.\w]*-[-.0-9_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u37D0\u37F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u10000-\uEFFFF]*$/
}; // A generic config in which the sanitizer attempts in place sanitization and
// returns node.

const NODE_ALL_IN_PLACE$LWS = {
  ADD_ATTR: shared$LWS.shallowCloneArray(ariaAttributes$LWS),
  // Add '#document-fragment' to ALLOWED_TAGS to avoid a forbidden root node
  // exception.
  // https://github.com/cure53/DOMPurify/issues/664
  ALLOWED_TAGS: shared$LWS.ArrayConcat(allTags$LWS, '#document-fragment'),
  CUSTOM_ELEMENT_HANDLING: shared$LWS.ObjectAssign({}, CUSTOM_ELEMENT_HANDLING$LWS),
  IN_PLACE: true
}; // A config to use only svg tags in which the sanitizer returns a document
// fragment.

const NODE_SVG$LWS = {
  ADD_ATTR: shared$LWS.shallowCloneArray(ariaAttributes$LWS),
  ALLOWED_TAGS: shared$LWS.shallowCloneArray(svgTags$LWS),
  CUSTOM_ELEMENT_HANDLING: shared$LWS.ObjectAssign({}, CUSTOM_ELEMENT_HANDLING$LWS),
  RETURN_DOM_FRAGMENT: true,
  SANITIZE_DOM: false
}; // A config to use only tags allowed for blob and file.

const STRING_BLOB_HTML$LWS = {
  ADD_ATTR: shared$LWS.shallowCloneArray(ariaAttributes$LWS),
  ALLOWED_TAGS: shared$LWS.ReflectApply(shared$LWS.ArrayProtoFilter, allTags$LWS, [tag$LWS => tag$LWS !== 'iframe']),
  CUSTOM_ELEMENT_HANDLING: shared$LWS.ObjectAssign({}, CUSTOM_ELEMENT_HANDLING$LWS),
  SANITIZE_DOM: false
};
const instances$LWS = shared$LWS.toSafeWeakMap(new shared$LWS.WeakMapCtor());

function sanitizer$LWS(config$LWS, hooksRegistry$LWS) {
  let dompurify$LWS = instances$LWS.get(config$LWS);

  if (dompurify$LWS === undefined) {
    dompurify$LWS = createDOMPurify__default$LWS["default"]();
    dompurify$LWS.setConfig(config$LWS);

    for (const hookName$LWS in hooksRegistry$LWS) {
      // istanbul ignore else
      if (hooksRegistry$LWS) {
        dompurify$LWS.addHook(hookName$LWS, hooksRegistry$LWS[hookName$LWS]);
      }
    }

    instances$LWS.set(config$LWS, dompurify$LWS);
  }

  return dompurify$LWS;
}

const SANITIZE_ATTRIBUTES_LIST$LWS = shared$LWS.toSafeArray(['href', 'xlink:href']);
const SANITIZER_HOOKS_REGISTRY$LWS = {
  __proto__: null,
  uponSanitizeAttribute: sanitizeHrefAttributeHook$LWS
};
const htmlTemplate$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoCreateElement, document, ['template']);
const normalizerAnchor$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoCreateElement, document, ['a']); // Queue for managing pending xhr requests.

const queue$LWS = shared$LWS.toSafeSet(new shared$LWS.SetCtor()); // A regexp to find all non lowercase alphanumeric.

const urlReplacerRegExp$LWS = /[^a-z0-9]+/gi;

function checkExistingAndDequeue$LWS(container$LWS, normalizedHref$LWS) {
  if (queue$LWS.has(normalizedHref$LWS.normalizedUrl)) {
    // Wait for request to finish, then update content.
    const interval$LWS = sharedDom$LWS.WindowSetInterval(() => {
      // istanbul ignore else
      if (!queue$LWS.has(normalizedHref$LWS.normalizedUrl)) {
        updater$LWS(container$LWS, normalizedHref$LWS);
        sharedDom$LWS.WindowClearInterval(interval$LWS);
      }
    }, 50);
  } else {
    updater$LWS(container$LWS, normalizedHref$LWS);
  }
}

function createUrlContainer$LWS(url$LWS) {
  const container$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoCreateElement, document, ['div']);
  shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoSetAttribute, container$LWS, ['style', 'display:none']);
  shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoSetAttribute, container$LWS, ['id', url$LWS]);
  const body$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoBodyGetter, document, []);
  shared$LWS.ReflectApply(sharedDom$LWS.NodeProtoAppendChild, body$LWS, [container$LWS]);
  return container$LWS;
}

function fetchAndSanitize$LWS(normalizedHref$LWS) {
  // This is the first time we see this href.
  const container$LWS = createUrlContainer$LWS(normalizedHref$LWS.normalizedUrl); // Put the URL we're fetching in a queue.

  queue$LWS.add(normalizedHref$LWS.normalizedUrl); // Initiate an XHR to fetch the resource.

  const xhr$LWS = new sharedDom$LWS.XhrCtor();
  shared$LWS.ReflectApply(sharedDom$LWS.EventTargetProtoAddEventListener, xhr$LWS, ['load', () => {
    const status$LWS = shared$LWS.ReflectApply(sharedDom$LWS.XhrProtoStatusGetter, xhr$LWS, []); // istanbul ignore next: the following is well tested via integration-karma

    if (status$LWS === 200) {
      // Retrieved content should be sanitized immediately.
      const responseText$LWS = shared$LWS.ReflectApply(sharedDom$LWS.XhrProtoResponseTextGetter, xhr$LWS, []);
      const fragment$LWS = sanitizeSvgTextReturnDOM$LWS(responseText$LWS); // Look for the container again in case other requests have finished
      // earlier for the same URL.

      if (normalizedHref$LWS.requestedFragment) {
        const el$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentFragmentProtoGetElementById, fragment$LWS, [normalizedHref$LWS.requestedFragment]);

        if (el$LWS) {
          shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoSetAttribute, el$LWS, ['id', normalizedHref$LWS.normalizedFragment]);
        }
      }

      shared$LWS.ReflectApply(sharedDom$LWS.NodeProtoAppendChild, container$LWS, [fragment$LWS]);
      queue$LWS.delete(normalizedHref$LWS.normalizedUrl);
    }
  }]);
  shared$LWS.ReflectApply(sharedDom$LWS.XhrProtoOpen, xhr$LWS, ['GET', normalizedHref$LWS.requestedUrl]);
  shared$LWS.ReflectApply(sharedDom$LWS.XhrProtoSend, xhr$LWS, []);
}

function parseHref$LWS(url$LWS) {
  shared$LWS.ReflectApply(sharedDom$LWS.HTMLAnchorElementProtoHrefSetter, normalizerAnchor$LWS, [url$LWS]);
  const href$LWS = shared$LWS.ReflectApply(sharedDom$LWS.HTMLAnchorElementProtoHrefGetter, normalizerAnchor$LWS, []);
  const protocol$LWS = shared$LWS.ReflectApply(sharedDom$LWS.HTMLAnchorElementProtoProtocolGetter, normalizerAnchor$LWS, []);
  const {
    0: requestedUrl$LWS,
    1: requestedFragment$LWS
  } = shared$LWS.ReflectApply(shared$LWS.StringProtoSplit, href$LWS, ['#']); // RegExp.prototype[Symbol.replace] resets the lastIndex of global regexp to 0.
  // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace

  const loweredUrl$LWS = shared$LWS.ReflectApply(shared$LWS.StringProtoToLowerCase, requestedUrl$LWS, []);
  const normalizedUrl$LWS = shared$LWS.ReflectApply(shared$LWS.StringProtoReplace, loweredUrl$LWS, [urlReplacerRegExp$LWS, '']);
  const normalizedFragment$LWS = requestedFragment$LWS ? `${normalizedUrl$LWS}_${shared$LWS.ReflectApply(shared$LWS.StringProtoReplace, requestedFragment$LWS, [urlReplacerRegExp$LWS, ''])}` : '';
  return {
    normalizedFragment: normalizedFragment$LWS,
    normalizedUrl: normalizedUrl$LWS,
    protocol: protocol$LWS,
    requestedFragment: requestedFragment$LWS,
    requestedUrl: requestedUrl$LWS
  };
}

function updater$LWS(container$LWS, normalizedHref$LWS) {
  const {
    normalizedFragment: normalizedFragment$LWS,
    requestedFragment: requestedFragment$LWS
  } = normalizedHref$LWS;
  let el$LWS = shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoQuerySelector, container$LWS, [`#${normalizedFragment$LWS}`]); // istanbul ignore else

  if (el$LWS === null) {
    try {
      el$LWS = shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoQuerySelector, container$LWS, [`#${requestedFragment$LWS}`]);
      shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoSetAttribute, el$LWS, ['id', normalizedFragment$LWS]);
    } catch (_unused$LWS) {// Catch all malformed CSS3 selectors.
      // getElementById not available on Node.
      // Cannot use document.getElementById because multiple containers
      // may have the same ids for SVG elements.
    }
  }
}

function blobSanitizer$LWS() {
  return sanitizer$LWS(STRING_BLOB_HTML$LWS, SANITIZER_HOOKS_REGISTRY$LWS);
}

function svgSanitizer$LWS() {
  return sanitizer$LWS(NODE_SVG$LWS, SANITIZER_HOOKS_REGISTRY$LWS);
}

function sanitize$LWS(dirty$LWS) {
  shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoInnerHTMLSetter, htmlTemplate$LWS, [dirty$LWS]);
  const content$LWS = shared$LWS.ReflectApply(sharedDom$LWS.HTMLTemplateElementProtoContentGetter, htmlTemplate$LWS, []);
  const sanitizer$1$LWS = sanitizer$LWS(NODE_ALL_IN_PLACE$LWS, SANITIZER_HOOKS_REGISTRY$LWS);
  sanitizer$1$LWS.sanitize(content$LWS);
  return shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoInnerHTMLGetter, htmlTemplate$LWS, []);
}

function sanitizeDocument$LWS(doc$LWS) {
  const docEl$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoDocumentElementGetter, doc$LWS, []);
  const content$LWS = shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoOuterHTMLGetter, docEl$LWS, []);
  const docImpl$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoImplementationGetter, doc$LWS, []);
  const newDoc$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DOMImplementationProtoCreateDocument, docImpl$LWS, [sharedDom$LWS.NAMESPACE_XHTML, 'html']);
  const newDocEl$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoDocumentElementGetter, newDoc$LWS, []);
  shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoInnerHTMLSetter, newDocEl$LWS, [sanitize$LWS(content$LWS)]);
  return newDoc$LWS;
} // Sanitize a URL representing a SVG href attribute value.


function sanitizeHrefAttributeHook$LWS(node$LWS, data$LWS, _config$LWS) {
  const {
    attrValue: attrValue$LWS,
    attrName: attrName$LWS
  } = data$LWS;

  if (attrValue$LWS && shared$LWS.ReflectApply(shared$LWS.StringProtoToUpperCase, shared$LWS.ReflectApply(sharedDom$LWS.NodeProtoNodeNameGetter, node$LWS, []), []) === 'USE' && SANITIZE_ATTRIBUTES_LIST$LWS.includes(attrName$LWS)) {
    data$LWS.attrValue = sanitizeSvgHref$LWS(attrValue$LWS);
  }

  return data$LWS;
}

function sanitizeSvgHref$LWS(url$LWS) {
  const urlAsString$LWS = shared$LWS.toString(url$LWS);

  if (shared$LWS.ReflectApply(shared$LWS.StringProtoStartsWith, urlAsString$LWS, ['#'])) {
    return url$LWS;
  }

  const normalizedHref$LWS = parseHref$LWS(urlAsString$LWS); // Sanitize only for supported URL_SCHEMES_LIST.

  if (sharedUrl$LWS.URL_SCHEMES_LIST.includes(normalizedHref$LWS.protocol)) {
    const container$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoGetElementById, document, [normalizedHref$LWS.normalizedUrl]); // Have we sanitized this URL already?

    if (container$LWS && normalizedHref$LWS.normalizedFragment) {
      checkExistingAndDequeue$LWS(container$LWS, normalizedHref$LWS);
    } else if (!container$LWS) {
      fetchAndSanitize$LWS(normalizedHref$LWS);
    } // If this has been in the form of http://my-url/file.svg#fragment we
    // return the normalized fragment otherwise we return the normalized URL.


    return normalizedHref$LWS.requestedFragment ? `#${normalizedHref$LWS.normalizedFragment}` : `#${normalizedHref$LWS.normalizedUrl}`;
  }

  return url$LWS;
}

function createSvgContainer$LWS(ownerDoc$LWS) {
  return shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoCreateElementNS, ownerDoc$LWS, [sharedDom$LWS.NAMESPACE_SVG, 'svg']);
}

function sanitizeSvgInnerHtml$LWS(stringOrSvg$LWS, dirty$LWS = '') {
  const ownerDoc$LWS = typeof stringOrSvg$LWS === 'string' ? document : shared$LWS.ReflectApply(sharedDom$LWS.NodeProtoOwnerDocumentGetter, stringOrSvg$LWS, []);
  let container$LWS;

  if (typeof stringOrSvg$LWS === 'string') {
    dirty$LWS = stringOrSvg$LWS;
    container$LWS = createSvgContainer$LWS(ownerDoc$LWS);
  } else {
    const closestSvg$LWS = shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoClosest, stringOrSvg$LWS, ['svg']);
    container$LWS = closestSvg$LWS ? shared$LWS.ReflectApply(sharedDom$LWS.NodeProtoCloneNode, closestSvg$LWS, [false]) : createSvgContainer$LWS(ownerDoc$LWS);
  }

  const comment$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoCreateComment, ownerDoc$LWS, ['']);
  shared$LWS.ReflectApply(sharedDom$LWS.NodeProtoAppendChild, container$LWS, [comment$LWS]);
  const outerHTML$LWS = shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoOuterHTMLGetter, container$LWS, []);
  const replacedOuterHTML$LWS = shared$LWS.ReflectApply(shared$LWS.StringProtoReplace, outerHTML$LWS, ['<!---->', dirty$LWS]);
  const fragment$LWS = sanitizeSvgTextReturnDOM$LWS(replacedOuterHTML$LWS);
  const firstChild$LWS = shared$LWS.ReflectApply(sharedDom$LWS.NodeProtoFirstChildGetter, fragment$LWS, []);
  return shared$LWS.ReflectApply(sharedDom$LWS.ElementProtoInnerHTMLGetter, firstChild$LWS, []);
}

function sanitizeSvgTextReturnDOM$LWS(dirty$LWS) {
  const sanitizer$LWS = svgSanitizer$LWS();
  return sanitizer$LWS.sanitize(dirty$LWS);
}

exports.blobSanitizer = blobSanitizer$LWS;
exports.sanitize = sanitize$LWS;
exports.sanitizeDocument = sanitizeDocument$LWS;
exports.sanitizeHrefAttributeHook = sanitizeHrefAttributeHook$LWS;
exports.sanitizeSvgHref = sanitizeSvgHref$LWS;
exports.sanitizeSvgInnerHtml = sanitizeSvgInnerHtml$LWS;
exports.sanitizeSvgTextReturnDOM = sanitizeSvgTextReturnDOM$LWS;
exports.sanitizer = sanitizer$LWS;
exports.svgSanitizer = svgSanitizer$LWS;
/*! version: 0.17.9 */
