'use strict';

var nearMembraneBase = require('@locker/near-membrane-base');

var nearMembraneShared = require('@locker/near-membrane-shared');

var node_vm = require('node:vm');

const globalObjectToBlueCreateHooksCallbackMap = nearMembraneShared.toSafeWeakMap(new nearMembraneShared.WeakMapCtor());
let defaultGlobalOwnKeys = null;

function createVirtualEnvironment(globalObject, options) {
  if (typeof globalObject !== 'object' || globalObject === null) {
    throw new nearMembraneShared.TypeErrorCtor('Missing global object virtualization target.');
  }

  const {
    distortionCallback,
    endowments,
    globalObjectShape,
    instrumentation,
    liveTargetCallback
  } = nearMembraneShared.ObjectAssign({
    __proto__: null
  }, options);
  let blueConnector = globalObjectToBlueCreateHooksCallbackMap.get(globalObject);

  if (blueConnector === undefined) {
    blueConnector = nearMembraneBase.createBlueConnector(globalObject);
    globalObjectToBlueCreateHooksCallbackMap.set(globalObject, blueConnector);
  }

  const redGlobalObject = node_vm.runInNewContext('globalThis');
  const env = new nearMembraneBase.VirtualEnvironment({
    blueConnector,
    distortionCallback,
    instrumentation,
    liveTargetCallback,
    redConnector: nearMembraneBase.createRedConnector(redGlobalObject.eval)
  });
  nearMembraneBase.linkIntrinsics(env, globalObject);
  const shouldUseDefaultGlobalOwnKeys = typeof globalObjectShape !== 'object' || globalObjectShape === null;

  if (shouldUseDefaultGlobalOwnKeys && defaultGlobalOwnKeys === null) {
    defaultGlobalOwnKeys = nearMembraneBase.getFilteredGlobalOwnKeys(redGlobalObject);
  }

  env.lazyRemapProperties(globalObject, shouldUseDefaultGlobalOwnKeys ? defaultGlobalOwnKeys : nearMembraneBase.getFilteredGlobalOwnKeys(globalObjectShape));

  if (endowments) {
    const filteredEndowments = {};
    nearMembraneBase.assignFilteredGlobalDescriptorsFromPropertyDescriptorMap(filteredEndowments, endowments);
    env.remapProperties(globalObject, filteredEndowments);
  }

  return env;
}

module.exports = createVirtualEnvironment;
