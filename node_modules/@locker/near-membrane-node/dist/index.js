import { createBlueConnector, VirtualEnvironment, createRedConnector, linkIntrinsics, getFilteredGlobalOwnKeys, assignFilteredGlobalDescriptorsFromPropertyDescriptorMap } from '@locker/near-membrane-base';
import { toSafeWeakMap, WeakMapCtor, TypeErrorCtor, ObjectAssign } from '@locker/near-membrane-shared';
import { runInNewContext } from 'node:vm';
const globalObjectToBlueCreateHooksCallbackMap = toSafeWeakMap(new WeakMapCtor());
let defaultGlobalOwnKeys = null;

function createVirtualEnvironment(globalObject, options) {
  if (typeof globalObject !== 'object' || globalObject === null) {
    throw new TypeErrorCtor('Missing global object virtualization target.');
  }

  const {
    distortionCallback,
    endowments,
    globalObjectShape,
    instrumentation,
    liveTargetCallback
  } = ObjectAssign({
    __proto__: null
  }, options);
  let blueConnector = globalObjectToBlueCreateHooksCallbackMap.get(globalObject);

  if (blueConnector === undefined) {
    blueConnector = createBlueConnector(globalObject);
    globalObjectToBlueCreateHooksCallbackMap.set(globalObject, blueConnector);
  }

  const redGlobalObject = runInNewContext('globalThis');
  const env = new VirtualEnvironment({
    blueConnector,
    distortionCallback,
    instrumentation,
    liveTargetCallback,
    redConnector: createRedConnector(redGlobalObject.eval)
  });
  linkIntrinsics(env, globalObject);
  const shouldUseDefaultGlobalOwnKeys = typeof globalObjectShape !== 'object' || globalObjectShape === null;

  if (shouldUseDefaultGlobalOwnKeys && defaultGlobalOwnKeys === null) {
    defaultGlobalOwnKeys = getFilteredGlobalOwnKeys(redGlobalObject);
  }

  env.lazyRemapProperties(globalObject, shouldUseDefaultGlobalOwnKeys ? defaultGlobalOwnKeys : getFilteredGlobalOwnKeys(globalObjectShape));

  if (endowments) {
    const filteredEndowments = {};
    assignFilteredGlobalDescriptorsFromPropertyDescriptorMap(filteredEndowments, endowments);
    env.remapProperties(globalObject, filteredEndowments);
  }

  return env;
}

export { createVirtualEnvironment as default };
