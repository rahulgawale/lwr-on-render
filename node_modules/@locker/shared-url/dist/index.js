/*!
 * Copyright (C) 2019 salesforce.com, inc.
 */
import { ReflectApply as ReflectApply$LWS, RegExpProtoTest as RegExpProtoTest$LWS, StringProtoStartsWith as StringProtoStartsWith$LWS, toSafeArray as toSafeArray$LWS, StringProtoToLowerCase as StringProtoToLowerCase$LWS, StringProtoEndsWith as StringProtoEndsWith$LWS, StringProtoIncludes as StringProtoIncludes$LWS, StringProtoReplace as StringProtoReplace$LWS } from '@locker/shared';
import { DocumentProtoCreateElement as DocumentProtoCreateElement$LWS, HTMLAnchorElementProtoHrefSetter as HTMLAnchorElementProtoHrefSetter$LWS, HTMLAnchorElementProtoProtocolGetter as HTMLAnchorElementProtoProtocolGetter$LWS, HTMLAnchorElementProtoHrefGetter as HTMLAnchorElementProtoHrefGetter$LWS, HTMLAnchorElementProtoHostnameGetter as HTMLAnchorElementProtoHostnameGetter$LWS, WindowDecodeURIComponent as WindowDecodeURIComponent$LWS, HTMLAnchorElementProtoPathnameGetter as HTMLAnchorElementProtoPathnameGetter$LWS } from '@locker/shared-dom';
const ALLOWED_MIME_TYPES$LWS = ['application/octet-stream', 'application/json', 'application/pdf', 'video/', 'audio/', 'image/', 'font/', 'text/plain', 'text/markdown', 'application/zip', 'application/x-bzip', 'application/x-rar-compressed', 'application/x-tar']; // Allow only alphanumeric, '-', '+', and '.' characters.

const validMimeTypeRegExp$LWS = /^[a-z]+\/[a-z0-9.+-]+$/;

function isMIMETypeAllowed$LWS(mimeType$LWS) {
  // avoid MIME types which try to escape using special characters
  // Reason: W-4896359
  if (ReflectApply$LWS(RegExpProtoTest$LWS, validMimeTypeRegExp$LWS, [mimeType$LWS])) {
    for (let i$LWS = 0, {
      length: length$LWS
    } = ALLOWED_MIME_TYPES$LWS; i$LWS < length$LWS; i$LWS += 1) {
      if (ReflectApply$LWS(StringProtoStartsWith$LWS, mimeType$LWS, [ALLOWED_MIME_TYPES$LWS[i$LWS]])) {
        return true;
      }
    }
  }

  return false;
}

const DISALLOWED_ENDPOINTS_LIST$LWS = ['/aura', '/webruntime'];
const newlinesAndTabsRegExp$LWS = /[\u2028\u2029\n\r\t]/g;
const TRUSTED_DOMAINS_REG_EXP$LWS = /\.(force|salesforce|visualforce|documentforce|my\.site|salesforce-sites)\.com$/;
const URL_SCHEMES_LIST$LWS = toSafeArray$LWS(['http:', 'https:']);
const normalizerAnchor$LWS = ReflectApply$LWS(DocumentProtoCreateElement$LWS, document, ['a']); // @TODO W-7302311 Make paths and domains configurable

function isValidURL$LWS(parsedURL$LWS) {
  const loweredPathname$LWS = ReflectApply$LWS(StringProtoToLowerCase$LWS, parsedURL$LWS.pathname, []);

  for (let i$LWS = 0, {
    length: length$LWS
  } = DISALLOWED_ENDPOINTS_LIST$LWS; i$LWS < length$LWS; i$LWS += 1) {
    if (ReflectApply$LWS(StringProtoEndsWith$LWS, loweredPathname$LWS, [DISALLOWED_ENDPOINTS_LIST$LWS[i$LWS]]) || ReflectApply$LWS(StringProtoIncludes$LWS, loweredPathname$LWS, [`${DISALLOWED_ENDPOINTS_LIST$LWS[i$LWS]}/`])) {
      return false;
    }
  }

  return true;
}

function isValidURLScheme$LWS(url$LWS) {
  ReflectApply$LWS(HTMLAnchorElementProtoHrefSetter$LWS, normalizerAnchor$LWS, [url$LWS]);
  return URL_SCHEMES_LIST$LWS.includes(ReflectApply$LWS(HTMLAnchorElementProtoProtocolGetter$LWS, normalizerAnchor$LWS, []));
}

function parseURL$LWS(url$LWS) {
  ReflectApply$LWS(HTMLAnchorElementProtoHrefSetter$LWS, normalizerAnchor$LWS, [sanitizeURLString$LWS(url$LWS)]);
  return {
    normalizedURL: ReflectApply$LWS(HTMLAnchorElementProtoHrefGetter$LWS, normalizerAnchor$LWS, []),
    hostname: ReflectApply$LWS(HTMLAnchorElementProtoHostnameGetter$LWS, normalizerAnchor$LWS, []),
    pathname: WindowDecodeURIComponent$LWS(ReflectApply$LWS(HTMLAnchorElementProtoPathnameGetter$LWS, normalizerAnchor$LWS, []))
  };
}

function sanitizeURLForElement$LWS(url$LWS) {
  ReflectApply$LWS(HTMLAnchorElementProtoHrefSetter$LWS, normalizerAnchor$LWS, [url$LWS]);
  return sanitizeURLString$LWS(ReflectApply$LWS(HTMLAnchorElementProtoHrefGetter$LWS, normalizerAnchor$LWS, []));
}

function sanitizeURLString$LWS(urlString$LWS) {
  return urlString$LWS === '' ? urlString$LWS : ReflectApply$LWS(StringProtoReplace$LWS, urlString$LWS, [newlinesAndTabsRegExp$LWS, '']);
}

export { TRUSTED_DOMAINS_REG_EXP$LWS as TRUSTED_DOMAINS_REG_EXP, URL_SCHEMES_LIST$LWS as URL_SCHEMES_LIST, isMIMETypeAllowed$LWS as isMIMETypeAllowed, isValidURL$LWS as isValidURL, isValidURLScheme$LWS as isValidURLScheme, normalizerAnchor$LWS as normalizerAnchor, parseURL$LWS as parseURL, sanitizeURLForElement$LWS as sanitizeURLForElement, sanitizeURLString$LWS as sanitizeURLString };
/*! version: 0.17.9 */
