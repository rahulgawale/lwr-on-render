import { AssetDefinition, AssetIdentifier, AssetProvider, AssetRegistry, AssetSource, AssetTransformPlugin, AssetUri, LwrAppEmitter, LwrAppObserver, NormalizedLwrGlobalConfig, PublicAssetRegistry, ResourcePaths, RuntimeEnvironment } from '@lwrjs/types';
interface RegistryContext {
    appObserver: LwrAppObserver;
    appEmitter: LwrAppEmitter;
    runtimeEnvironment: RuntimeEnvironment;
    assetTransformers: AssetTransformPlugin[];
}
export declare class LwrAssetRegistry implements AssetRegistry {
    name: string;
    providers: AssetProvider[];
    resourcePaths: ResourcePaths;
    assetPathMap: Map<string, string>;
    cacheDir: string;
    assetTransformers: AssetTransformPlugin[];
    _memoizeResolveUri: Function;
    constructor(context: RegistryContext, lwrGlobalConfig: NormalizedLwrGlobalConfig);
    delegateGetAsset(assetFilePath: string): Promise<AssetSource>;
    addAssetProviders(providers: AssetProvider[]): void;
    getAsset<T extends AssetIdentifier, R extends RuntimeEnvironment>(assetId: T, runtimeEnvironment: R, includeMetadata?: boolean): Promise<AssetDefinition>;
    private getHashedAssetPath;
    getAssetDefinition(assetSource: AssetSource, runtimeEnvironment: RuntimeEnvironment): Promise<AssetDefinition>;
    resolveAssetUri<M extends AssetIdentifier, R extends RuntimeEnvironment>(assetId: M, runtimeEnvironment: R): Promise<AssetUri>;
    private resolveAssetUriWithoutLinking;
    getPublicApi(): PublicAssetRegistry;
}
export {};
//# sourceMappingURL=index.d.ts.map