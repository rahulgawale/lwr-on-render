var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/asset-registry/src/asset-linker.ts
__markAsModule(exports);
__export(exports, {
  getUriFromAsset: () => getUriFromAsset,
  linkAsset: () => linkAsset
});
var import_path = __toModule(require("path"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
function getUriFromAsset(asset, runtimeEnvironment) {
  const {apiVersion, immutableAssets, basePath} = runtimeEnvironment;
  const {type, ownHash, uri: assetUri, entry} = asset;
  const immutable = immutableAssets ? "immutable/" : "";
  const hash = immutableAssets ? ownHash : "latest";
  const uri = (0, import_path.join)(`${basePath}/${apiVersion}/${type}/${immutable}s/${hash}`, encodeURI(assetUri));
  return {
    uri,
    entry,
    immutable: immutableAssets
  };
}
async function linkAsset(source, assetSource, runtimeEnvironment, resolveUri) {
  const assetReferences = assetSource.metadata?.assetReferences;
  if (Buffer.isBuffer(source) || !assetReferences || assetReferences.length === 0) {
    return source;
  }
  const codeStringBuilder = (0, import_shared_utils.createStringBuilder)(source);
  const importer = assetSource.entry;
  for (const assetRef of assetReferences) {
    const {
      url,
      relative,
      location: {startOffset, endOffset}
    } = assetRef;
    if (relative) {
      try {
        assetRef.override = await resolveUri({specifier: url, importer}, runtimeEnvironment);
        const overrideUrl = assetRef.override?.uri;
        codeStringBuilder.overwrite(startOffset, endOffset, overrideUrl || url);
      } catch (err) {
        import_shared_utils.logger.warn(`Failed to resolve reference '${url}' in asset '${importer}'`);
      }
    }
  }
  return codeStringBuilder.toString();
}
