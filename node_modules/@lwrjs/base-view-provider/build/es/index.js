import { moduleSpecifierToKebabCase } from '@lwrjs/shared-utils';
import { render } from '@lwrjs/base-template-engine';
import { defaultHtmlLayout } from './template-layouts.js';
export default class BaseViewProvider {
    constructor() {
        this.name = 'lwr-base-view-provider';
    }
    async getViewSource(viewId) {
        // Default layout
        let name = 'root-layout';
        let originalSource = defaultHtmlLayout;
        // Default content with root component
        if (viewId.rootComponent) {
            name = 'root-component';
            const customElement = moduleSpecifierToKebabCase(viewId.rootComponent);
            originalSource = `<${customElement}></${customElement}>`;
        }
        return {
            name,
            slug: name,
            ownHash: '00',
            originalSource,
            filePath: '<virtual>',
        };
    }
    // -- Public API --------------------------------------------------------------------
    async initialize() {
        return;
    }
    async getView(viewId) {
        const { rootComponent } = viewId;
        // This view provider supports the default layout and content with root components
        const viewSource = await this.getViewSource(viewId);
        return {
            ...viewSource,
            viewId,
            layoutTemplate: '/',
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            render: async (context) => {
                return {
                    renderedView: render(viewSource.originalSource, context),
                    metadata: {
                        customElements: rootComponent ? [{ tagName: rootComponent }] : [],
                        assetReferences: [],
                    },
                    options: {
                        skipMetadataCollection: false,
                    },
                };
            },
        };
    }
}
//# sourceMappingURL=index.js.map