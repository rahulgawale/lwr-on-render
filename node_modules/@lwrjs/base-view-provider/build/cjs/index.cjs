var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/base-view-provider/src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_base_template_engine = __toModule(require("@lwrjs/base-template-engine"));
var import_template_layouts = __toModule(require("./template-layouts.cjs"));
var BaseViewProvider = class {
  constructor() {
    this.name = "lwr-base-view-provider";
  }
  async getViewSource(viewId) {
    let name = "root-layout";
    let originalSource = import_template_layouts.defaultHtmlLayout;
    if (viewId.rootComponent) {
      name = "root-component";
      const customElement = (0, import_shared_utils.moduleSpecifierToKebabCase)(viewId.rootComponent);
      originalSource = `<${customElement}></${customElement}>`;
    }
    return {
      name,
      slug: name,
      ownHash: "00",
      originalSource,
      filePath: "<virtual>"
    };
  }
  async initialize() {
    return;
  }
  async getView(viewId) {
    const {rootComponent} = viewId;
    const viewSource = await this.getViewSource(viewId);
    return {
      ...viewSource,
      viewId,
      layoutTemplate: "/",
      render: async (context) => {
        return {
          renderedView: (0, import_base_template_engine.render)(viewSource.originalSource, context),
          metadata: {
            customElements: rootComponent ? [{tagName: rootComponent}] : [],
            assetReferences: []
          },
          options: {
            skipMetadataCollection: false
          }
        };
      }
    };
  }
};
var src_default = BaseViewProvider;
