var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/loader/src/modules/lwr/esmLoader/esmLoader.ts
__markAsModule(exports);
__export(exports, {
  init: () => init,
  load: () => load
});
var import_importResolver = __toModule(require("./importResolver"));
var import_importResolverLegacy = __toModule(require("./importResolverLegacy"));
var esmLoaderConfig;
var resolver;
var resolverLegacy;
function init(config) {
  esmLoaderConfig = config;
  const {imports, index, importMappings, endpoints} = config;
  resolver = new import_importResolver.default({imports, index, endpoints, importMappings});
  resolverLegacy = new import_importResolverLegacy.default(importMappings);
}
async function load(specifier, importer) {
  const uri = await resolveUrl(specifier, importer);
  return Promise.resolve().then(() => __toModule(require(uri)));
}
async function resolveUrl(specifier, importer) {
  let uri;
  if (!resolver || !resolverLegacy) {
    throw new Error("The ESM Loader was not initialized");
  }
  uri = await resolver.resolve(specifier);
  if (uri) {
    return uri;
  }
  uri = resolverLegacy.legacyResolve(specifier);
  if (uri) {
    return uri;
  }
  uri = specifier;
  if (uri.indexOf("://") < 0 && !uri.startsWith("/")) {
    const {endpoints} = esmLoaderConfig;
    if (endpoints && endpoints.uris && endpoints.uris.module) {
      uri = endpoints.uris.module + encodeURIComponent(specifier);
      if (importer) {
        uri += `?importer=${encodeURIComponent(importer)}`;
      }
      if (endpoints.modifiers) {
        uri += Object.entries(endpoints.modifiers).reduce((q, [k, v]) => q += `${k}=${v}&`, importer ? "&" : "?");
      }
    }
  }
  return uri;
}
