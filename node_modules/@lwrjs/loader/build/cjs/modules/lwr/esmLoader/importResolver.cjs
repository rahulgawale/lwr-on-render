var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/loader/src/modules/lwr/esmLoader/importResolver.ts
__markAsModule(exports);
__export(exports, {
  default: () => importResolver_default
});
var ImportResolver = class {
  constructor(config) {
    this.importURICache = new Map();
    this.modifiers = "";
    this.normalizeMetadata(config);
    this.mappingEndpoint = config?.importMappings ? void 0 : config?.endpoints?.uris.mapping;
    if (config?.endpoints?.modifiers) {
      this.modifiers = Object.entries(config.endpoints.modifiers).reduce((q, [k, v]) => q += `${k}=${v}&`, "?");
    }
  }
  normalizeMetadata(importMetada) {
    if (importMetada && importMetada.imports) {
      for (const [uri, value] of Object.entries(importMetada.imports)) {
        if (uri && value) {
          const specifiers = Array.isArray(value) ? value : [];
          specifiers.forEach((specifier) => {
            this.importURICache.set(specifier, uri);
          });
        }
      }
    }
  }
  async fetchMappings(specifier) {
    const mappingUri = `${this.mappingEndpoint}${encodeURIComponent(specifier)}${this.modifiers}`;
    const res = await globalThis.fetch(mappingUri);
    if (res.ok) {
      const mappings = await res.json();
      this.normalizeMetadata(mappings);
    }
  }
  async resolve(specifier) {
    let uri = this.importURICache.get(specifier);
    if (!uri && this.mappingEndpoint) {
      await this.fetchMappings(specifier);
      uri = this.importURICache.get(specifier);
    }
    return uri;
  }
};
var importResolver_default = ImportResolver;
