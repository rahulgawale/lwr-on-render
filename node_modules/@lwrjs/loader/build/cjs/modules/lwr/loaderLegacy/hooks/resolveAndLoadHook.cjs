var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/loader/src/modules/lwr/loaderLegacy/hooks/resolveAndLoadHook.ts
__markAsModule(exports);
__export(exports, {
  evaluateLoadHook: () => evaluateLoadHook,
  evaluateLoadHookResponse: () => evaluateLoadHookResponse,
  isCustomResponse: () => isCustomResponse,
  isFetchResponse: () => isFetchResponse,
  isResponseAPromise: () => isResponseAPromise
});
var import_messages = __toModule(require("../errors/messages"));
var import_constants = __toModule(require("../constants/constants"));
var import_dom = __toModule(require("../utils/dom"));
var lastWindowError;
if (import_dom.hasDocument) {
  globalThis.addEventListener("error", (evt) => {
    lastWindowError = evt.error;
  });
}
if (!import_dom.hasSetTimeout && import_dom.hasConsole) {
  console.warn("setTimeout API is not available, watchdog timer on load hook will not be set");
}
function isCustomResponse(response) {
  return Object.prototype.hasOwnProperty.call(response, "data") && !Object.prototype.hasOwnProperty.call(response, "blob");
}
function isFetchResponse(response) {
  return typeof response.blob === "function";
}
function isResponseAPromise(response) {
  return !!(response && response.then);
}
async function evaluateLoadHookResponse(response, id) {
  return Promise.resolve().then(async () => {
    if (!response.status) {
      throw new import_messages.LoaderError(import_messages.INVALID_LOADER_SERVICE_RESPONSE);
    }
    if (response.status !== 200) {
      throw new import_messages.LoaderError(import_messages.HTTP_FAIL_LOAD, [id, `${response.status}`]);
    }
    const isResponse = isFetchResponse(response);
    let code;
    if (isCustomResponse(response)) {
      code = response.data;
    } else if (isResponse) {
      code = await response.text();
    } else {
      throw new import_messages.LoaderError(import_messages.INVALID_LOADER_SERVICE_RESPONSE);
    }
    if (!code) {
      throw new import_messages.LoaderError(import_messages.FAIL_LOAD, [id]);
    }
    code = `${code}
//# sourceURL=${id}`;
    try {
      eval(code);
    } catch (e) {
      throw new import_messages.LoaderError(import_messages.FAIL_LOAD, [id]);
    }
    if (lastWindowError) {
      throw new import_messages.LoaderError(import_messages.FAIL_LOAD, [id]);
    }
    return true;
  });
}
async function evaluateLoadHook(id, hookPromise) {
  if (!import_dom.hasSetTimeout) {
    return hookPromise;
  }
  return new Promise((resolve, reject) => {
    const timer = setTimeout(() => {
      reject(new import_messages.LoaderError(import_messages.MODULE_LOAD_TIMEOUT, [id]));
    }, import_constants.MODULE_LOAD_TIMEOUT_TIMER);
    hookPromise.then((response) => {
      resolve(response);
    }).catch(() => {
      reject(new import_messages.LoaderError(import_messages.FAIL_HOOK_LOAD, [id]));
    }).finally(() => {
      clearTimeout(timer);
    });
  });
}
