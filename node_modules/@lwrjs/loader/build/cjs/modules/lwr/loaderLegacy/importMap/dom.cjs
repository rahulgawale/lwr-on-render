var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/loader/src/modules/lwr/loaderLegacy/importMap/dom.ts
__markAsModule(exports);
__export(exports, {
  IMPORTMAP_SCRIPT_TYPE: () => IMPORTMAP_SCRIPT_TYPE,
  evaluateImportMaps: () => evaluateImportMaps
});
var import_importMap = __toModule(require("./importMap"));
var import_url = __toModule(require("../utils/url"));
var import_dom = __toModule(require("../utils/dom"));
var import_messages = __toModule(require("../errors/messages"));
var IMPORTMAP_SCRIPT_TYPE = "lwr-importmap";
function iterateDocumentImportMaps(callBack, extraSelector) {
  const nodeList = document.querySelectorAll(`script[type="${IMPORTMAP_SCRIPT_TYPE}"]` + extraSelector);
  const filtered = Array.from(nodeList).filter((node) => {
    if (node.src) {
      if (import_dom.hasConsole)
        console.warn("LWR does not support import maps from script src");
      return false;
    }
    return true;
  });
  Array.prototype.forEach.call(filtered, callBack);
}
async function getImportMapFromScript(script) {
  return Promise.resolve(script.innerHTML);
}
async function evaluateImportMaps(baseUrl) {
  let importMap = {imports: {}, scopes: {}};
  let importMapPromise = Promise.resolve(importMap);
  if (import_dom.hasDocument) {
    if (!baseUrl) {
      baseUrl = (0, import_url.getBaseUrl)();
    }
    if (!baseUrl) {
      throw new import_messages.LoaderError(import_messages.NO_BASE_URL);
    }
    iterateDocumentImportMaps((script) => {
      importMapPromise = importMapPromise.then(() => {
        return getImportMapFromScript(script);
      }).then((importMapTxt) => {
        try {
          return JSON.parse(importMapTxt);
        } catch (e) {
          throw new import_messages.LoaderError(import_messages.BAD_IMPORT_MAP);
        }
      }).then((jsonImportMap) => {
        importMap = (0, import_importMap.resolveAndComposeImportMap)(jsonImportMap, script.src || baseUrl, importMap);
        return importMap;
      });
    }, "");
  }
  return importMapPromise;
}
