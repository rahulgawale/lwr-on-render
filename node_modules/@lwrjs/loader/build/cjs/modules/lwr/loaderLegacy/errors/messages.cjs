var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/loader/src/modules/lwr/loaderLegacy/errors/messages.ts
__markAsModule(exports);
__export(exports, {
  BAD_IMPORT_MAP: () => BAD_IMPORT_MAP,
  FAILED_DEP: () => FAILED_DEP,
  FAIL_HOOK_LOAD: () => FAIL_HOOK_LOAD,
  FAIL_INSTANTIATE: () => FAIL_INSTANTIATE,
  FAIL_LOAD: () => FAIL_LOAD,
  HOOK_ALREADY_SET: () => HOOK_ALREADY_SET,
  HTTP_FAIL_LOAD: () => HTTP_FAIL_LOAD,
  INVALID_DEPS: () => INVALID_DEPS,
  INVALID_HOOK: () => INVALID_HOOK,
  INVALID_LOADER_SERVICE_RESPONSE: () => INVALID_LOADER_SERVICE_RESPONSE,
  LoaderError: () => LoaderError,
  MISSING_NAME: () => MISSING_NAME,
  MODULE_ALREADY_LOADED: () => MODULE_ALREADY_LOADED,
  MODULE_LOAD_TIMEOUT: () => MODULE_LOAD_TIMEOUT,
  NO_AMD_REQUIRE: () => NO_AMD_REQUIRE,
  NO_BASE_URL: () => NO_BASE_URL,
  STALE_HOOK_ERROR: () => STALE_HOOK_ERROR,
  UNRESOLVED: () => UNRESOLVED,
  invariant: () => invariant
});
var import_utils = __toModule(require("./utils"));
function generateErrorMessage(errorInfo, args) {
  const message = Array.isArray(args) ? (0, import_utils.templateString)(errorInfo.message, args) : errorInfo.message;
  return `LWR${errorInfo.code}: ${message}`;
}
var LoaderError = class extends Error {
  constructor(errorInfo, errorArgs) {
    super();
    this.message = generateErrorMessage(errorInfo, errorArgs);
  }
};
function invariant(condition, errorInfo) {
  if (!condition) {
    throw new LoaderError(errorInfo);
  }
}
var MISSING_NAME = Object.freeze({
  code: 3e3,
  message: "A module name is required.",
  level: 0
});
var FAIL_INSTANTIATE = Object.freeze({
  code: 3004,
  message: "Failed to instantiate module: {0}",
  level: 0
});
var NO_AMD_REQUIRE = Object.freeze({
  code: 3005,
  message: "AMD require not supported.",
  level: 0
});
var FAILED_DEP = Object.freeze({
  code: 3006,
  level: 0,
  message: "Failed to load dependency: {0}"
});
var INVALID_DEPS = Object.freeze({
  code: 3007,
  message: "Unexpected value received for dependencies argument; expected an array.",
  level: 0
});
var FAIL_LOAD = Object.freeze({
  code: 3008,
  level: 0,
  message: "Error loading {0}"
});
var UNRESOLVED = Object.freeze({
  code: 3009,
  level: 0,
  message: "Unable to resolve bare specifier: {0}"
});
var NO_BASE_URL = Object.freeze({
  code: 3010,
  level: 0,
  message: "baseUrl not set"
});
var HOOK_ALREADY_SET = Object.freeze({
  code: 3011,
  level: 0,
  message: "Cannot set a loader service multiple times"
});
var INVALID_HOOK = Object.freeze({
  code: 3012,
  level: 0,
  message: "Invalid hook received"
});
var INVALID_LOADER_SERVICE_RESPONSE = Object.freeze({
  code: 3013,
  level: 0,
  message: "Invalid response received from hook"
});
var MODULE_LOAD_TIMEOUT = Object.freeze({
  code: 3014,
  level: 0,
  message: "Error loading {0} - timed out"
});
var HTTP_FAIL_LOAD = Object.freeze({
  code: 3015,
  level: 0,
  message: "Error loading {0}, status code {1}"
});
var STALE_HOOK_ERROR = Object.freeze({
  code: 3016,
  level: 0,
  message: "An error occurred handling module conflict"
});
var MODULE_ALREADY_LOADED = Object.freeze({
  code: 3017,
  level: 0,
  message: "Marking module(s) as externally loaded, but they are already loaded: {0}"
});
var FAIL_HOOK_LOAD = Object.freeze({
  code: 3018,
  level: 0,
  message: 'Error loading "{0}" from hook'
});
var BAD_IMPORT_MAP = Object.freeze({
  code: 3011,
  level: 0,
  message: "import map is not valid"
});
