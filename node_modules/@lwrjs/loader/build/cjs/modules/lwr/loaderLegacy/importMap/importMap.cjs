var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/loader/src/modules/lwr/loaderLegacy/importMap/importMap.ts
__markAsModule(exports);
__export(exports, {
  resolveAndComposeImportMap: () => resolveAndComposeImportMap,
  resolveImportMapEntry: () => resolveImportMapEntry
});
var import_url = __toModule(require("../utils/url"));
var import_utils = __toModule(require("./utils"));
function applyPackages(id, packages, defaultUri) {
  const pkgName = (0, import_utils.getMatch)(id, packages);
  if (pkgName) {
    const pkg = packages[pkgName];
    if (pkg === null) {
      return;
    }
    if (id.length > pkgName.length && pkg[pkg.length - 1] !== "/") {
      (0, import_utils.targetWarning)(pkgName, pkg, "should have a trailing '/'");
    } else {
      const isPackage = id.length > pkgName.length && pkg[pkg.length - 1] === "/" && pkg.lastIndexOf(pkgName) === pkg.length - pkgName.length;
      if (isPackage) {
        return pkg.substring(0, pkg.lastIndexOf(pkgName)) + encodeURIComponent(id);
      }
      return pkg + id.slice(pkgName.length);
    }
  } else if (defaultUri) {
    if (!(0, import_url.isUrl)(id)) {
      return defaultUri + encodeURIComponent(id);
    }
  }
}
function resolveImportMapEntry(importMap, resolvedOrPlain, parentUrl) {
  if (!importMap.scopes) {
    importMap.scopes = {};
  }
  if (!importMap.imports) {
    importMap.imports = {};
  }
  const scopes = importMap.scopes;
  let scopeUrl = parentUrl && (0, import_utils.getMatch)(parentUrl, scopes);
  while (scopeUrl) {
    const packageResolution = applyPackages(resolvedOrPlain, scopes[scopeUrl]);
    if (packageResolution) {
      return packageResolution;
    }
    scopeUrl = (0, import_utils.getMatch)(scopeUrl.slice(0, scopeUrl.lastIndexOf("/")), scopes);
  }
  return applyPackages(resolvedOrPlain, importMap.imports, importMap.default) || (0, import_url.isUrl)(resolvedOrPlain) && resolvedOrPlain || void 0;
}
function resolveAndComposePackages(packages, outPackages, baseUrl, parentMap, parentUrl) {
  for (const p in packages) {
    const resolvedLhs = (0, import_url.resolveIfNotPlainOrUrl)(p, baseUrl) || p;
    const rhs = packages[p];
    if (typeof rhs !== "string") {
      continue;
    }
    const mapped = resolveImportMapEntry(parentMap, (0, import_url.resolveIfNotPlainOrUrl)(rhs, baseUrl) || rhs, parentUrl);
    if (!mapped) {
      (0, import_utils.targetWarning)(p, rhs, "bare specifier did not resolve");
    } else {
      outPackages[resolvedLhs] = mapped;
    }
  }
}
function resolveAndComposeImportMap(json, baseUrl, parentMap = {imports: {}, scopes: {}}) {
  const outMap = {
    imports: Object.assign({}, parentMap.imports),
    scopes: Object.assign({}, parentMap.scopes),
    default: json.default
  };
  if (json.imports) {
    resolveAndComposePackages(json.imports, outMap.imports, baseUrl, parentMap);
  }
  if (json.scopes) {
    for (const s in json.scopes) {
      const resolvedScope = (0, import_url.resolveUrl)(s, baseUrl);
      resolveAndComposePackages(json.scopes[s], outMap.scopes[resolvedScope] || (outMap.scopes[resolvedScope] = {}), baseUrl, parentMap, resolvedScope);
    }
  }
  if (json.default) {
    outMap.default = (0, import_url.resolveIfNotPlainOrUrl)(json.default, baseUrl);
  }
  return outMap;
}
