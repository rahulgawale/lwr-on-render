var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/loader/src/modules/lwr/loader/moduleRegistry/scriptLoad.ts
__markAsModule(exports);
__export(exports, {
  loadModuleDef: () => loadModuleDef
});
var import_messages = __toModule(require("../errors/messages"));
var import_dom = __toModule(require("../utils/dom"));
function createScript(url) {
  const script = document.createElement("script");
  script.async = true;
  script.crossOrigin = "anonymous";
  script.src = url;
  return script;
}
var lastWindowError;
var lastWindowErrorUrl;
function loadModuleDef(url) {
  return new Promise(function(resolve, reject) {
    if (import_dom.hasDocument) {
      const script = createScript(url);
      script.addEventListener("error", () => {
        reject(new import_messages.LoaderError(import_messages.FAIL_LOAD, [url]));
      });
      script.addEventListener("load", () => {
        document.head.removeChild(script);
        if (lastWindowErrorUrl === url) {
          reject(lastWindowError);
        } else {
          resolve();
        }
      });
      document.head.appendChild(script);
    }
  });
}
if (import_dom.hasDocument) {
  window.addEventListener("error", (evt) => {
    lastWindowErrorUrl = evt.filename;
    lastWindowError = evt.error;
  });
}
