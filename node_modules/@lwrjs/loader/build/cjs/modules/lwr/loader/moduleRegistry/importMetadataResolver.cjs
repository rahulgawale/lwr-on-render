var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/loader/src/modules/lwr/loader/moduleRegistry/importMetadataResolver.ts
__markAsModule(exports);
__export(exports, {
  ImportMetadataResolver: () => ImportMetadataResolver
});
var import_messages = __toModule(require("../errors/messages"));
var import_url = __toModule(require("../utils/url"));
var import_metrics = __toModule(require("lwr/metrics"));
var ImportMetadataResolver = class {
  constructor(config, invalidationCallback) {
    this.importURICache = new Map();
    this.pendingURICache = new Map();
    this.loadMappingHooks = [];
    this.config = config;
    this.invalidationCallback = invalidationCallback;
  }
  addLoadMappingHook(hook) {
    this.loadMappingHooks.push(hook);
  }
  getMappingEndpoint() {
    return this.config.endpoints && this.config.endpoints.uris ? this.config.endpoints.uris.mapping : void 0;
  }
  getModifiersAsUrlParams() {
    const modifiers = this.config.endpoints ? this.config.endpoints.modifiers : void 0;
    if (!modifiers) {
      return "";
    } else {
      const qs = Object.keys(modifiers).map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(modifiers[key])}`).join("&");
      return `?${qs}`;
    }
  }
  buildMappingUrl(specifier) {
    const mappingEndpoint = this.getMappingEndpoint();
    const specifiers = encodeURIComponent(specifier);
    const modifiers = this.getModifiersAsUrlParams();
    return `${mappingEndpoint}${specifiers}${modifiers}`;
  }
  getBaseUrl() {
    return this.config.baseUrl;
  }
  registerImportMappings(newImportMetadata, rootSpecifiers) {
    if (!rootSpecifiers || rootSpecifiers.length === 0) {
      const imports = newImportMetadata ? JSON.stringify(newImportMetadata) : "undefined";
      throw new import_messages.LoaderError(import_messages.BAD_IMPORT_METADATA, [imports, rootSpecifiers ? "[]" : "undefined"]);
    }
    if (!newImportMetadata) {
      throw new import_messages.LoaderError(import_messages.BAD_IMPORT_METADATA, ["undefined", JSON.stringify(rootSpecifiers)]);
    }
    if (!newImportMetadata.imports || Object.keys(newImportMetadata.imports).length === 0) {
      throw new import_messages.LoaderError(import_messages.BAD_IMPORT_METADATA, [
        JSON.stringify(newImportMetadata),
        JSON.stringify(rootSpecifiers)
      ]);
    }
    const index = newImportMetadata.index || {};
    for (const [uri, specifiers] of Object.entries(newImportMetadata.imports)) {
      specifiers.forEach((specifier) => {
        const indexValue = index[specifier];
        const existing = this.importURICache.get(specifier);
        if (!existing) {
          this.saveImportURIRecord(specifier, uri, indexValue, rootSpecifiers.includes(specifier));
        } else {
          const identity = indexValue || uri;
          const existingIdentity = existing.identity || existing.uri;
          if (existingIdentity !== identity) {
            this.invalidationCallback({
              name: specifier,
              oldUrl: existingIdentity,
              newUrl: identity
            });
          }
        }
      });
    }
  }
  getURI(specifier) {
    return this.importURICache.has(specifier) ? (0, import_url.resolveUrl)(this.importURICache.get(specifier).uri, this.getBaseUrl()) : void 0;
  }
  resolveLocal(specifier) {
    const uri = this.getURI(specifier);
    if (uri) {
      return uri;
    } else if ((0, import_url.isUrl)(specifier) || specifier.startsWith("/")) {
      return specifier;
    }
    return void 0;
  }
  async resolve(specifier) {
    let uri = this.getURI(specifier);
    if (uri) {
      return uri;
    } else if ((0, import_url.isUrl)(specifier) || specifier.startsWith("/")) {
      return specifier;
    } else {
      const pending = this.pendingURICache.get(specifier);
      if (pending) {
        return pending;
      }
      this.config.profiler.logOperationStart({id: import_metrics.MAPPINGS_FETCH, specifier});
      const fetchMappingService = this.hasMappingHooks() ? this.evaluateMappingHooks : this.fetchNewMappings;
      const promise = fetchMappingService.bind(this)(specifier).then((importMetadata) => {
        if (!importMetadata || !importMetadata.imports) {
          throw new import_messages.LoaderError(import_messages.UNRESOLVED, [specifier]);
        }
        this.registerImportMappings(importMetadata, [specifier]);
        uri = this.getURI(specifier);
        if (!uri) {
          throw new import_messages.LoaderError(import_messages.UNRESOLVED, [specifier]);
        }
        this.config.profiler.logOperationEnd({id: import_metrics.MAPPINGS_FETCH, specifier});
        return uri;
      }).finally(() => {
        this.pendingURICache.delete(specifier);
      });
      this.pendingURICache.set(specifier, promise);
      return promise;
    }
  }
  hasMappingHooks() {
    return this.loadMappingHooks.length > 0;
  }
  async evaluateMappingHooks(specifier) {
    const loadMappingHooks = this.loadMappingHooks;
    if (loadMappingHooks.length) {
      const knownModules = Array.from(this.importURICache.keys());
      for (let i = 0; i < loadMappingHooks.length; i++) {
        const loadMappingHook = loadMappingHooks[i];
        const response = await loadMappingHook(specifier, {knownModules});
        if (response || response === void 0) {
          return response;
        }
      }
    }
    return this.fetchNewMappings(specifier);
  }
  async fetchNewMappings(specifier) {
    if (typeof globalThis.fetch !== "function") {
      throw new import_messages.LoaderError(import_messages.UNRESOLVED, [specifier]);
    }
    const uri = (0, import_url.resolveUrl)(this.buildMappingUrl(specifier), this.getBaseUrl());
    return globalThis.fetch(uri).then((res) => {
      if (!res.ok) {
        this.config.profiler.logOperationStart({id: import_metrics.MAPPINGS_ERROR, specifier});
        throw new import_messages.LoaderError(import_messages.UNRESOLVED, [specifier]);
      }
      return res.json().then((ret) => {
        return ret;
      }).catch((err) => {
        throw new import_messages.LoaderError(import_messages.UNRESOLVED, [specifier]);
      });
    });
  }
  saveImportURIRecord(specifier, uri, identity, isRoot) {
    if (!identity || uri === identity) {
      this.importURICache.set(specifier, {
        uri,
        isRoot
      });
    } else {
      this.importURICache.set(specifier, {
        uri,
        identity,
        isRoot
      });
    }
  }
};
