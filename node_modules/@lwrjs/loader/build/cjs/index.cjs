var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/loader/src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_path = __toModule(require("path"));
var import_fs = __toModule(require("fs"));
var import_package = __toModule(require("@lwrjs/loader/package"));
var AmdLoaderShimService = class {
  constructor({dir = "assets"}, context) {
    this.name = "loader-shim-resource";
    this.errorShimName = "lwr-error-shim.js";
    this.filenames = [
      this.errorShimName,
      "lwr-loader-shim.js",
      "lwr-loader-shim.bundle.js",
      "lwr-loader-shim.bundle.min.js",
      "lwr-loader-shim-legacy.js",
      "lwr-loader-shim-legacy.bundle.js",
      "lwr-loader-shim-legacy.bundle.min.js"
    ];
    this.context = context;
    this.directory = dir;
    this.version = context.runtimeEnvironment.lwrVersion;
  }
  async getResource(resource, environment) {
    const {specifier, version = this.version} = resource;
    if (!this.filenames.includes(specifier) || version !== this.version) {
      return;
    }
    const fileName = specifier;
    const absFilepath = import_path.default.join(import_package.rootPath, "build", this.directory, "prod", fileName);
    if (import_fs.default.existsSync(absFilepath)) {
      return {
        specifier,
        type: "application/javascript",
        inline: specifier === this.errorShimName ? true : false,
        stream: import_fs.default.createReadStream(absFilepath),
        src: this.context.resourceRegistry.resolveResourceUri({specifier, version}, environment)
      };
    } else {
      return void 0;
    }
  }
};
var src_default = AmdLoaderShimService;
