import path from 'path';
import fs from 'fs';
import { rootPath } from '@lwrjs/loader/package';
export default class AmdLoaderShimService {
    constructor({ dir = 'assets' }, context) {
        this.name = 'loader-shim-resource';
        this.errorShimName = 'lwr-error-shim.js';
        this.filenames = [
            this.errorShimName,
            'lwr-loader-shim.js',
            'lwr-loader-shim.bundle.js',
            'lwr-loader-shim.bundle.min.js',
            'lwr-loader-shim-legacy.js',
            'lwr-loader-shim-legacy.bundle.js',
            'lwr-loader-shim-legacy.bundle.min.js',
        ];
        this.context = context;
        this.directory = dir;
        this.version = context.runtimeEnvironment.lwrVersion;
    }
    async getResource(resource, environment) {
        const { specifier, version = this.version } = resource;
        // Check that the resource is the loader shim
        if (!this.filenames.includes(specifier) || version !== this.version) {
            return;
        }
        const fileName = specifier;
        // Retrieve the filepath from the build directory
        const absFilepath = path.join(rootPath, 'build', this.directory, 'prod', fileName);
        if (fs.existsSync(absFilepath)) {
            return {
                specifier,
                type: 'application/javascript',
                inline: specifier === this.errorShimName ? true : false,
                stream: fs.createReadStream(absFilepath),
                src: this.context.resourceRegistry.resolveResourceUri({ specifier, version }, environment),
            };
        }
        else {
            return undefined;
        }
    }
}
//# sourceMappingURL=index.js.map