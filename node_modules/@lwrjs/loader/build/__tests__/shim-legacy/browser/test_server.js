/* global console process */
/* eslint-disable lwr/only-allowed-imports, lwr/no-unguarded-apis */
import http from 'http';
import path from 'path';
import fs from 'fs';
import { once } from 'events';
import { pathToFileURL, fileURLToPath, URL } from 'url';
import { isNodeError } from '@lwrjs/diagnostics';
import { getAMDModule } from '../../../modules/lwr/loaderLegacy/__tests__/utils/amd.js';
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const baseUrl = pathToFileURL(path.resolve(__dirname, '../../../../') + '/');
const port = 8080;
const mimes = {
    '.html': 'text/html',
    '.css': 'text/css',
    '.js': 'application/javascript',
    '.mjs': 'application/javascript',
    '.json': 'application/json',
    '.wasm': 'application/wasm',
};
http.createServer(async function (req, res) {
    const urlDecoded = decodeURIComponent(req.url);
    const url = new URL(urlDecoded[0] === '/' ? urlDecoded.slice(1) : urlDecoded, baseUrl);
    const filePath = fileURLToPath(url);
    // Compile all ES modules from fixtures, except for ones in AMD dir
    if (filePath.indexOf('fixtures') >= 0 && filePath.indexOf('amd') < 0) {
        const namespace = path.basename(path.dirname(filePath));
        const name = path.basename(filePath, path.extname(filePath));
        const result = await getAMDModule(`${namespace}/${name}`, filePath, {});
        res.writeHead(200, { 'content-type': 'application/javascript' });
        res.write(result);
        res.end();
        return;
    }
    const fileStream = fs.createReadStream(filePath);
    try {
        await once(fileStream, 'readable');
    }
    catch (e) {
        if (isNodeError(e) && (e.code === 'EISDIR' || e.code === 'ENOENT')) {
            res.writeHead(404, {
                'content-type': 'text/html',
            });
            res.end(`File not found.`);
        }
        return;
    }
    let mime;
    if (filePath.endsWith('javascript.css'))
        mime = 'application/javascript';
    else
        mime = mimes[path.extname(filePath)] || 'text/plain';
    res.writeHead(200, { 'content-type': mime });
    fileStream.pipe(res);
    await once(fileStream, 'end');
    res.end();
}).listen(port);
process.on('SIGINT', () => {
    process.exit(1);
});
console.log(`Test server listening on http://localhost:${port}\n`);
//# sourceMappingURL=test_server.js.map