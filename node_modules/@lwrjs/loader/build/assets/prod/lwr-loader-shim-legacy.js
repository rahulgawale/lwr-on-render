/**
* Copyright (c) 2021, salesforce.com, inc.
* All rights reserved.
* SPDX-License-Identifier: MIT
* For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
*/
/* LWR Legacy Module Loader Shim v0.8.0 */
(function () {
  'use strict';

  // Bootstrap / shim
  const BOOTSTRAP_PREFIX = 'lwr.bootstrap.';
  const BOOTSTRAP_ERROR = `${BOOTSTRAP_PREFIX}error`;

  var Phase;

  (function (Phase) {
    Phase[Phase["Start"] = 0] = "Start";
    Phase[Phase["End"] = 1] = "End";
  })(Phase || (Phase = {}));

  // Attach a custom dispatcher
  let customDispatcher;
  function attachDispatcher(dispatcher) {
    customDispatcher = dispatcher;
  } // Check if the Performance API is available
  // e.g. JSDom (used in Jest) doesn't implement these

  const perf = globalThis.performance;
  const isPerfSupported = typeof perf !== 'undefined' && typeof perf.mark === 'function' && typeof perf.clearMarks === 'function' && typeof perf.measure === 'function' && typeof perf.clearMeasures === 'function'; // For marking request metrics
  // Fallback to the Performance API if there is no custom dispatcher

  function logOperationStart({
    id,
    specifier
  }) {
    if (customDispatcher) {
      customDispatcher({
        id,
        phase: Phase.Start,
        specifier
      });
    } else if (isPerfSupported) {
      perf.mark(id + (specifier ? `.${specifier}` : ''));
    }
  } // For measuring duration metrics
  // Fallback to the Performance API if there is no custom dispatcher

  /* istanbul ignore next */

  function logOperationEnd({
    id,
    specifier
  }) {
    if (customDispatcher) {
      customDispatcher({
        id,
        phase: Phase.End,
        specifier
      });
    } else if (isPerfSupported) {
      const suffix = specifier ? `.${specifier}` : '';
      const markName = id + suffix;
      const measureName = `${id}.duration${suffix}`;
      perf.measure(measureName, markName); // Clear the created mark and measure to avoid filling the performance entry buffer
      // Even if they get deleted, existing PerformanceObservers preserve copies of the entries

      perf.clearMarks(markName);
      perf.clearMeasures(measureName);
    }
  }

  function createLoader(name, definition, config, externalModules) {
      if (!definition || typeof definition[2] !== 'function') {
          throw new Error(`Expected loader with specifier "${name}" to be a module`);
      }
      // Create a Loader instance
      const exports = {};
      definition[2].call(null, exports);
      const { Loader } = exports;
      const loader = new Loader(config);
      // register externally loaded modules
      if (externalModules && externalModules.length) {
          loader.registerExternalModules(externalModules);
      }
      // Define the loader module with public API: { define, load, services }
      const exporter = (exports) => {
          Object.assign(exports, {
              define: loader.define.bind(loader),
              load: loader.load.bind(loader),
              services: loader.services,
          });
          return;
      };
      loader.define(name, ['exports'], exporter, definition[3]);
      return loader;
  }

  const REQUIRED_MODULES_TIMEOUT = 300 * 1000;

  // Check for errors with autoBoot and customInit
  function validatePreInit(autoBoot, customInit) {
      // If autoBoot === false, there must be a customInit hook
      if (!autoBoot && !customInit) {
          throw new Error('The customInit hook is required when autoBoot is false');
      }
      // If autoBoot === true, there must NOT be a customInit hook
      if (autoBoot && customInit) {
          throw new Error('The customInit hook must not be defined when autoBoot is true');
      }
  }
  // Process the customInit hook
  function customInit(config, initializeApp, define, onBootstrapError) {
      // Validate config
      const { autoBoot, customInit } = config;
      validatePreInit(autoBoot, customInit);
      // Set up arguments and call the customInit hook, if available
      if (customInit) {
          const lwr = {
              initializeApp,
              define,
              onBootstrapError,
              attachDispatcher,
          };
          customInit(lwr, config);
      }
  }

  /* global document */
  /* eslint-disable lwr/no-unguarded-apis */
  const hasSetTimeout = typeof setTimeout === 'function';
  const hasConsole = typeof console !== 'undefined';
  /* eslint-enable lwr/no-unguarded-apis */
  class LoaderShim {
      constructor(global) {
          this.defineCache = {};
          this.orderedDefs = [];
          // Start watchdog timer
          if (hasSetTimeout) {
              this.watchdogTimerId = this.startWatchdogTimer();
          }
          // Parse configuration
          this.global = global;
          this.config = global.LWR;
          this.loaderModule = 'lwr/loaderLegacy/v/0_8_0';
          // Set up error handler
          this.errorHandler = this.config.onError;
          // Set up the temporary LWR.define function and customInit hook
          const tempDefine = this.tempDefine.bind(this);
          global.LWR.define = tempDefine;
          this.bootReady = this.config.autoBoot;
          try {
              customInit(Object.freeze(this.config), this.postCustomInit.bind(this), tempDefine, (e) => {
                  // customInit handlers can overwrite
                  // the error handler with onBootstrapError
                  this.errorHandler = e;
              });
          }
          catch (e) {
              this.enterErrorState(e);
          }
      }
      // Return true if the app can be initialized
      canInit() {
          // Initialize the app if:
          //  - bootReady: autoBoot is on OR customInit has finished
          //  - all required modules are defined
          const allDefined = this.config.requiredModules.every((m) => this.orderedDefs.includes(m));
          return this.bootReady && allDefined;
      }
      /**
       * Create a temporary LWR.define() function which captures all
       * calls that occur BEFORE the full loader module is available
       *
       * Each call to LWR.define() is stored in 2 ways:
       *      - in a map as [moduleName, arguments] pairs
       *      - each moduleName is pushed onto an array, to preserve
       *          the order in which the modules were defined
       */
      tempDefine(...args) {
          // Cache the incoming module
          const moduleName = args[0];
          this.defineCache[moduleName] = args;
          this.orderedDefs.push(moduleName);
          if (this.canInit()) {
              if (hasSetTimeout) {
                  // requiredModules are defined, clear watchdog timer
                  // eslint-disable-next-line lwr/no-unguarded-apis, no-undef
                  clearTimeout(this.watchdogTimerId);
              }
              this.initApp();
          }
      }
      // Called by the customInit hook via lwr.initializeApp()
      postCustomInit() {
          this.bootReady = true;
          if (this.canInit()) {
              this.initApp();
          }
      }
      // Create the loader and initialize the application
      initApp() {
          try {
              const loaderConfig = {
                  baseUrl: this.config.baseUrl,
                  profiler: { logOperationStart, logOperationEnd },
                  // TODO: can be removed following https://github.com/salesforce/lwr/issues/1087
                  appMetadata: {
                      appId: this.config.appId,
                      bootstrapModule: this.config.bootstrapModule,
                      rootComponent: this.config.rootComponent,
                      rootComponents: this.config.rootComponents,
                  },
              };
              const loader = createLoader(this.loaderModule, this.defineCache[this.loaderModule], loaderConfig, this.config.preloadModules);
              this.createProfilerModule(loader);
              this.mountApp(loader);
          }
          catch (e) {
              this.enterErrorState(e);
          }
      }
      waitForDOMContentLoaded() {
          // eslint-disable-next-line lwr/no-unguarded-apis
          if (typeof document === undefined) {
              return Promise.resolve();
          }
          // Resolve if document is already "ready" https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState
          // eslint-disable-next-line lwr/no-unguarded-apis
          if (document.readyState === 'interactive' || document.readyState === 'complete') {
              return Promise.resolve();
          }
          return new Promise((resolve) => {
              // eslint-disable-next-line lwr/no-unguarded-apis
              document.addEventListener('DOMContentLoaded', () => {
                  resolve();
              });
          });
      }
      // Create a module out of the profiler
      // Note: The profiler is also available as a module through lwc module resolution (see package.json)
      createProfilerModule(loader) {
          const exporter = (exports) => {
              Object.assign(exports, { logOperationStart, logOperationEnd });
          };
          loader.define('lwr/profiler/v/0_8_0', ['exports'], exporter, {});
      }
      // Set up the application globals, import map, root custom element...
      mountApp(loader) {
          const { bootstrapModule, rootComponent, importMappings, rootComponents, ssrProps, endpoints } = this.config;
          // Set global LWR.define to loader.define
          this.global.LWR = Object.freeze({
              define: loader.define.bind(loader),
              rootComponent,
              rootComponents,
              ssrProps,
              importMappings,
              endpoints,
          });
          // Redefine all modules in the temporary cache
          this.orderedDefs.forEach((specifier) => {
              if (specifier !== this.loaderModule) {
                  loader.define(...this.defineCache[specifier]);
              }
          });
          // by default, app initialization is gated on waiting for document to be parsed (via DOMContentLoaded)
          const { disableInitDefer } = this.config;
          // Load the import mappings and application bootstrap module
          loader
              .registerImportMappings(importMappings)
              .then(() => {
              if (!disableInitDefer) {
                  return this.waitForDOMContentLoaded();
              }
          })
              .then(() => loader.load(bootstrapModule))
              .catch((reason) => {
              this.enterErrorState(new Error(`Application ${rootComponent} could not be loaded: ${reason}`));
          });
      }
      // Trigger bootstrap error state, and call error handler if registered
      enterErrorState(error) {
          logOperationStart({ id: BOOTSTRAP_ERROR });
          if (this.errorHandler) {
              this.errorHandler(error);
          }
          else {
              if (hasConsole) {
                  // eslint-disable-next-line lwr/no-unguarded-apis, no-undef
                  console.error(`An error occurred during LWR bootstrap. ${error.message}`, error.stack);
              }
          }
      }
      // eslint-disable-next-line no-undef, lwr/no-unguarded-apis
      startWatchdogTimer() {
          // eslint-disable-next-line lwr/no-unguarded-apis, no-undef
          return setTimeout(() => {
              this.enterErrorState(new Error('Failed to load required modules - timed out'));
          }, REQUIRED_MODULES_TIMEOUT);
      }
  }

  // The loader module is ALWAYS required
  const GLOBAL = globalThis;
  GLOBAL.LWR.requiredModules = GLOBAL.LWR.requiredModules || [];
  if (GLOBAL.LWR.requiredModules.indexOf('lwr/loaderLegacy/v/0_8_0') < 0) {
      GLOBAL.LWR.requiredModules.push('lwr/loaderLegacy/v/0_8_0');
  }
  new LoaderShim(GLOBAL);

}());
