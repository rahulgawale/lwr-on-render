var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/base-view-transformer/src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => baseViewTransformer
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
function applyImmutableUrlsToSource(codeStringBuilder, assetReferences) {
  assetReferences.forEach((assetRef) => {
    const {
      override,
      url,
      location: {startOffset, endOffset}
    } = assetRef;
    startOffset !== endOffset && codeStringBuilder.overwrite(startOffset, endOffset, override?.uri || url);
  });
}
function baseViewTransformer(options, lwrGlobalContext) {
  const {assetRegistry} = lwrGlobalContext;
  return {
    name: "lwr-base-view-transformer",
    async link(stringBuilder, viewContext, viewMeta) {
      const {assetReferences} = viewMeta;
      const {runtimeEnvironment, importer} = viewContext;
      const imageRefs = await Promise.all(assetReferences.map(async (ref) => {
        const {url: specifier} = ref;
        let override;
        try {
          override = await assetRegistry.resolveAssetUri({specifier, importer}, runtimeEnvironment);
        } catch (e) {
          if (e instanceof import_diagnostics.LwrUnresolvableError || e.diagnostics) {
            import_shared_utils.logger.warn("Asset was not found for " + (ref.url || "empty url"));
            return ref;
          }
          throw e;
        }
        return {...ref, override};
      }));
      applyImmutableUrlsToSource(stringBuilder, imageRefs);
      viewMeta.assetReferences = imageRefs;
    }
  };
}
