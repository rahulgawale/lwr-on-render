/// <reference types="node" />
import { Diagnostic, Diagnostics } from './types.js';
export declare function isNodeError(error: unknown): error is NodeJS.ErrnoException;
export declare function createSingleDiagnosticError(diag: Diagnostic, errorClass?: typeof DiagnosticsError): DiagnosticsError;
export declare class DiagnosticsError extends Error {
    constructor(message: undefined | string, diagnostics: Diagnostics);
    private _memoMessage;
    private _message;
    get message(): string;
    diagnostics: Diagnostics;
}
export declare class LwrConfigValidationError extends DiagnosticsError {
}
export declare class LwrUnresolvableError extends DiagnosticsError {
}
export declare class LwrServerError extends DiagnosticsError {
}
/**
 * Create a status object Express can return when there is an error
 *
 * @param name - string name of the problem module/resource
 * @param error - an Error/Diagnostic object; thrown from try/catch
 */
export declare function createReturnStatus(name: string, error: unknown): {
    status: number;
    message: string;
};
//# sourceMappingURL=errors.d.ts.map