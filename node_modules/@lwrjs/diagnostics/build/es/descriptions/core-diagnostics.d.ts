import { DiagnosticDescription, DiagnosticAdvice, StaticMarkup } from '../types';
declare type InputMessagesFactory = (...params: any[]) => Partial<DiagnosticDescription>;
export declare type InputMessagesCategory = {
    [key: string]: Partial<DiagnosticDescription> | InputMessagesFactory;
};
declare type OuputMessagesFactoryReturn<Ret extends Partial<DiagnosticDescription>> = Omit<Ret, 'message' | 'advice'> & {
    advice: DiagnosticAdvice;
    message: StaticMarkup;
};
declare type OutputMessagesFactory<Func extends InputMessagesFactory> = (...params: Parameters<Func>) => OuputMessagesFactoryReturn<ReturnType<Func>>;
declare type OutputMessagesValue<Value> = Value extends StaticMarkup ? {
    message: StaticMarkup;
    advice: DiagnosticAdvice;
} : Value extends Partial<DiagnosticDescription> ? OuputMessagesFactoryReturn<Value> : Value extends InputMessagesFactory ? OutputMessagesFactory<Value> : never;
declare type OutputMessagesCategory<Input extends InputMessagesCategory> = {
    [Key in keyof Input]: OutputMessagesValue<Input[Key]>;
};
export declare function createDiagnosticsCategory<Input extends InputMessagesCategory>(input: Input): OutputMessagesCategory<Input>;
export {};
//# sourceMappingURL=core-diagnostics.d.ts.map