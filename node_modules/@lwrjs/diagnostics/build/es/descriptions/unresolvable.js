import { createDiagnosticsCategory } from './core-diagnostics.js';
export const unresolvable = createDiagnosticsCategory({
    ASSET: (assetPath) => ({
        category: 'lwrUnresolvable/asset',
        message: `404: Could not find asset at "${assetPath}"`,
    }),
    DIR_ALIAS: (assetPath) => ({
        category: 'lwrUnresolvable/asset',
        message: `404: Unable to normalize "${assetPath}", no alias replacement found`,
    }),
    MODULE: (moduleSpecifier) => ({
        category: 'lwrUnresolvable/module',
        message: `404: Could not find module with specifier "${moduleSpecifier}"`,
    }),
    MODULE_ENTRY: (moduleSpecifier) => ({
        category: 'lwrUnresolvable/module',
        message: `404: Could not find module entry with specifier "${moduleSpecifier}"`,
    }),
    LWC_MODULE: (name) => ({
        category: 'lwrUnresolvable/module',
        message: `404: Could not find ${name}`,
    }),
    SIGNED_MODULE: (moduleSpecifier, signature) => ({
        category: 'lwrUnresolvable/module',
        message: `404: Could not find module with specifier "${moduleSpecifier}" and signature "${signature}"`,
    }),
    RESOURCE: (resourceSpecifier) => ({
        category: 'lwrUnresolvable/resource',
        message: `404: Could not find resource with specifier "${resourceSpecifier}"`,
    }),
    SERVER_ERROR: (name) => ({
        category: 'lwrUnresolvable/fatal',
        message: `500: Unexpected error fetching ${name}`,
    }),
    INVALID_JSON: () => ({
        category: 'lwrUnresolvable/invalid',
        message: '400: Accept header and json query parameter are incompatible',
    }),
    LABEL_MODULE: (file, error) => ({
        category: 'lwrUnresolvable/label',
        message: `Invalid JSON: Labels file ${file} must be a JSON object with string values or nested string values\n${error}`,
    }),
    ROUTES_MODULE: (file, error) => ({
        category: 'lwrUnresolvable/routes',
        message: `Invalid JSON: Route config file ${file} is invalid\n${error}`,
    }),
});
//# sourceMappingURL=unresolvable.js.map