export declare const descriptions: {
    CONFIG_PARSER: {
        TEST: Omit<{
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        TEST_ADVICE: (tagName: string, openLocation: import("../types.js").DiagnosticLocation) => Omit<{
            message: string;
            advice: ({
                type: "log";
                category: "info";
                text: string;
                location?: undefined;
            } | {
                type: "frame";
                location: import("../types.js").DiagnosticLocation;
                category?: undefined;
                text?: undefined;
            })[];
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_JSON: (invalidJsonError: string) => Omit<{
            category: "lwrConfig/invalidJson";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INCORRECT_NODE_TYPE: (configProperty: string, expectedNodeType: string, actualNodeType: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_EMPTY_NODE: (configProperty: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_PROPERTY: (configProperty: string, prop: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        NON_EMPTY_STRING: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        NON_EMPTY_ARRAY: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_PORT: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_METHOD: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_SERVER_TYPE: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_GENERATOR_CONFIG: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_STATUS: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_SPECIFIER: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_PATH: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_BASEPATH: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_SERVICE: (configProperty: string, actualProp: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_ENVIRONMENT: (configProperty: string) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        MISSING_ONE_OF: (configProperty: string, childProps: string[]) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        TOO_MANY: (configProperty: string, childProps: string[]) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        MISSING_REQUIRED: (configProperty: string, childProps: string[]) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        DUPLICATE_IDS: (configProperty: string, dupeIds: string[]) => Omit<{
            category: "lwrConfig/invalidSchema";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
    };
    UNRESOLVABLE: {
        ASSET: (assetPath: string) => Omit<{
            category: "lwrUnresolvable/asset";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        DIR_ALIAS: (assetPath: string) => Omit<{
            category: "lwrUnresolvable/asset";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        MODULE: (moduleSpecifier: string) => Omit<{
            category: "lwrUnresolvable/module";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        MODULE_ENTRY: (moduleSpecifier: string) => Omit<{
            category: "lwrUnresolvable/module";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        LWC_MODULE: (name: string) => Omit<{
            category: "lwrUnresolvable/module";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        SIGNED_MODULE: (moduleSpecifier: string, signature: string) => Omit<{
            category: "lwrUnresolvable/module";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        RESOURCE: (resourceSpecifier: string) => Omit<{
            category: "lwrUnresolvable/resource";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        SERVER_ERROR: (name: string) => Omit<{
            category: "lwrUnresolvable/fatal";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        INVALID_JSON: () => Omit<{
            category: "lwrUnresolvable/invalid";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        LABEL_MODULE: (file: string, error: string) => Omit<{
            category: "lwrUnresolvable/label";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
        ROUTES_MODULE: (file: string, error: string) => Omit<{
            category: "lwrUnresolvable/routes";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
    };
    SERVER: {
        WARMUP_ERROR: (error: string) => Omit<{
            category: "lwrServer/warmupError";
            message: string;
        }, "message" | "advice"> & {
            advice: import("../types.js").DiagnosticAdvice;
            message: string;
        };
    };
};
export * from './core-diagnostics.js';
//# sourceMappingURL=index.d.ts.map