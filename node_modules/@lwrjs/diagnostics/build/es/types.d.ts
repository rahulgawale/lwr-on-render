import { DiagnosticCategory } from './categories';
import { Dict } from '@lwrjs/types';
export declare type StaticMarkup = string;
export declare type SourceLocation = {
    filename?: string;
    identifierName?: string;
    offset?: number;
    start: Position;
    end: Position;
};
export declare type Position = {
    line: number;
    column: number;
};
export declare type DiagnosticLocation = {
    sourceText?: string;
    integrity?: DiagnosticIntegrity;
    marker?: StaticMarkup;
    language?: DiagnosticLanguage;
    filename?: string;
    start?: Position;
    end?: Position;
};
export declare type DiagnosticOrigin = {
    category: string;
    message?: string;
};
export declare type DiagnosticLogCategory = 'none' | 'info' | 'warn' | 'error';
export declare type DiagnosticLanguage = 'json' | 'js' | 'css' | 'html' | 'markdown' | 'text' | 'unknown';
export declare type DiagnosticTag = 'fixable' | 'internal' | 'unique' | 'fatal';
export declare type DiagnosticTags = {
    [key in DiagnosticTag]?: boolean;
};
export declare type Diagnostic = {
    description: DiagnosticDescription;
    location?: DiagnosticLocation;
    label?: StaticMarkup;
    origins?: DiagnosticOrigin[];
    dependencies?: {
        filename: string;
        integrity: DiagnosticIntegrity;
    }[];
    tags?: DiagnosticTags;
};
export declare type Diagnostics = Diagnostic[];
export declare type DiagnosticIntegrity = {
    hash: string;
};
export declare type DiagnosticDescription = {
    category: DiagnosticCategory;
    categoryValue?: string;
    message: StaticMarkup;
    advice: DiagnosticAdvice;
};
export declare type DiagnosticDescriptionOptional = {
    category?: DiagnosticCategory;
    categoryValue?: string;
    message: StaticMarkup;
    advice?: DiagnosticAdvice;
};
export declare type DiagnosticAdviceItem = DiagnosticAdviceLog | DiagnosticAdviceList | DiagnosticAdviceInspect | DiagnosticAdviceCode | DiagnosticAdviceFrame | DiagnosticAdviceDiff | DiagnosticAdviceStacktrace | DiagnosticAdviceCommand | DiagnosticAdviceAction | DiagnosticAdviceGroup;
export declare type DiagnosticAdviceGroup = {
    type: 'group';
    title: StaticMarkup;
    advice: DiagnosticAdvice;
};
export declare type DiagnosticAdviceCommand = {
    type: 'command';
    command: string;
};
export declare type DiagnosticAdviceLog = {
    type: 'log';
    category: DiagnosticLogCategory;
    text: StaticMarkup;
    compact?: boolean;
};
export declare type DiagnosticAdviceList = {
    type: 'list';
    list: StaticMarkup[];
    truncate?: boolean;
    reverse?: boolean;
    ordered?: boolean;
};
export declare type DiagnosticAdviceInspect = {
    type: 'inspect';
    data: any;
};
export declare type DiagnosticAdviceAction = {
    type: 'action';
    hidden?: boolean;
    extra?: boolean;
    shortcut?: string;
    instruction: StaticMarkup;
    noun: StaticMarkup;
    command: string;
    commandFlags?: Dict<boolean | string | string[]>;
    requestFlags?: any;
    args?: string[];
};
export declare type DiagnosticAdviceCode = {
    type: 'code';
    sourceText: string;
    sourceTypeJS?: any;
    language: DiagnosticLanguage;
};
export declare type DiagnosticAdviceFrame = {
    type: 'frame';
    location: DiagnosticLocation;
};
export declare type DiagnosticAdviceDiff = {
    type: 'diff';
    diff: any;
    language: DiagnosticLanguage;
    sourceTypeJS?: any;
    legend?: {
        add: string;
        delete: string;
    };
};
export declare type DiagnosticAdviceStacktrace = {
    type: 'stacktrace';
    title?: StaticMarkup;
    truncate?: boolean;
    importantFilenames?: string[];
    frames: DiagnosticAdviceStackFrame[];
};
export declare type DiagnosticAdvice = DiagnosticAdviceItem[];
export declare type DiagnosticAdviceStackFrame = {
    prefix?: string;
    suffix?: string;
    object?: string;
    property?: string;
    filename?: string;
    line?: number;
    column?: number;
    language: undefined | DiagnosticLanguage;
    sourceText?: string;
};
//# sourceMappingURL=types.d.ts.map