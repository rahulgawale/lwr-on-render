import { descriptions } from './descriptions/index.js';
// The NodeJS Error is different from the JavaScript Error (e.g. NodeJS Error has a code)
export function isNodeError(error) {
    return error instanceof Error;
}
export function createSingleDiagnosticError(diag, errorClass = DiagnosticsError) {
    return new errorClass(diag.description.message, [diag]);
}
export class DiagnosticsError extends Error {
    constructor(message, diagnostics) {
        if (diagnostics.length === 0) {
            throw new Error('No diagnostics');
        }
        super();
        this._memoMessage = undefined;
        this._message = message;
        this.diagnostics = diagnostics;
        this.name = 'DiagnosticsError';
    }
    // Lazily instantiate this. If we ever catchDiagnostics we wont even care about the `message`
    // so this avoids having to print it to a string
    get message() {
        if (this._memoMessage !== undefined) {
            return this._memoMessage;
        }
        const message = this._message === undefined ? '' : this._message + '\n';
        return message;
    }
}
export class LwrConfigValidationError extends DiagnosticsError {
}
export class LwrUnresolvableError extends DiagnosticsError {
}
export class LwrServerError extends DiagnosticsError {
}
/**
 * Create a status object Express can return when there is an error
 *
 * @param name - string name of the problem module/resource
 * @param error - an Error/Diagnostic object; thrown from try/catch
 */
export function createReturnStatus(name, error) {
    let returnStatus = { status: 501, message: '' };
    if (isNodeError(error) && error.code === 'NO_LWC_MODULE_FOUND') {
        returnStatus = { status: 404, message: descriptions.UNRESOLVABLE.LWC_MODULE(name).message };
    }
    else if (error instanceof LwrUnresolvableError &&
        error.diagnostics[0].description.category === 'lwrUnresolvable/invalid') {
        returnStatus = { status: 400, message: error.message };
    }
    else if (error instanceof LwrUnresolvableError) {
        returnStatus = { status: 404, message: error.message };
    }
    else {
        returnStatus = { status: 500, message: descriptions.UNRESOLVABLE.SERVER_ERROR(name).message };
    }
    return returnStatus;
}
//# sourceMappingURL=errors.js.map