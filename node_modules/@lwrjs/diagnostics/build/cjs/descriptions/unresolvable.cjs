var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/diagnostics/src/descriptions/unresolvable.ts
__markAsModule(exports);
__export(exports, {
  unresolvable: () => unresolvable
});
var import_core_diagnostics = __toModule(require("./core-diagnostics.cjs"));
var unresolvable = (0, import_core_diagnostics.createDiagnosticsCategory)({
  ASSET: (assetPath) => ({
    category: "lwrUnresolvable/asset",
    message: `404: Could not find asset at "${assetPath}"`
  }),
  DIR_ALIAS: (assetPath) => ({
    category: "lwrUnresolvable/asset",
    message: `404: Unable to normalize "${assetPath}", no alias replacement found`
  }),
  MODULE: (moduleSpecifier) => ({
    category: "lwrUnresolvable/module",
    message: `404: Could not find module with specifier "${moduleSpecifier}"`
  }),
  MODULE_ENTRY: (moduleSpecifier) => ({
    category: "lwrUnresolvable/module",
    message: `404: Could not find module entry with specifier "${moduleSpecifier}"`
  }),
  LWC_MODULE: (name) => ({
    category: "lwrUnresolvable/module",
    message: `404: Could not find ${name}`
  }),
  SIGNED_MODULE: (moduleSpecifier, signature) => ({
    category: "lwrUnresolvable/module",
    message: `404: Could not find module with specifier "${moduleSpecifier}" and signature "${signature}"`
  }),
  RESOURCE: (resourceSpecifier) => ({
    category: "lwrUnresolvable/resource",
    message: `404: Could not find resource with specifier "${resourceSpecifier}"`
  }),
  SERVER_ERROR: (name) => ({
    category: "lwrUnresolvable/fatal",
    message: `500: Unexpected error fetching ${name}`
  }),
  INVALID_JSON: () => ({
    category: "lwrUnresolvable/invalid",
    message: "400: Accept header and json query parameter are incompatible"
  }),
  LABEL_MODULE: (file, error) => ({
    category: "lwrUnresolvable/label",
    message: `Invalid JSON: Labels file ${file} must be a JSON object with string values or nested string values
${error}`
  }),
  ROUTES_MODULE: (file, error) => ({
    category: "lwrUnresolvable/routes",
    message: `Invalid JSON: Route config file ${file} is invalid
${error}`
  })
});
