var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/diagnostics/src/errors.ts
__markAsModule(exports);
__export(exports, {
  DiagnosticsError: () => DiagnosticsError,
  LwrConfigValidationError: () => LwrConfigValidationError,
  LwrServerError: () => LwrServerError,
  LwrUnresolvableError: () => LwrUnresolvableError,
  createReturnStatus: () => createReturnStatus,
  createSingleDiagnosticError: () => createSingleDiagnosticError,
  isNodeError: () => isNodeError
});
var import_descriptions = __toModule(require("./descriptions/index.cjs"));
function isNodeError(error) {
  return error instanceof Error;
}
function createSingleDiagnosticError(diag, errorClass = DiagnosticsError) {
  return new errorClass(diag.description.message, [diag]);
}
var DiagnosticsError = class extends Error {
  constructor(message, diagnostics) {
    if (diagnostics.length === 0) {
      throw new Error("No diagnostics");
    }
    super();
    this._memoMessage = void 0;
    this._message = message;
    this.diagnostics = diagnostics;
    this.name = "DiagnosticsError";
  }
  get message() {
    if (this._memoMessage !== void 0) {
      return this._memoMessage;
    }
    const message = this._message === void 0 ? "" : this._message + "\n";
    return message;
  }
};
var LwrConfigValidationError = class extends DiagnosticsError {
};
var LwrUnresolvableError = class extends DiagnosticsError {
};
var LwrServerError = class extends DiagnosticsError {
};
function createReturnStatus(name, error) {
  let returnStatus = {status: 501, message: ""};
  if (isNodeError(error) && error.code === "NO_LWC_MODULE_FOUND") {
    returnStatus = {status: 404, message: import_descriptions.descriptions.UNRESOLVABLE.LWC_MODULE(name).message};
  } else if (error instanceof LwrUnresolvableError && error.diagnostics[0].description.category === "lwrUnresolvable/invalid") {
    returnStatus = {status: 400, message: error.message};
  } else if (error instanceof LwrUnresolvableError) {
    returnStatus = {status: 404, message: error.message};
  } else {
    returnStatus = {status: 500, message: import_descriptions.descriptions.UNRESOLVABLE.SERVER_ERROR(name).message};
  }
  return returnStatus;
}
