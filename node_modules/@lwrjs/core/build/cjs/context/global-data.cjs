var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/context/global-data.ts
__markAsModule(exports);
__export(exports, {
  getGlobalData: () => getGlobalData
});
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
function recursiveJsonCollector(resources, currentPath, collector) {
  for (const resource of resources) {
    const resourcePath = import_path.default.join(currentPath, resource);
    if (resource.endsWith(".json")) {
      const resourceName = import_path.default.basename(resource, ".json");
      const jsonSource = JSON.parse(import_fs.default.readFileSync(resourcePath, "utf-8"));
      collector[resourceName] = jsonSource;
    } else if (import_fs.default.statSync(resourcePath).isDirectory()) {
      const dirContentList = import_fs.default.readdirSync(resourcePath);
      collector[resource] = recursiveJsonCollector(dirContentList, resourcePath, {});
    }
  }
  return collector;
}
function getGlobalData(globalDataDir, defaultData = {}) {
  if (!import_fs.default.existsSync(globalDataDir) || !import_fs.default.statSync(globalDataDir).isDirectory()) {
    return defaultData;
  }
  const dirContentList = import_fs.default.readdirSync(globalDataDir);
  return {
    ...recursiveJsonCollector(dirContentList, globalDataDir, {}),
    ...defaultData
  };
}
