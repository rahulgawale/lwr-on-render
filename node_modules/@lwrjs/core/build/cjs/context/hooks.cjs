var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/context/hooks.ts
__markAsModule(exports);
__export(exports, {
  runConfigurationsHook: () => runConfigurationsHook
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_config = __toModule(require("@lwrjs/config"));
function normalizeRoutesBootstrap({routes, errorRoutes}) {
  [...routes, ...errorRoutes].forEach((route) => {
    if (!route.bootstrap) {
      route.bootstrap = {...import_shared_utils.DEFAULT_LWR_BOOTSTRAP_CONFIG};
    }
  });
}
async function runConfigurationsHook(hookPlugins, lwrConfig, dataConfig, runtimeConfig) {
  for (const hookPlugin of hookPlugins) {
    await hookPlugin.initConfigs(lwrConfig, dataConfig, runtimeConfig);
  }
  try {
    (0, import_config.validateLwrAppConfig)(JSON.stringify(lwrConfig), "post");
  } catch (e) {
    if (process.env.UNSAFE_IGNORE_CONFIG_VALIDATION === "true") {
      import_shared_utils.logger.warn("ignoring config validation errors due to UNSAFE_IGNORE_CONFIG_VALIDATION flag...proceed with caution");
      console.dir(e, {depth: null});
    } else {
      throw e;
    }
  }
  normalizeRoutesBootstrap(lwrConfig);
  return {
    lwrConfig,
    dataConfig,
    runtimeConfig
  };
}
