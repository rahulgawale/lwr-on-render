import http from 'http';
import https from 'https';
import { DiagnosticsError } from '@lwrjs/diagnostics';
export default class NetworkDispatcher {
    constructor(port, internalRequestKey) {
        this.port = port || 3000;
        const httpClient = this.port == 443 ? https : http;
        this.pool = new httpClient.Agent({
            maxSockets: 25,
        });
        this.internalRequestKey = internalRequestKey || '';
    }
    dispatchUrl(url, method, lang) {
        const options = {
            method: method,
            host: 'localhost',
            port: this.port,
            path: url,
            agent: this.pool,
            headers: {
                'Accept-Language': lang,
                // pass private key to get access to internal metadata
                'lwr-metadata-request': this.internalRequestKey,
            },
        };
        return new Promise((resolve, reject) => {
            const httpClient = options.port == 443 ? https : http;
            const bodyChunks = [];
            // console.log(`[INFO][NetworkDispatcher] Request: [${method}][${lang}] ${url}`);
            const req = httpClient.request(options, (res) => {
                res.on('data', (chunk) => {
                    bodyChunks.push(chunk);
                });
                res.on('end', () => {
                    // console.log(`[END][NetworkDispatcher] Request: [${method}][${lang}] ${url}`);
                    const body = Buffer.concat(bodyChunks).toString();
                    try {
                        const jsonResponse = JSON.parse(body);
                        resolve(jsonResponse);
                    }
                    catch (e) {
                        console.error(`[ERROR][NetworkDispatcher] unexpected response body: [${method}][${lang}] ${url}: '${body}'`);
                        if (e instanceof DiagnosticsError) {
                            console.log('LWR Diagnostic Error: ');
                            console.log(e.diagnostics);
                            console.log(e.stack);
                        }
                        else {
                            console.error(e);
                        }
                        resolve({});
                    }
                });
            });
            req.on('error', (err) => {
                console.error(`[ERROR][NetworkDispatcher] Request: [${method}][${lang}] ${url}`);
                if (err instanceof DiagnosticsError) {
                    console.log('LWR Diagnostic Error: ');
                    console.log(err.diagnostics);
                    console.log(err.stack);
                }
                else {
                    console.error(err);
                }
                reject(err);
            });
            req.end();
        });
    }
}
//# sourceMappingURL=network-dispatcher.js.map