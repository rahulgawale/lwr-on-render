import { ImportMetadata, LwrDispatcher, StaticSiteGenerator, LwrRoute, NormalizedLwrGlobalConfig, RuntimeEnvironment } from '@lwrjs/types';
import { ResourceContextOpts, SiteConfig, ViewImportMetadata } from './types.js';
export default class SiteGenerator {
    /**
     * Build a static site in the configured directory
     *  - Generate all routes / modules
     *  - copy assets / resources
     *
     * @param config - LWR config for the site
     * @param dispatcher - Facilitate server requests
     */
    buildStaticApplication(config: NormalizedLwrGlobalConfig, dispatcher: LwrDispatcher): Promise<void>;
    /**
     * Crawl all view routes for a site
     */
    generateRoutes(runtimeEnvironment: RuntimeEnvironment, staticSiteGenerator: StaticSiteGenerator, routes: LwrRoute[], dispatcher: LwrDispatcher, outputDir: string, urlRewriteMap?: Map<string, string>): Promise<void>;
    /**
     * Creates a function to dispatch the root requests for a given view url
     */
    private createGenerateURLFunction;
    /**
     * Primary recursive dispatch function.  Executes a URL and crawls its dependents.
     *
     * @param url - URL to execute
     * @param dispatcher - Facilitates GET requests
     * @param resourceOpts - Data about the URL to execute
     * @param siteConfig - Running config for the current view
     */
    dispatchResourceRecursive(url: string, dispatcher: LwrDispatcher, resourceOpts: ResourceContextOpts, siteConfig: SiteConfig): Promise<void>;
    /**
     * Handle processing a returned javascript module or bundle and follow all returned references
     * @param url - URL of the request javascript resource
     * @param context - Response Context
     * @param siteConfig - Global metadata about the site
     * @param dispatcher - Network dispatcher
     */
    private handleJavascriptResource;
    /**
     * Handle processing a returned module URI mapping resource and follow all returned references
     * @param url - URL of the request mapping resource
     * @param context - Response Context
     * @param siteConfig - Global metadata about the site
     * @param dispatcher - Network dispatcher
     */
    private handleMappingResource;
    /**
     * Handle processing a returned HTML resource and process any provided view metadata
     *
     * @param url - URL of the requested HTML resource
     * @param context - Response Context
     * @param siteConfig - Global metadata about the site
     * @param dispatcher - Network Dispatcher
     */
    private handleHtmlResource;
    /**
     * Handle processing a returned view definition by following all returned references
     * @param viewDefinition - Metadata about everything directly referenced form the view
     * @param siteConfig - Global metadata about the site
     * @param dispatcher - Network dispatcher
     */
    private handleViewDefinition;
    private dispatchJSResourceRecursive;
    /**
     * Handle processing a returned asset or resource
     * @param url - URL of the requested asset or resource
     * @param context - Response Context
     * @param siteConfig - Global metadata about the site
     */
    private handleAssetOrResource;
    private getResourcePathFromUrl;
    /**
     *  Write out redirect mapping files for static hosting services like netlify. Examples for why this is needed:
     *  -- Redirect /1/bundle/amd/l/en-US/bi/0/module/mi/lwr/navigation/v/0_1_6 -> /1/bundle/amd/l/en-US/bi/0/module/mi/lwr/navigation/v/0_1_6/s/{signature}
     *  -- Redirect /1/bundle/amd/l/en-US/bi/0/module/mi/lwr%2Fnavigation%2Fv%2F0_1_6 -> /1/bundle/amd/l/en-US/bi/0/module/mi/lwr/navigation/v/0_1_6/s/{signature}
     *
     * @param outputDir
     * @param urlRewriteMap
     */
    private writeNetlifyRedirectConfig;
    /**
     * Copy over assets
     * TODO this results in duplicate assets at the moment since assets can be referenced multiple ways:
     * '/public/assets/images/logo.svg'
     * '/1/asset/s/latest/public/assets/images/logo.svg'
     *
     * @param assets AssetConfig
     *
     */
    private copyAssets;
    /**
     * Create a new site config for the current view
     */
    private createSiteConfig;
    private filterFeatureFlags;
    /**
     * Add any additional import metadata collected during static site generation to the Client Bootstrap Config for this view.
     */
    private addAdditionalImportMetadataToViewConfig;
}
export declare class ViewImportMetadataImpl implements ViewImportMetadata {
    private existing;
    private additional;
    constructor(existingImportMetadata: ImportMetadata, additionalImportMetadata?: ImportMetadata);
    /**
     * Get the additional import metadata collected while generating this view
     * @returns
     */
    getAdditionalImportMetadata(): ImportMetadata;
    /**
     * Adds any new imports found to the additional metadata map.  Returns a filtered
     * map of imports not in the initial view
     */
    addAdditionalMetadata(newMetadata: ImportMetadata): ImportMetadata;
    /**
     * Filter out any existing import metadata the would have already been sent back with the view from set of additional metadata detected
     */
    private filterMetadata;
    /**
     * Merge new import metadata into target import metadata
     */
    private mergeImportMetadata;
}
//# sourceMappingURL=static-generation.d.ts.map