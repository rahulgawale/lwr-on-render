import { DEFAULT_LWR_BOOTSTRAP_CONFIG, logger } from '@lwrjs/shared-utils';
import { validateLwrAppConfig } from '@lwrjs/config';
// Add missing bootstrap objects to routes
function normalizeRoutesBootstrap({ routes, errorRoutes }) {
    [...routes, ...errorRoutes].forEach((route) => {
        if (!route.bootstrap) {
            route.bootstrap = { ...DEFAULT_LWR_BOOTSTRAP_CONFIG };
        }
    });
}
export async function runConfigurationsHook(hookPlugins, lwrConfig, dataConfig, runtimeConfig) {
    for (const hookPlugin of hookPlugins) {
        // eslint-disable-next-line no-await-in-loop
        await hookPlugin.initConfigs(lwrConfig, dataConfig, runtimeConfig);
    }
    try {
        validateLwrAppConfig(JSON.stringify(lwrConfig), 'post');
    }
    catch (e) {
        // TODO: temporary workaround for https://github.com/salesforce/lwr/issues/825
        if (process.env.UNSAFE_IGNORE_CONFIG_VALIDATION === 'true') {
            logger.warn('ignoring config validation errors due to UNSAFE_IGNORE_CONFIG_VALIDATION flag...proceed with caution');
            console.dir(e, { depth: null });
        }
        else {
            throw e;
        }
    }
    normalizeRoutesBootstrap(lwrConfig);
    return {
        lwrConfig,
        dataConfig,
        runtimeConfig,
    };
}
//# sourceMappingURL=hooks.js.map