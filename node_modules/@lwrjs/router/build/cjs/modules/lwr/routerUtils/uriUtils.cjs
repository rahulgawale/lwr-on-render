var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/router/src/modules/lwr/routerUtils/uriUtils.ts
__markAsModule(exports);
__export(exports, {
  decode: () => decode,
  encode: () => encode,
  getParamName: () => getParamName,
  getPathFromUrl: () => getPathFromUrl,
  getQueryFromUrl: () => getQueryFromUrl,
  getQueryNames: () => getQueryNames,
  getQueryString: () => getQueryString,
  isParam: () => isParam
});
function encode(str = "") {
  str = str || "";
  return encodeURIComponent(str);
}
function decode(str = "") {
  str = str || "";
  return decodeURIComponent(str);
}
function getPathFromUrl(url) {
  url = url || "/";
  if (url.charAt(0) !== "/") {
    url = "/" + url;
  }
  const fullmatch = url.match(/^[^#?]+/);
  if (fullmatch !== null) {
    const path = fullmatch[0];
    return path === "/" ? "/" : path.replace(/\/$/, "");
  }
  return "/";
}
function getQueryFromUrl(url) {
  url = url || "";
  const fragmentStart = url.indexOf("#");
  if (fragmentStart >= 0) {
    url = url.substring(0, fragmentStart);
  }
  const queryIdx = url.indexOf("?");
  const queryStr = queryIdx >= 0 ? url.substr(queryIdx + 1) : null;
  const queryParams = {};
  if (queryStr) {
    queryStr.split("&").forEach((pair) => {
      if (pair.indexOf("=") >= 0) {
        const [key, value = ""] = pair.split("=");
        queryParams[decode(key)] = decode(value);
      } else {
        queryParams[decode(pair)] = null;
      }
    });
  }
  return queryParams;
}
function getQueryString(queryObj = {}) {
  const keys = Object.keys(queryObj);
  return keys.length ? `?${keys.map((key) => {
    const value = queryObj[key];
    if (value === null) {
      return key;
    }
    return `${key}=${encode(value)}`;
  }).join("&")}` : "";
}
function isParam(str) {
  return str && str.length > 1 ? str.startsWith(":") : false;
}
function getParamName(routeParamName) {
  return routeParamName ? isParam(routeParamName) ? routeParamName.substr(1) : false : false;
}
function getQueryNames(compiledQuery) {
  return Object.values(compiledQuery).reduce((paramNames, {routeParamName}) => {
    const paramName = getParamName(routeParamName);
    if (paramName) {
      paramNames.push(paramName);
    }
    return paramNames;
  }, []);
}
