var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/modules/lwr/routerUtils/routeUtils.ts
__markAsModule(exports);
__export(exports, {
  getPageReferenceFromUrl: () => getPageReferenceFromUrl,
  getUrlFromPageReference: () => getUrlFromPageReference,
  getUrlFromPageReferenceAndRouteDef: () => getUrlFromPageReferenceAndRouteDef,
  matchRouteByUrl: () => matchRouteByUrl
});
var import_uriUtils = __toModule(require("./uriUtils"));
var import_routeDefUtils = __toModule(require("./routeDefUtils"));
function isRoutePatternsMatched(path, queryObj, routeDef) {
  const {original: {patterns = null} = {}} = routeDef || {};
  if (patterns) {
    const pathParams = (0, import_routeDefUtils.getPathParams)(path, routeDef);
    const queryParams = (0, import_routeDefUtils.getQueryParams)(queryObj, routeDef);
    const params = {
      ...pathParams,
      ...queryParams
    };
    return Object.keys(patterns).every((paramKey) => {
      const pattern = patterns[paramKey];
      const regex = new RegExp(pattern);
      const paramValue = params[paramKey] || "";
      return regex.test(paramValue);
    });
  }
  return true;
}
function getRouteDefinitionForUri(uri, routeDefs) {
  const path = (0, import_uriUtils.getPathFromUrl)(uri);
  const queryObj = (0, import_uriUtils.getQueryFromUrl)(uri);
  const matchedPaths = routeDefs ? routeDefs.filter((def) => def.regex.test(path)) : [];
  const [matched] = matchedPaths.filter((def) => {
    const {queryMatcher} = def;
    return queryMatcher(queryObj) && isRoutePatternsMatched(path, queryObj, def);
  });
  return matched || null;
}
function matchRouteByUrl(url, routeDefs, basePath = "") {
  if (basePath && url.indexOf(basePath) === 0) {
    url = url.replace(basePath, "");
  }
  const routeDef = getRouteDefinitionForUri(url, routeDefs);
  let matchInfo;
  if (!routeDef) {
    return null;
  } else {
    const pageReference = (0, import_routeDefUtils.getPageReferenceFromUriAndRouteDef)(url, routeDef);
    if (pageReference) {
      const originalRouteDef = routeDef.original;
      matchInfo = {
        route: {
          id: originalRouteDef.id,
          attributes: {...pageReference.attributes},
          state: {...pageReference.state},
          pageReference: {
            type: pageReference.type,
            attributes: {...pageReference.attributes},
            state: {...pageReference.state}
          }
        },
        routeDefinition: routeDef
      };
      return matchInfo;
    }
  }
  return null;
}
function getUrlFromPageReference(pageReference, routeDefs, basePath = "") {
  const routeDef = (0, import_routeDefUtils.matchRouteDefinitionByPageReference)(pageReference, routeDefs);
  if (routeDef) {
    return getUrlFromPageReferenceAndRouteDef(pageReference, routeDef, basePath);
  }
  return null;
}
function extractBindingValues(parameters, pageReference, pageBindings) {
  const {attributeBindings, stateBindings} = pageBindings;
  const {attributes: refAttributes, state: refState} = pageReference;
  const parameterValueMapping = {};
  parameters.forEach((paramName) => {
    const [attributeBindingKey] = Object.keys(attributeBindings).filter((attributeBindingKey2) => {
      return (0, import_uriUtils.getParamName)(attributeBindings[attributeBindingKey2]) === paramName;
    });
    if (attributeBindingKey) {
      parameterValueMapping[paramName] = refAttributes[attributeBindingKey];
    } else {
      const [stateBindingKey] = Object.keys(stateBindings).filter((stateBindingKey2) => {
        return (0, import_uriUtils.getParamName)(stateBindings[stateBindingKey2]) === paramName;
      });
      if (stateBindingKey) {
        parameterValueMapping[paramName] = refState[stateBindingKey];
      }
    }
  });
  return parameterValueMapping;
}
function getUrlFromPageReferenceAndRouteDef(pageReference, routeDef, basePath = "") {
  const {params, original: {page = {}} = {}, toPath, compiledQuery} = routeDef;
  const {attributes: attributeBindings = {}, state: stateBindings = {}} = page;
  const pathParamNames = params.filter(({name}) => {
    return typeof name === "string";
  }).map(({name}) => {
    return name;
  });
  const pathParameters = extractBindingValues(pathParamNames, pageReference, {
    attributeBindings,
    stateBindings
  });
  const toPathUrl = toPath(pathParameters);
  const queryParamNames = (0, import_uriUtils.getQueryNames)(compiledQuery);
  const queryParameters = extractBindingValues(queryParamNames, pageReference, {
    attributeBindings,
    stateBindings
  });
  const queryObject = getQueryObjectForParametersAndPageReference(pageReference, queryParameters, routeDef);
  const queryString = (0, import_uriUtils.getQueryString)(queryObject);
  return `${basePath}${toPathUrl}${queryString}`;
}
function getQueryObjectForParametersAndPageReference(pageReference, queryParameters, routeDef) {
  const {
    compiledQuery,
    original: {
      page: {state: stateBindings = {}}
    }
  } = routeDef;
  const {state: refState = {}} = pageReference || {};
  const nonParamState = {};
  Object.keys(refState).filter((stateKey) => {
    const bindingValue = stateBindings[stateKey];
    return !(0, import_uriUtils.isParam)(bindingValue);
  }).forEach((key) => nonParamState[key] = refState[key]);
  const queryParamKeyValueMap = {};
  Object.keys(queryParameters).forEach((paramName) => {
    const paramValue = queryParameters[paramName];
    const [compiledQueryMatch] = Object.keys(compiledQuery).filter((key) => {
      const compiledValue = compiledQuery[key];
      const {routeParamName} = compiledValue;
      return (0, import_uriUtils.getParamName)(routeParamName) === paramName;
    });
    if (compiledQueryMatch) {
      const queryKey = compiledQueryMatch;
      queryParamKeyValueMap[queryKey] = paramValue;
    }
  });
  return {
    ...nonParamState,
    ...queryParamKeyValueMap
  };
}
function getPageReferenceFromUrl(url, routeDefs, basePath = "") {
  const routingMatch = matchRouteByUrl(url, routeDefs, basePath);
  if (routingMatch && routingMatch.route && routingMatch.route.pageReference) {
    return routingMatch.route.pageReference;
  }
  return null;
}
