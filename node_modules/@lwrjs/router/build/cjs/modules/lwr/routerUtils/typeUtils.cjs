var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/router/src/modules/lwr/routerUtils/typeUtils.ts
__markAsModule(exports);
__export(exports, {
  freeze: () => freeze,
  guid: () => guid,
  isObject: () => isObject,
  isString: () => isString,
  isValidPageReference: () => isValidPageReference,
  isValidRoute: () => isValidRoute
});
function isObject(o) {
  return typeof o === "object" && o !== null && !Array.isArray(o);
}
function isString(o) {
  return typeof o === "string";
}
function objectHasKey(o, key) {
  return key in o;
}
function freeze(o, depthLimit = 2) {
  if (isObject(o)) {
    try {
      Object.freeze(o);
      if (depthLimit > 0) {
        Object.keys(o).forEach((key) => {
          if (objectHasKey(o, key)) {
            const val = o[key];
            if (val && typeof val === "object") {
              freeze(val, depthLimit - 1);
            }
          }
        });
      }
    } catch (e) {
    }
  }
  return o;
}
function guid() {
  return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
}
function isValidRoute(object) {
  const expected = ["id", "attributes", "state", "pageReference"];
  const {pageReference = null} = object || {};
  return isObject(object) && hasExactProperties(object, expected) && isValidPageReference(pageReference);
}
function isValidPageReference(object) {
  const expected = ["type", "state", "attributes"];
  const {type, state, attributes} = object || {};
  const validTypes = isObject(object) && isString(type) && isObject(state) && validNullableString(state) && isObject(attributes) && validNullableString(attributes);
  return hasExactProperties(object, expected) && validTypes;
}
function validNullableString(object) {
  return Object.keys(object).every((key) => {
    const val = object[key];
    return typeof key === "string" && (typeof val === "string" || val === null);
  });
}
function hasExactProperties(object, expectedKeys) {
  if (isObject(object)) {
    const hasAllExpected = expectedKeys.every((expectedKey) => objectHasKey(object, expectedKey));
    const actual = Object.keys(expectedKeys);
    const actualHasNoExtraProperties = actual.length === expectedKeys.length;
    return hasAllExpected && actualHasNoExtraProperties;
  }
  return false;
}
