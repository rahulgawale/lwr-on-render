var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/router/src/modules/lwr/observable/observable.ts
__markAsModule(exports);
__export(exports, {
  createObservable: () => createObservable
});
function createObservable() {
  let currentValue = void 0;
  let currentError = void 0;
  let observers = [];
  const addObserver = (obs) => {
    observers.push(obs);
  };
  const removeObserver = (obsIndex) => {
    observers = [...observers.slice(0, obsIndex), ...observers.slice(obsIndex + 1)];
  };
  const next = (value) => {
    observers.filter((obs) => obs !== null).forEach((obs) => obs.next && obs.next(value));
    currentValue = value;
    currentError = void 0;
  };
  const error = (err) => {
    observers.filter((obs) => obs !== null).forEach((obs) => obs.error && obs.error(err));
    currentValue = void 0;
    currentError = err;
  };
  const complete = () => {
    observers.filter((obs) => obs !== null).forEach((obs) => obs.complete && obs.complete());
    observers = [];
    currentValue = void 0;
    currentError = void 0;
  };
  const subscribe = (obs, replay = true) => {
    addObserver(obs);
    if (currentValue && replay) {
      obs.next(currentValue);
    }
    if (currentError) {
      error(currentError);
    }
    const obsIndex = observers.length - 1;
    return {
      unsubscribe: () => removeObserver(obsIndex)
    };
  };
  return {
    next,
    error,
    complete,
    subscribe
  };
}
