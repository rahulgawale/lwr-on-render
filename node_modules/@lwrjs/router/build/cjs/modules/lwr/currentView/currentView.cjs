var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/modules/lwr/currentView/currentView.ts
__markAsModule(exports);
__export(exports, {
  CurrentView: () => CurrentView
});
var import_contextUtils = __toModule(require("lwr/contextUtils"));
var import_routerErrors = __toModule(require("lwr/routerErrors"));
var CURRENT_VIEW_CONTEXT = new import_contextUtils.ContextInfo(void 0);
var CurrentView = class CurrentView2 extends (0, import_contextUtils.generateContextualWireAdapter)(CURRENT_VIEW_CONTEXT) {
  async update(config, context) {
    if (context) {
      const viewName = config && config.viewName ? config.viewName : "default";
      const viewEntry = context.viewset[viewName];
      const viewInfo = viewEntry;
      const viewImporter = viewInfo && viewInfo.module || viewEntry;
      let importError;
      if (viewImporter) {
        try {
          const viewModule = await viewImporter();
          const newViewCtor = viewModule && viewModule.default;
          if (newViewCtor && newViewCtor.constructor !== void 0) {
            this._callback(newViewCtor);
          } else {
            throw new Error("error occurred with view import");
          }
        } catch (e) {
          const error = e;
          if (viewInfo.specifier) {
            importError = (0, import_routerErrors.generateMessageObject)(import_routerErrors.messages.VIEW_IMPORT_FAILED_WITH_SPECIFIER, [
              viewInfo.specifier,
              viewName,
              error.message,
              error.stack || ""
            ]);
          } else {
            importError = (0, import_routerErrors.generateMessageObject)(import_routerErrors.messages.VIEW_IMPORT_FAILED, [
              viewName,
              error.message,
              error.stack || ""
            ]);
          }
        }
      } else {
        importError = (0, import_routerErrors.generateMessageObject)(import_routerErrors.messages.VIEW_MISSING, [viewName]);
      }
      if (context.onComplete) {
        context.onComplete(importError);
      }
    }
  }
};
