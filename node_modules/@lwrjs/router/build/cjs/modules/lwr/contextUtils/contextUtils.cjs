var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/modules/lwr/contextUtils/contextUtils.ts
__markAsModule(exports);
__export(exports, {
  ContextInfo: () => import_contextInfo.ContextInfo,
  generateContextualWireAdapter: () => generateContextualWireAdapter,
  getNavigationHelm: () => import_navigationApiStore.getNavigationHelm,
  registerNavigationHelm: () => import_navigationApiStore.registerNavigationHelm
});
var import_contextInfo = __toModule(require("./contextInfo"));
var import_navigationApiStore = __toModule(require("./navigationApiStore"));
function generateContextualWireAdapter(contextInstance) {
  var _a;
  const Adapter = (_a = class {
    constructor(callback) {
      this._callback = callback;
    }
    connect() {
    }
    disconnect() {
    }
    update(config, context) {
      if (context) {
        this._callback(context);
      }
    }
    static setContext(targetProvider, contextValue) {
      contextInstance.setContext(targetProvider, contextValue);
    }
    static getContext(targetProvider) {
      return contextInstance.getContext(targetProvider);
    }
    static clearContext(targetProvider) {
      contextInstance.clearContext(targetProvider);
    }
    static subscribeContext(targetProvider, consumer) {
      contextInstance.subscribeContext(targetProvider, consumer);
    }
    static unsubscribeContext(targetProvider, consumer) {
      contextInstance.unsubscribeContext(targetProvider, consumer);
    }
  }, _a.contextSchema = {value: "required"}, _a);
  return Adapter;
}
