var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/router/src/modules/lwr/contextUtils/contextInfo.ts
__markAsModule(exports);
__export(exports, {
  ContextInfo: () => ContextInfo
});
function validateProvider(obj) {
  if (obj === void 0 || obj === null) {
    throw new TypeError("Provider must be defined.");
  }
}
var ContextInfo = class {
  constructor(defaultValue) {
    this.infoMap = new WeakMap();
    this.defaultValue = defaultValue;
  }
  getInfo(targetProvider) {
    let info = this.infoMap.get(targetProvider);
    if (info === void 0) {
      info = {consumers: new Set()};
      this.infoMap.set(targetProvider, info);
    }
    return info;
  }
  setContext(targetProvider, contextValue) {
    validateProvider(targetProvider);
    const value = contextValue;
    const info = this.getInfo(targetProvider);
    info.contextValue = contextValue;
    info.consumers.forEach((consumer) => consumer.provide(value));
    if (info.consumers.size === 0 && value?.onComplete) {
      value.onComplete();
    }
  }
  getContext(targetProvider) {
    validateProvider(targetProvider);
    const {contextValue} = this.getInfo(targetProvider);
    return contextValue !== void 0 ? contextValue : this.defaultValue;
  }
  clearContext(targetProvider) {
    validateProvider(targetProvider);
    this.infoMap.delete(targetProvider);
  }
  subscribeContext(targetProvider, consumer) {
    validateProvider(targetProvider);
    const {consumers, contextValue} = this.getInfo(targetProvider);
    if (!consumers.has(consumer)) {
      consumers.add(consumer);
      consumer.provide(contextValue);
    }
  }
  unsubscribeContext(targetProvider, consumer) {
    validateProvider(targetProvider);
    this.getInfo(targetProvider).consumers.delete(consumer);
  }
};
