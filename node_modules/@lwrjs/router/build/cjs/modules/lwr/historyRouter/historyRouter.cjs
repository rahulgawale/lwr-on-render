var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/modules/lwr/historyRouter/historyRouter.ts
__markAsModule(exports);
__export(exports, {
  HistoryRouter: () => HistoryRouter,
  createHistoryRouter: () => createHistoryRouter
});
var import_domRouter = __toModule(require("lwr/domRouter"));
var import_domRouterUtils = __toModule(require("lwr/domRouterUtils"));
var import_routerUtils = __toModule(require("lwr/routerUtils"));
var HistoryRouter = class extends import_domRouter.DomRouterImpl {
  constructor() {
    super(...arguments);
    this.historyDisabled = false;
  }
  connect() {
    super.connect();
    if (!this.historyDisabled) {
      import_routerUtils.hasDocument && window.addEventListener("popstate", this.onpopstate.bind(this));
      this.onpopstate();
    }
  }
  onpopstate() {
    if (!this.parent && import_routerUtils.hasDocument) {
      this.catchBrowserUpdate((0, import_domRouterUtils.getRelativeUrl)(document.location.href));
    }
  }
  disconnect() {
    super.disconnect();
    import_routerUtils.hasDocument && window.removeEventListener("popstate", this.onpopstate);
  }
  async process(url, shouldReplace, updateHistory = true) {
    const canContinue = await super.process(url);
    if (canContinue && !this.historyDisabled && updateHistory && this.connected && !this.parent) {
      if (shouldReplace) {
        (0, import_domRouterUtils.replace)(url);
      } else {
        (0, import_domRouterUtils.set)(url);
      }
    }
    return canContinue;
  }
  catchBrowserUpdate(url) {
    this.process(url, false, false);
  }
};
function createHistoryRouter(config, router, target) {
  return new HistoryRouter(config, router, target);
}
