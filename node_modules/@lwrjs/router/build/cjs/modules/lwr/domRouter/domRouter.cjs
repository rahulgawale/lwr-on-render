var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/modules/lwr/domRouter/domRouter.ts
__markAsModule(exports);
__export(exports, {
  DomRouterImpl: () => DomRouterImpl,
  NAV_EVENT: () => NAV_EVENT,
  PARENT_EVENT: () => PARENT_EVENT,
  createDomRouter: () => createDomRouter
});
var import_navigation = __toModule(require("lwr/navigation"));
var import_contextProvider = __toModule(require("lwr/contextProvider"));
var import_routerErrors = __toModule(require("lwr/routerErrors"));
var import_routerUtils = __toModule(require("lwr/routerUtils"));
var import_observable = __toModule(require("lwr/observable"));
var import_metrics = __toModule(require("lwr/metrics"));
var import_profiler = __toModule(require("lwr/profiler"));
var import_navigationMixinHacks = __toModule(require("lwr/navigationMixinHacks"));
var NAV_EVENT = `universalcontainernavigationevent${(0, import_routerUtils.guid)()}`;
var PARENT_EVENT = `universalcontainerparentevent${(0, import_routerUtils.guid)()}`;
var DomRouterImpl = class {
  constructor(config, router, target) {
    this.pendingRoute = null;
    this.committedRoute = null;
    this.contextId = Object.freeze(() => void 0);
    this.connected = false;
    this.preNavFilters = (0, import_routerUtils.createFilterChain)();
    this.errorNavFilters = (0, import_routerUtils.createFilterChain)();
    this._handleNavigationEvent = (event) => {
      const navigationEvent = event;
      if (navigationEvent.detail && typeof navigationEvent.detail === "object") {
        const {url, replace, address} = navigationEvent.detail;
        const continueNavigation = this.config.handleNavigation(address, replace);
        if (!continueNavigation) {
          navigationEvent.stopPropagation();
        } else {
          if (this.root && !url) {
            this.root.processError((0, import_routerErrors.generateMessageObject)(import_routerErrors.messages.MISSING_URL, [JSON.stringify(address)]));
          } else if (!this.parent) {
            this.process(url, replace);
          }
        }
      }
    };
    this._handleParentEvent = (event) => {
      event.stopImmediatePropagation();
      const parentRouterEvent = event;
      if (parentRouterEvent && parentRouterEvent.detail && typeof parentRouterEvent.detail === "function") {
        parentRouterEvent.detail(this);
      }
    };
    this.config = {
      handleNavigation: config.handleNavigation || (() => true)
    };
    this.target = target || window;
    this.router = router;
    this.router.contextId = this.contextId;
    this.routeObservable = (0, import_observable.createObservable)();
  }
  get root() {
    if (!this.parent) {
      return this;
    }
    let maybe = this.parent;
    while (maybe) {
      if (!maybe.parent) {
        return maybe;
      }
      maybe = maybe.parent;
    }
    throw new Error("No root router could be found");
  }
  updateWires(result, url, error) {
    if (error) {
      this.processError(error);
    } else {
      if (this.committedRoute && result.route === this.committedRoute.route) {
        return;
      }
      (0, import_profiler.logOperationEnd)({id: import_metrics.ROUTER_VIEW, specifier: this.eventId});
      this.pendingRoute = this.pendingRoute || {...result, url};
      this.committedRoute = {...this.pendingRoute, ...result};
      import_navigation.CurrentPageReference.setContext(this.target, result.route.pageReference);
      this.routeObservable.next({...this.committedRoute, viewset: result.viewset});
      (0, import_profiler.logOperationEnd)({id: import_metrics.ROUTER_NAV, specifier: this.eventId});
      if (this.child) {
        this.child.process(this._stripUrlForChild(this.committedRoute.url));
      }
    }
  }
  connect() {
    this._sendEvent(PARENT_EVENT, (router) => {
      this.parent = router;
      router.addChild(this);
    });
    const contextApi = {
      navigate: (address, replace) => this.navigate(address, replace),
      generateUrl: (address) => this.generateUrl(address),
      subscribe: (callback, replay) => this.subscribe(callback, replay)
    };
    (0, import_navigation.registerNavigationHelm)(this.contextId, contextApi);
    (0, import_contextProvider.provideContext)(this.contextId, this.target, import_contextProvider.navigationContextContextualizer, import_navigation.NavigationContext);
    (0, import_contextProvider.provideContext)(void 0, this.target, import_contextProvider.currentPageReferenceContextualizer, import_navigation.CurrentPageReference);
    (0, import_contextProvider.provideContext)(void 0, this.target, import_contextProvider.currentViewContextualizer, import_navigation.CurrentView);
    this.router.subscribe((result) => {
      const pageReference = result.route.pageReference || {};
      const url = this.router.generateUrl(pageReference) || "";
      (0, import_profiler.logOperationStart)({id: import_metrics.ROUTER_VIEW, specifier: this.eventId});
      if (result.viewset) {
        const currentViewContext = {
          viewset: result.viewset,
          onComplete: this.updateWires.bind(this, result, url)
        };
        import_navigation.CurrentView.setContext(this.target, currentViewContext);
      } else if (result.route.pageReference) {
        this.updateWires(result, url);
      }
    }, true);
    if (import_routerUtils.hasDocument) {
      this.target.addEventListener(NAV_EVENT, this._handleNavigationEvent);
      this.target.addEventListener(PARENT_EVENT, this._handleParentEvent);
      this.target.addEventListener(import_navigationMixinHacks.CONTEXT_ID_BACKDOOR, (event) => {
        const navCtxEvent = event;
        if (navCtxEvent.detail.callback) {
          navCtxEvent.detail.callback(this.contextId);
        }
      });
    }
    this.connected = true;
  }
  disconnect() {
    this.target.removeEventListener(NAV_EVENT, this._handleNavigationEvent);
    this.target.removeEventListener(PARENT_EVENT, this._handleParentEvent);
    if (this.parent) {
      this.parent.child = void 0;
    }
    this.parent = void 0;
    if (this.child) {
      this.child.parent = void 0;
    }
    this.child = void 0;
    this.connected = false;
  }
  addPreNavigate(filters) {
    this.preNavFilters.add(filters);
  }
  addErrorNavigate(filters) {
    this.errorNavFilters.add(filters);
  }
  async addChild(child) {
    await new Promise((resolve) => {
      setTimeout(() => {
        (0, import_routerErrors.invariant)(!this.child, import_routerErrors.messages.MULTIPLE_CHILDREN);
        this.child = child;
        resolve();
      }, 0);
    });
    if (this.child && this.committedRoute) {
      const url = this._stripUrlForChild(this.committedRoute.url);
      const canContinue = await this.child.preProcess(url);
      if (canContinue) {
        this.child.process(url);
      }
    }
  }
  async process(url, replace) {
    this.eventId = new Date().getTime().toString();
    (0, import_profiler.logOperationStart)({id: import_metrics.ROUTER_NAV, specifier: this.eventId});
    try {
      if (!this.parent) {
        await this.preProcess(url);
      }
    } catch (e) {
      if (e.code) {
        this.processError(e);
        return false;
      }
      throw e;
    }
    const address = this.router.parseUrl(url);
    if (address) {
      this.router.navigate(address);
    }
    return true;
  }
  preProcess(url) {
    const address = this.router.parseUrl(url);
    const routingMatch = address && this.router.matchRoute(address);
    if (!routingMatch) {
      return Promise.reject((0, import_routerErrors.generateMessageObject)(import_routerErrors.messages.MISSING_ROUTE, [url]));
    }
    this.pendingRoute = {url, ...routingMatch};
    const canGo = this.preNavFilters.empty() ? Promise.resolve(true) : this.preNavFilters.compile({
      current: this.committedRoute || void 0,
      next: this.pendingRoute
    });
    return canGo.then((canContinue) => {
      return canContinue && this.child ? this.child.preProcess(this._stripUrlForChild(url)) : canContinue;
    }).then((canContinue) => {
      return canContinue || Promise.reject((0, import_routerErrors.generateMessageObject)(import_routerErrors.messages.PRENAV_FAILED, [url]));
    });
  }
  processError(messageObject) {
    (0, import_profiler.logOperationStart)({id: import_metrics.ROUTER_ERROR});
    this.errorNavFilters.compile(messageObject);
    if (this.child) {
      this.child.processError(messageObject);
    }
  }
  navigate(address, replace) {
    let url = this.router.generateUrl(address);
    if (url) {
      const parentPath = this.parent && this.parent.committedRoute && this.parent.committedRoute.pathMatch || "";
      url = parentPath.concat(url);
    }
    this._sendEvent(NAV_EVENT, {url, replace, address});
  }
  generateUrl(address) {
    const url = this.router.generateUrl(address);
    if (!url) {
      return null;
    }
    const parentPath = this.parent && this.parent.committedRoute && this.parent.committedRoute.pathMatch || "";
    return `${parentPath}${url}`;
  }
  subscribe(callback, replay) {
    return this.routeObservable.subscribe({
      next: callback,
      error: () => {
      },
      complete: () => {
      }
    }, Boolean(replay));
  }
  _sendEvent(name, payload) {
    import_routerUtils.hasDocument && this.target.dispatchEvent(new CustomEvent(name, {
      bubbles: true,
      composed: true,
      detail: payload
    }));
  }
  _stripUrlForChild(url) {
    if (this.pendingRoute && url.indexOf(this.pendingRoute.pathMatch) === 0) {
      return url.replace(this.pendingRoute.pathMatch, "");
    }
    return url;
  }
};
function createDomRouter(config, router, target) {
  return new DomRouterImpl(config, router, target);
}
