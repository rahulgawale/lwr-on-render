var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/modules/lwr/routerBridge/routerBridge.ts
__markAsModule(exports);
__export(exports, {
  createBridge: () => createBridge
});
var import_domRouter = __toModule(require("lwr/domRouter"));
var DomRouterBridge = class {
  constructor(config = {}, target = window) {
    this.handleParentEvent = (event) => {
      const parentEvent = event;
      if (parentEvent && parentEvent.detail && typeof parentEvent.detail === "function") {
        parentEvent.detail(this);
        if (this.bridgedRouter) {
          this.bridgedRouter.parent = void 0;
          this.target.removeEventListener(import_domRouter.PARENT_EVENT, this.handleParentEvent);
        }
      }
    };
    this.config = {
      historyDisabled: !!config.historyDisabled,
      onReady: config.onReady || (() => {
      }),
      onPostNavigate: config.onPostNavigate || (() => {
      }),
      onError: config.onError || (() => {
        return true;
      })
    };
    this.target = target;
    this.target.addEventListener(import_domRouter.PARENT_EVENT, this.handleParentEvent);
  }
  async addChild(child) {
    this.bridgedRouter = child;
    this.bridgedRouter.subscribe(({route: {pageReference}}) => {
      this.config.onPostNavigate(pageReference);
    });
    this.bridgedRouter.addErrorNavigate(this.config.onError);
    if (this.config.historyDisabled) {
      this.bridgedRouter.historyDisabled = true;
    }
    await new Promise((resolve) => {
      setTimeout(() => {
        this.config.onReady();
        resolve();
      }, 0);
    });
  }
  navigate(pageRef) {
    if (this.bridgedRouter && this.bridgedRouter.connected) {
      this.bridgedRouter.navigate(pageRef);
      return true;
    }
    return false;
  }
};
function createBridge(config, target) {
  const bridge = new DomRouterBridge(config, target);
  return {
    navigate: bridge.navigate.bind(bridge)
  };
}
