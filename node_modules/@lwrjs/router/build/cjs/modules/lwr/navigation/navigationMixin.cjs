var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/modules/lwr/navigation/navigationMixin.ts
__markAsModule(exports);
__export(exports, {
  NavigationMixin: () => NavigationMixin
});
var import_routerErrors = __toModule(require("lwr/routerErrors"));
var import_navigationApi = __toModule(require("./navigationApi"));
var import_navigationMixinHacks = __toModule(require("lwr/navigationMixinHacks"));
var Navigate = Symbol("Navigate");
var GenerateUrl = Symbol("GenerateUrl");
var NavContext = Symbol("NavContext");
var GetContext = Symbol("NavContext");
function NavigationMixin(Base) {
  (0, import_routerErrors.invariant)(typeof Base.prototype.dispatchEvent === "function", import_routerErrors.messages.INVALID_MIXIN_CMP, [
    Base.toString()
  ]);
  class Mixin extends Base {
    [GetContext]() {
      if (!this[NavContext]) {
        this.dispatchEvent(new CustomEvent(import_navigationMixinHacks.CONTEXT_ID_BACKDOOR, {
          bubbles: true,
          composed: true,
          detail: {
            callback: (contextId) => {
              this[NavContext] = contextId;
            }
          }
        }));
        if (!this[NavContext]) {
          throw new Error((0, import_routerErrors.generateMessage)(import_routerErrors.messages.MISSING_CONTEXT));
        }
      }
    }
    [Navigate](pageRef, replace) {
      this[GetContext]();
      (0, import_navigationApi.navigate)(this[NavContext], pageRef, replace);
    }
    async [GenerateUrl](pageRef) {
      this[GetContext]();
      return (0, import_navigationApi.generateUrl)(this[NavContext], pageRef);
    }
  }
  return Mixin;
}
NavigationMixin.Navigate = Navigate;
NavigationMixin.GenerateUrl = GenerateUrl;
NavigationMixin.NavContext = NavContext;
