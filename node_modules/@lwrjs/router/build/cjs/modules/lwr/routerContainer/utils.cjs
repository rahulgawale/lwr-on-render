var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/modules/lwr/routerContainer/utils.ts
__markAsModule(exports);
__export(exports, {
  createNavigationContext: () => createNavigationContext
});
var import_historyRouter = __toModule(require("lwr/historyRouter"));
var import_routerErrors = __toModule(require("lwr/routerErrors"));
var import_domRouter = __toModule(require("lwr/domRouter"));
var hasRoot = false;
function createNavigationContext(node, config = {}, portableRouter) {
  const newRouter = config.historyDisabled ? new import_domRouter.DomRouterImpl(config, portableRouter, node) : new import_historyRouter.HistoryRouter(config, portableRouter, node);
  const routerAPI = {
    addPreNavigate: (listener) => {
      newRouter.addPreNavigate(listener);
      return routerAPI;
    },
    addPostNavigate: (listener) => {
      newRouter.subscribe(listener);
      return routerAPI;
    },
    addErrorNavigate: (listener) => {
      newRouter.addErrorNavigate(listener);
      return routerAPI;
    },
    connect: () => {
      newRouter.connect();
      (0, import_routerErrors.invariant)(!hasRoot || !!newRouter.parent, import_routerErrors.messages.MULTIPLE_ROOTS);
      hasRoot = hasRoot || !newRouter.parent;
      routerAPI.id = newRouter.contextId;
    },
    disconnect: () => {
      hasRoot = hasRoot && !!newRouter.parent;
      newRouter.disconnect();
    }
  };
  return routerAPI;
}
