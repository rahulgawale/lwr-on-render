var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/services/index.ts
__markAsModule(exports);
__export(exports, {
  DEFAULT_SCHEMA: () => DEFAULT_SCHEMA,
  deleteRouterConfigJsonCacheEntry: () => deleteRouterConfigJsonCacheEntry,
  getClientRoutes: () => getClientRoutes
});
var import_ajv = __toModule(require("ajv"));
var import_fs = __toModule(require("fs"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var DEFAULT_SCHEMA = "pageReference_v1";
var RouteDefinitionSchema = {
  definitions: {
    map: {
      type: "object",
      patternProperties: {
        "^.+$": {type: "string", minLength: 1}
      }
    },
    nullableMap: {
      type: "object",
      patternProperties: {
        "^.+$": {
          anyOf: [{type: "string", minLength: 1}, {type: "null"}]
        }
      }
    },
    specifier: {
      type: "string",
      pattern: "^@?[a-zA-Z_\\d]+[/]{1}[a-z-A-Z_\\d]+$"
    },
    routeDef: {
      type: "object",
      properties: {
        id: {type: "string", minLength: 1},
        uri: {type: "string", minLength: 1},
        patterns: {$ref: "#/definitions/map"},
        exact: {type: "boolean"},
        page: {
          type: "object",
          properties: {
            type: {type: "string", minLength: 1},
            attributes: {$ref: "#/definitions/nullableMap"},
            state: {$ref: "#/definitions/nullableMap"}
          }
        },
        metadata: {},
        handler: {$ref: "#/definitions/specifier"},
        component: {$ref: "#/definitions/specifier"}
      },
      required: ["id", "uri", "page"],
      additionalProperties: false
    }
  },
  type: "object",
  properties: {
    schema: {type: "string", pattern: `^${DEFAULT_SCHEMA}$`},
    basePath: {type: "string", minLength: 1},
    caseSensitive: {type: "boolean"},
    routes: {
      type: "array",
      items: {$ref: "#/definitions/routeDef"}
    }
  },
  required: ["routes"],
  additionalProperties: false
};
var ajv = new import_ajv.default();
var validate = ajv.compile(RouteDefinitionSchema);
var routerConfigJsonCache = new Map();
function deleteRouterConfigJsonCacheEntry(path) {
  routerConfigJsonCache.delete(path);
}
function getClientRoutes(path) {
  if (routerConfigJsonCache.has(path)) {
    return routerConfigJsonCache.get(path);
  }
  if (!(0, import_fs.existsSync)(path)) {
    console.warn("@lwrjs/router services cannot find client route JSON at:", path);
    return void 0;
  }
  try {
    const json = JSON.parse((0, import_shared_utils.readFile)(path));
    if (!validate(json)) {
      throw new Error(ajv.errorsText(validate.errors, {separator: "\n"}));
    }
    const routes = json.routes;
    routes.forEach((route, index) => {
      const {id, handler, component} = route;
      if (routes.findIndex((r) => r.id === id) !== index) {
        throw new Error(`Duplicate route definition id: ${id}`);
      }
      if (handler && component) {
        throw new Error('A route definition cannot contain both "handler" and "component"');
      }
      if (!handler && !component) {
        throw new Error('A route definition must contain either "handler" or "component"');
      }
    });
    routerConfigJsonCache.set(path, json);
    return json;
  } catch (e) {
    throw (0, import_diagnostics.createSingleDiagnosticError)({
      description: import_diagnostics.descriptions.UNRESOLVABLE.ROUTES_MODULE(path, e.message)
    }, import_diagnostics.LwrUnresolvableError);
  }
}
