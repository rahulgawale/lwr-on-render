var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/services/module-provider/utils.ts
__markAsModule(exports);
__export(exports, {
  SPECIFIER_PREFIX: () => SPECIFIER_PREFIX,
  generateModule: () => generateModule,
  getRouterConfigPath: () => getRouterConfigPath,
  parseSpecifier: () => parseSpecifier,
  setUpWatcher: () => setUpWatcher
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var SPECIFIER_PREFIX = "@lwrjs/router/";
function parseSpecifier(specifier) {
  return specifier.startsWith(SPECIFIER_PREFIX) ? specifier.replace(SPECIFIER_PREFIX, "") : void 0;
}
function getRouterConfigPath(dir, specifier) {
  const routerId = parseSpecifier(specifier);
  return `${dir}/${routerId}.json`;
}
function setUpWatcher(onModuleChange) {
  const watcher = (0, import_shared_utils.createFileWatcher)();
  watcher.on("change", (0, import_shared_utils.debounce)((file) => onModuleChange(file), 500));
  watcher.on("unlink", (0, import_shared_utils.debounce)((file) => onModuleChange(file, true), 500));
  watcher.on("add", (file) => import_shared_utils.logger.info(`Watching Router Config file at "${file}"`));
  return watcher;
}
function getHandlerClassName(specifier) {
  return specifier.replace(/\//g, "_").replace("@", "");
}
function generateHandlerClasses(routes) {
  let handlerClasses = "";
  routes.forEach((r) => {
    const component = r.component;
    if (component) {
      handlerClasses += `class ${getHandlerClassName(component)} {
    callback;
    constructor(callback) {
        this.callback = callback;
    }
    dispose() {}
    update() {
        this.callback({
            viewset: {
                default: {
                    module: () => import('${component}'),
                    specifier: '${component}',
                },
            },
        });
    }
}
`;
    }
  });
  return handlerClasses;
}
function generateRouteDefinitions(routes) {
  let routeDefs = "[\n";
  routes.forEach((r) => {
    const {handler, component, ...routeDef} = r;
    const portableProps = JSON.stringify(routeDef);
    if (handler) {
      routeDefs += portableProps.slice(0, portableProps.length - 1) + `, handler: () => import('${handler}') },
`;
    } else if (component) {
      routeDefs += portableProps.slice(0, portableProps.length - 1) + `, handler: () => Promise.resolve({ default: ${getHandlerClassName(component)} }) },
`;
    }
  });
  return `${routeDefs}	]`;
}
function generateModule(config = {routes: []}) {
  const {basePath = "", caseSensitive, routes: jsonRoutes} = config;
  const csString = caseSensitive ? "true" : "false";
  const routes = generateRouteDefinitions(jsonRoutes);
  const handlers = generateHandlerClasses(jsonRoutes);
  return `import { createRouter as createLwrRouter } from 'lwr/router';
${handlers}
export function createRouter({ basePath = '${basePath}', caseSensitive = ${csString} } = {}) {
    return createLwrRouter({ basePath, caseSensitive, routes: ${routes} });
}`;
}
