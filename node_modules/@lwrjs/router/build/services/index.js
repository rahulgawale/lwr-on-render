import Ajv from 'ajv';
import { existsSync } from 'fs';
import { readFile } from '@lwrjs/shared-utils';
import { LwrUnresolvableError, createSingleDiagnosticError, descriptions } from '@lwrjs/diagnostics';
export const DEFAULT_SCHEMA = 'pageReference_v1';
// JSON Schema for the interfaces above
const RouteDefinitionSchema = {
    definitions: {
        map: {
            type: 'object',
            patternProperties: {
                '^.+$': { type: 'string', minLength: 1 },
            },
        },
        nullableMap: {
            type: 'object',
            patternProperties: {
                '^.+$': {
                    anyOf: [{ type: 'string', minLength: 1 }, { type: 'null' }],
                },
            },
        },
        specifier: {
            type: 'string',
            pattern: '^@?[a-zA-Z_\\d]+[/]{1}[a-z-A-Z_\\d]+$',
        },
        routeDef: {
            type: 'object',
            properties: {
                id: { type: 'string', minLength: 1 },
                uri: { type: 'string', minLength: 1 },
                patterns: { $ref: '#/definitions/map' },
                exact: { type: 'boolean' },
                page: {
                    type: 'object',
                    properties: {
                        type: { type: 'string', minLength: 1 },
                        attributes: { $ref: '#/definitions/nullableMap' },
                        state: { $ref: '#/definitions/nullableMap' },
                    },
                },
                metadata: {},
                handler: { $ref: '#/definitions/specifier' },
                component: { $ref: '#/definitions/specifier' },
            },
            required: ['id', 'uri', 'page'],
            additionalProperties: false,
        },
    },
    type: 'object',
    properties: {
        schema: { type: 'string', pattern: `^${DEFAULT_SCHEMA}$` },
        basePath: { type: 'string', minLength: 1 },
        caseSensitive: { type: 'boolean' },
        routes: {
            type: 'array',
            items: { $ref: '#/definitions/routeDef' },
        },
    },
    required: ['routes'],
    additionalProperties: false,
};
const ajv = new Ajv();
const validate = ajv.compile(RouteDefinitionSchema);
// Cache the Router Config JSON objects read from the file system, by file path
const routerConfigJsonCache = new Map();
export function deleteRouterConfigJsonCacheEntry(path) {
    routerConfigJsonCache.delete(path);
}
/**
 * Given a Routes Config path, return the array of Config Route Definitions
 * @param path - A path to a Route Config files
 */
export function getClientRoutes(path) {
    if (routerConfigJsonCache.has(path)) {
        // Cache hit
        return routerConfigJsonCache.get(path);
    }
    // Cache miss, read from file system
    if (!existsSync(path)) {
        console.warn('@lwrjs/router services cannot find client route JSON at:', path);
        return undefined;
    }
    try {
        // Validate the JSON schema
        const json = JSON.parse(readFile(path));
        if (!validate(json)) {
            throw new Error(ajv.errorsText(validate.errors, { separator: '\n' }));
        }
        // Additional validation:
        // 1. Ensure each route definition "id" is unique
        // 2. Ensure each route definition has either a "handler" or a "component", but NOT BOTH
        const routes = json.routes;
        routes.forEach((route, index) => {
            const { id, handler, component } = route;
            if (routes.findIndex((r) => r.id === id) !== index) {
                throw new Error(`Duplicate route definition id: ${id}`);
            }
            if (handler && component) {
                throw new Error('A route definition cannot contain both "handler" and "component"');
            }
            if (!handler && !component) {
                throw new Error('A route definition must contain either "handler" or "component"');
            }
        });
        routerConfigJsonCache.set(path, json); // Cache the JSON
        return json;
    }
    catch (e) {
        throw createSingleDiagnosticError({
            description: descriptions.UNRESOLVABLE.ROUTES_MODULE(path, e.message),
        }, LwrUnresolvableError);
    }
}
//# sourceMappingURL=index.js.map