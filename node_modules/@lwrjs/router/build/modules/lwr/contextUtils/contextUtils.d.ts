import type { ContextConsumer } from 'lwc';
import { ContextInfo } from './contextInfo';
export { ContextInfo };
export type { NavigationHelm } from './navigationApiStore';
export { getNavigationHelm, registerNavigationHelm } from './navigationApiStore';
export interface WireAdapter<TContext, TConfig, TEmit> {
    _callback(value: TEmit): void;
    update(config: TConfig, context: TContext): void;
    connect(): void;
    disconnect(): void;
}
/**
 * Interface for contextual wire adapters to subscribe to context changes
 */
export interface ContextualWireAdapter<TContext, TConfig, TEmit> {
    new (callback: (value: TEmit) => void): WireAdapter<TContext, TConfig, TEmit>;
    setContext: (targetProvider: globalThis.EventTarget, contextValue: TContext) => void;
    getContext: (targetProvider: globalThis.EventTarget) => TContext;
    clearContext: (targetProvider: globalThis.EventTarget) => void;
    subscribeContext: (targetProvider: globalThis.EventTarget, consumer: ContextConsumer) => void;
    unsubscribeContext: (targetProvider: globalThis.EventTarget, consumer: ContextConsumer) => void;
}
export declare function generateContextualWireAdapter<TContext, TConfig = unknown, TEmit = TContext>(contextInstance: ContextInfo<TContext>): ContextualWireAdapter<TContext, TConfig, TEmit>;
//# sourceMappingURL=contextUtils.d.ts.map