/**
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
import { LightningElement } from 'lwc';
import type { RouterApi } from './utils';
import type { MessageObject } from 'lwr/routerUtils';
import type { PageReference, Router, RoutingResult } from 'lwr/router';
import type { RouteChange } from 'lwr/domRouterUtils';
export default class RouterContainer extends LightningElement {
    routerApi?: RouterApi;
    router?: Router<PageReference>;
    historyDisabled: boolean;
    currentTitle: string;
    constructor();
    /**
     * Create a router attached to this component.
     */
    connectedCallback(): void;
    /**
     * The preNavigate hook surfaced as a cancelable CustomEvent.
     * @param {RouteChange} - the current and proposed route information
     */
    preNavigate(routeChange: RouteChange): boolean;
    /**
     * The postNavigate hook surfaced as a CustomEvent.
     * @param {RoutingResult} - the resulting navigation information
     */
    postNavigate(routingResult: RoutingResult): void;
    /**
     * The errorNavigate hook surfaced as a CustomEvent.
     * @param {MessageObject} - error, the error encountered while navigating (if applicable)
     */
    errorNavigate(error: MessageObject): boolean;
    /**
     * The preNavigate hook surfaced as a cancelable CustomEvent.
     * @param {object} - address: The address being navigated to
     * @param {boolean} - shouldReplace
     */
    handleNavigation(address: PageReference, replace?: boolean): boolean;
    /**
     * Disconnect the router after DOM removal.
     */
    disconnectedCallback(): void;
    private _createEvent;
}
export type { RouteChange } from 'lwr/domRouterUtils';
//# sourceMappingURL=routerContainer.d.ts.map