import { LightningElement, api, wire } from 'lwc';
import { CurrentView } from 'lwr/navigation';
export default class Outlet extends LightningElement {
  @api
  refocusOff = false;
  @api
  outletErrorCallback;
  @api
  viewName = 'default';
  viewCtor = undefined;
  previousViewCtor = undefined;
  hasError = false; // Get a reference to the current view

  @wire(CurrentView, {
    viewName: '$viewName'
  })
  setView(currentView) {
    this.hasError = false;
    this.viewCtor = currentView;
    this.refocus();
  }

  renderedCallback() {
    if (this.viewCtor !== this.previousViewCtor) {
      this.previousViewCtor = this.viewCtor;
      const viewChangedEvent = new CustomEvent('viewchange', {
        detail: this.viewCtor
      });
      this.dispatchEvent(viewChangedEvent);
    }
  }

  errorCallback(e, stack) {
    // when hosted view has unhandled error thrown:
    //  - display the error slot
    //  - dispatch the "viewchange" event
    //  - call the outletErrorCallback()
    this.hasError = true;
    const viewErrorEvent = new CustomEvent('viewerror', {
      detail: {
        error: e,
        stack
      }
    });
    this.dispatchEvent(viewErrorEvent);

    if (this.outletErrorCallback) {
      this.outletErrorCallback(e, stack);
    } else {
      console.error(e);
    }
  }

  refocus() {
    // If the feature is not turned off, put the browser focus onto the dynamic content.
    // This is done after a route change for accessibility.
    if (!this.refocusOff) {
      // TODO: LightningElement template type 'ShadowRootTheGoodPart' does not contain
      // a querySelector function, neccessitating 'any'
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      this.template.querySelector(`div[role='region']`).focus();
    }
  }

}