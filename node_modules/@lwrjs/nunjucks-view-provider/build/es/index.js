import path from 'path';
import nunjucks from 'nunjucks';
import grayMatter from 'gray-matter';
import { getViewSourceFromFile, canResolveView, setupWatcher } from '@lwrjs/shared-utils';
import { NunjucksCustomLoader, addHelperMethods } from './nunjucks-env-utils.js';
export default class NunJucksViewProvider {
    constructor(pluginConfig, providerConfig) {
        this.watcherViewMap = new Map();
        this.routes = providerConfig.config.routes;
        this.contentDir = providerConfig.config.contentDir;
        this.layoutsDir = providerConfig.config.layoutsDir;
        this.rootDir = providerConfig.config.rootDir;
        this.name = 'lwr-nunjucks-view-provider';
        this.emitter = providerConfig.appEmitter;
        // Setup watcher
        const { runtimeEnvironment: { watchFiles }, } = providerConfig;
        if (watchFiles) {
            this.watcher = setupWatcher(this.onViewChange.bind(this));
        }
    }
    async onViewChange(fileChanged) {
        const cachedView = this.watcherViewMap.get(fileChanged);
        if (!cachedView) {
            throw new Error('We are observing a file we have not yet processed, this shouldnt happen...');
        }
        const compiledView = await this.getView(cachedView.viewId);
        if (!compiledView) {
            throw new Error('Unable to get compiledView');
        }
        this.emitter.notifyViewSourceChanged(compiledView);
    }
    // -- Public API --------------------------------------------------------------------
    async initialize() {
        return;
    }
    watchView(fullPath, viewId) {
        if (this.watcher && !this.watcherViewMap.has(fullPath)) {
            this.watcherViewMap.set(fullPath, { viewId });
            this.watcher.add(fullPath);
        }
    }
    async getView(viewId) {
        // This View Provider can't handle SPAs
        if (viewId.rootComponent) {
            return;
        }
        // Ensure source file is resolvable and in nunjucks format
        const sourcePath = viewId.contentTemplate;
        if (!sourcePath || !canResolveView(sourcePath, 'njk')) {
            return;
        }
        // Retrieve the file contents and create the Compiled View
        const sourceDir = path.dirname(sourcePath);
        const viewSource = getViewSourceFromFile(sourcePath);
        const { content, data } = grayMatter(viewSource.originalSource);
        const { contentDir, layoutsDir, rootDir, watcher } = this;
        // In order to resolve relative paths for Nunjucks, we need to create a CustomLoader per View discovered
        // Although we could reuse it, the perf is negligible and the code its cleaner this way
        const nunjucksCustomLoader = new NunjucksCustomLoader({ contentDir, layoutsDir, rootDir, sourceDir });
        if (watcher) {
            nunjucksCustomLoader.on('import', (importFile) => this.watchView(importFile, viewId));
        }
        const nunjucksEnv = new nunjucks.Environment(nunjucksCustomLoader);
        addHelperMethods(nunjucksEnv);
        const nunjucksView = nunjucks.compile(content, nunjucksEnv);
        /*
            The nunjucks templating allows mutable constructs to be embedded in a template's content.
            For example:
                https://mozilla.github.io/nunjucks/templating.html#random
                https://mozilla.github.io/nunjucks/templating.html#cycler-item1-item2-itemn

            Due to this capability, the templates that leverage these features, can and should mark the
            template as mutable in the content's grayMatter metadata section.
                ---
                immutable: false
                ---
            The View registry will modify the cachablilty of this rendered content.
            */
        const { layoutTemplate, immutable, ...nonLwrManagedMetadata } = data;
        const compiledView = {
            ...viewSource,
            viewId,
            layoutTemplate,
            immutable,
            properties: {
                ...nonLwrManagedMetadata,
            },
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            render: async (context) => {
                return {
                    renderedView: nunjucksView.render(context || {}),
                };
            },
        };
        // Watch for changes
        const fullPath = path.resolve(sourcePath);
        if (watcher) {
            this.watchView(fullPath, viewId);
        }
        return compiledView;
    }
}
//# sourceMappingURL=index.js.map