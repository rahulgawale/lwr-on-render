import path from 'path';
import { hashContent, readFile } from '@lwrjs/shared-utils';
import { resolveNpmModuleSpecifier } from './resolveNpmModules.js';
import { resolveNpmModuleSpecifierDeprecated } from './resolveNpmModulesDeprecated.js';
export default class NpmModuleProvider {
    constructor(providerConfig = {}, { config: { cacheDir } }) {
        this.name = 'npm-module-provider';
        this.moduleEntryVersionCache = new Map();
        this.webModulesCacheDir = path.join(cacheDir, 'web_modules');
        this.providerConfig = providerConfig;
    }
    async getModule(moduleId) {
        const moduleSource = await this.getModuleSource(moduleId);
        if (!moduleSource) {
            return;
        }
        return {
            ...moduleSource,
            compiledSource: moduleSource.originalSource,
        };
    }
    async getModuleSource(moduleId) {
        const moduleEntry = await this.getModuleEntry(moduleId);
        if (!moduleEntry) {
            return;
        }
        const { namespace, name } = moduleId;
        const { id, specifier, entry, version } = moduleEntry;
        const originalSource = readFile(entry);
        const ownHash = hashContent(originalSource);
        return {
            id,
            namespace,
            name: name || specifier,
            version,
            specifier,
            moduleEntry,
            ownHash,
            originalSource,
        };
    }
    async getModuleEntry({ specifier, version }) {
        // Check cache
        if (version && this.moduleEntryVersionCache.has(specifier)) {
            const versions = this.moduleEntryVersionCache.get(specifier);
            if (versions.has(version)) {
                return versions.get(version);
            }
        }
        const resolveNpm = this.providerConfig.useCompatResolution
            ? resolveNpmModuleSpecifierDeprecated
            : resolveNpmModuleSpecifier;
        const moduleEntry = await resolveNpm(specifier, this.webModulesCacheDir, this.providerConfig);
        if (!moduleEntry) {
            return;
        }
        // Store in cache
        let specifierVersions = this.moduleEntryVersionCache.get(specifier);
        if (!specifierVersions) {
            specifierVersions = new Map();
            this.moduleEntryVersionCache.set(specifier, specifierVersions);
        }
        specifierVersions.set(moduleEntry.version, moduleEntry);
        return moduleEntry;
    }
}
//# sourceMappingURL=index.js.map