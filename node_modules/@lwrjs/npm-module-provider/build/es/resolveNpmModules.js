import { join } from 'path';
import resolve from 'resolve';
import esbuildEsm from 'esbuild';
import NodeModulesPolyfills from '@esbuild-plugins/node-modules-polyfill';
// Workaround until this is fixed:
// https://github.com/evanw/esbuild/issues/706
let esbuild = esbuildEsm;
if (!esbuildEsm) {
    try {
        esbuild = require('esbuild');
    }
    catch {
        /* this is to support mjs/cjs dual impl */
    }
}
const NodePolyfillsPlugin = NodeModulesPolyfills.default || NodeModulesPolyfills;
const ExternalsPlugin = function ({ external }) {
    return {
        name: 'replace-extension-plugin',
        setup(build) {
            build.onResolve({ filter: /.*/ }, ({ path, importer }) => {
                if (importer && external && external.includes(path)) {
                    return { path, external: true };
                }
            });
        },
    };
};
export async function resolveNpmModuleSpecifierBlock(specifier, dest, config) {
    try {
        let pkgVersion;
        const res = resolve.sync(specifier, {
            packageFilter: function (pkg) {
                const { exports, browser } = pkg;
                if (exports && exports['.']) {
                    const root = exports['.'];
                    const browserExports = root.browser && typeof root.browser === 'object'
                        ? root.browser.import || root.browser.default
                        : root.browser;
                    pkg.main = browserExports || root.import || root.default;
                }
                else if (browser && typeof browser === 'string') {
                    pkg.main = pkg.browser;
                }
                else if (pkg.module) {
                    pkg.main = pkg.module;
                }
                // grab package.json version before we go
                pkgVersion = pkg.version;
                return pkg;
            },
        });
        // ensure package version is set
        if (pkgVersion === undefined) {
            throw new Error('Failed to find version in package.json');
        }
        const outfile = join(dest, specifier, '_bundle.js');
        const cacheKey = `${specifier}@${pkgVersion}`;
        await esbuild.build({
            entryPoints: [res],
            format: 'esm',
            bundle: true,
            write: true,
            platform: 'browser',
            mainFields: ['browser', 'module', 'main'],
            outfile: outfile,
            define: {
                'process.env.NODE_ENV': JSON.stringify('production'),
            },
            plugins: [ExternalsPlugin(config), NodePolyfillsPlugin()],
        });
        return {
            id: cacheKey,
            entry: outfile,
            specifier,
            version: pkgVersion,
        };
    }
    catch (err) {
        console.log('[ERROR]resolveNpmModules(esbuild): ', { specifier, dest });
    }
}
class Queue {
    constructor() {
        this.queue = [];
        this.workingOnPromise = false;
        this.pendingPromise = false;
    }
    enqueue(promise) {
        return new Promise((resolve, reject) => {
            this.queue.push({ promise, resolve, reject });
            this.dequeue();
        });
    }
    dequeue() {
        if (this.workingOnPromise) {
            return false;
        }
        const item = this.queue.shift();
        if (!item) {
            return false;
        }
        this.workingOnPromise = true;
        try {
            item.promise()
                .then((value) => {
                this.workingOnPromise = false;
                item.resolve(value);
                this.dequeue();
            })
                .catch((err) => {
                this.workingOnPromise = false;
                item.reject(err);
                this.dequeue();
            });
        }
        catch (err) {
            this.workingOnPromise = false;
            item.reject(err);
            this.dequeue();
        }
        return true;
    }
}
const RESOLVER_QUEUE = new Queue();
export async function resolveNpmModuleSpecifier(specifier, dest, config) {
    return RESOLVER_QUEUE.enqueue(resolveNpmModuleSpecifierBlock.bind(null, specifier, dest, config));
}
//# sourceMappingURL=resolveNpmModules.js.map