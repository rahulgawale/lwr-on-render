var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/npm-module-provider/src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_path = __toModule(require("path"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_resolveNpmModules = __toModule(require("./resolveNpmModules.cjs"));
var import_resolveNpmModulesDeprecated = __toModule(require("./resolveNpmModulesDeprecated.cjs"));
var NpmModuleProvider = class {
  constructor(providerConfig = {}, {config: {cacheDir}}) {
    this.name = "npm-module-provider";
    this.moduleEntryVersionCache = new Map();
    this.webModulesCacheDir = import_path.default.join(cacheDir, "web_modules");
    this.providerConfig = providerConfig;
  }
  async getModule(moduleId) {
    const moduleSource = await this.getModuleSource(moduleId);
    if (!moduleSource) {
      return;
    }
    return {
      ...moduleSource,
      compiledSource: moduleSource.originalSource
    };
  }
  async getModuleSource(moduleId) {
    const moduleEntry = await this.getModuleEntry(moduleId);
    if (!moduleEntry) {
      return;
    }
    const {namespace, name} = moduleId;
    const {id, specifier, entry, version} = moduleEntry;
    const originalSource = (0, import_shared_utils.readFile)(entry);
    const ownHash = (0, import_shared_utils.hashContent)(originalSource);
    return {
      id,
      namespace,
      name: name || specifier,
      version,
      specifier,
      moduleEntry,
      ownHash,
      originalSource
    };
  }
  async getModuleEntry({specifier, version}) {
    if (version && this.moduleEntryVersionCache.has(specifier)) {
      const versions = this.moduleEntryVersionCache.get(specifier);
      if (versions.has(version)) {
        return versions.get(version);
      }
    }
    const resolveNpm = this.providerConfig.useCompatResolution ? import_resolveNpmModulesDeprecated.resolveNpmModuleSpecifierDeprecated : import_resolveNpmModules.resolveNpmModuleSpecifier;
    const moduleEntry = await resolveNpm(specifier, this.webModulesCacheDir, this.providerConfig);
    if (!moduleEntry) {
      return;
    }
    let specifierVersions = this.moduleEntryVersionCache.get(specifier);
    if (!specifierVersions) {
      specifierVersions = new Map();
      this.moduleEntryVersionCache.set(specifier, specifierVersions);
    }
    specifierVersions.set(moduleEntry.version, moduleEntry);
    return moduleEntry;
  }
};
var src_default = NpmModuleProvider;
