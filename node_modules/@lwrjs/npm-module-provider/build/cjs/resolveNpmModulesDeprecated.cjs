var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/npm-module-provider/src/resolveNpmModulesDeprecated.ts
__markAsModule(exports);
__export(exports, {
  resolveNpmModuleSpecifierBlock: () => resolveNpmModuleSpecifierBlock,
  resolveNpmModuleSpecifierDeprecated: () => resolveNpmModuleSpecifierDeprecated
});
var import_path = __toModule(require("path"));
var import_esinstall = __toModule(require("esinstall"));
var import_fs = __toModule(require("fs"));
var import_resolve = __toModule(require("resolve"));
function getPkgVersion(specifier) {
  const pkgPath = import_resolve.default.sync((0, import_path.join)(specifier, "/package.json"));
  return JSON.parse((0, import_fs.readFileSync)(pkgPath, "utf-8")).version;
}
function readModuleMapping(moduleMappingPath) {
  return (0, import_fs.existsSync)(moduleMappingPath) ? JSON.parse((0, import_fs.readFileSync)(moduleMappingPath, "utf-8")) : {imports: {}};
}
function writeModuleMapping(loc, importMap) {
  (0, import_fs.writeFileSync)(loc, JSON.stringify(importMap, void 0, 2), {encoding: "utf-8"});
}
async function resolveNpmModuleSpecifierBlock(specifier, dest, config) {
  try {
    const tmpFolder = (0, import_path.join)(dest, "__tmp", specifier.replace(/[/|@]/g, "_"));
    (0, import_fs.mkdirSync)(tmpFolder, {recursive: true});
    const moduleMappingPath = (0, import_path.join)(dest, "import-map-cache.json");
    const currentModuleMapping = readModuleMapping(moduleMappingPath);
    const version = getPkgVersion(specifier);
    const cacheKey = `${specifier}@${version}`;
    if (currentModuleMapping.imports[cacheKey]) {
      return {
        id: cacheKey,
        specifier,
        entry: currentModuleMapping.imports[cacheKey],
        version
      };
    }
    const external = config.external?.filter((e) => e !== specifier) || [];
    const polyfillNode = config.polyfillNode ?? true;
    await (0, import_esinstall.install)([specifier], {
      dest: tmpFolder,
      importMap: currentModuleMapping,
      logger: {
        debug: () => void 0,
        log: () => void 0,
        warn: () => void 0,
        error: () => void 0
      },
      polyfillNode,
      external
    });
    const moduleMapping = readModuleMapping((0, import_path.join)(tmpFolder, "import-map.json"));
    const moduleRelativePath = moduleMapping.imports[specifier];
    const moduleAbsPath = (0, import_path.join)(tmpFolder, moduleRelativePath);
    const moduleEntry = (0, import_path.join)(dest, moduleRelativePath);
    (0, import_fs.mkdirSync)((0, import_path.dirname)(moduleEntry), {recursive: true});
    (0, import_fs.copyFileSync)(moduleAbsPath, moduleEntry);
    const mergedMapping = {
      imports: {
        ...currentModuleMapping.imports,
        [cacheKey]: moduleEntry
      }
    };
    writeModuleMapping(moduleMappingPath, mergedMapping);
    return {
      id: cacheKey,
      entry: moduleEntry,
      specifier,
      version
    };
  } catch (err) {
    console.log("[ERROR]resolveNpmModules(esinstall): ", {specifier, dest});
  }
}
var Queue = class {
  constructor() {
    this.queue = [];
    this.workingOnPromise = false;
    this.pendingPromise = false;
  }
  enqueue(promise) {
    return new Promise((resolve2, reject) => {
      this.queue.push({promise, resolve: resolve2, reject});
      this.dequeue();
    });
  }
  dequeue() {
    if (this.workingOnPromise) {
      return false;
    }
    const item = this.queue.shift();
    if (!item) {
      return false;
    }
    this.workingOnPromise = true;
    try {
      item.promise().then((value) => {
        this.workingOnPromise = false;
        item.resolve(value);
        this.dequeue();
      }).catch((err) => {
        this.workingOnPromise = false;
        item.reject(err);
        this.dequeue();
      });
    } catch (err) {
      this.workingOnPromise = false;
      item.reject(err);
      this.dequeue();
    }
    return true;
  }
};
var RESOLVER_QUEUE = new Queue();
async function resolveNpmModuleSpecifierDeprecated(specifier, dest, config) {
  return RESOLVER_QUEUE.enqueue(resolveNpmModuleSpecifierBlock.bind(null, specifier, dest, config));
}
