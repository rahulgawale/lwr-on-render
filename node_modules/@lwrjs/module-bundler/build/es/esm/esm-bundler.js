import { rollup } from 'rollup';
import { bundleDefinitions } from './rollup-esm-bundler-plugin.js';
export async function esmBundler(moduleId, moduleRegistry, runtimeEnvironment, runtimeParams = {}, lwrConfig, bundleConfigOverride) {
    const { exclude, external = {}, alias = {} } = bundleConfigOverride ?? lwrConfig.bundleConfig;
    const { sourceMapUrl } = runtimeEnvironment;
    const requiredImports = new Map();
    const dynamicImports = new Map();
    const rootModuleDef = await moduleRegistry.getLinkedModule(moduleId, runtimeEnvironment, runtimeParams);
    const bundle = await rollup({
        input: moduleId.specifier,
        plugins: [
            bundleDefinitions({
                rootModuleDef,
                runtimeEnvironment,
                moduleRegistry,
                exclude,
                alias,
                runtimeParams,
                requiredImports,
                dynamicImports,
            }),
        ],
        makeAbsoluteExternalsRelative: 'ifRelativeSource', // Fix for breaking changes in https://github.com/rollup/rollup/pull/4021
    });
    const result = await bundle.generate({
        paths: (id) => {
            // The fallback on id is important due to a rollup semantic issue:
            // https://github.com/rollup/rollup/issues/3831
            return external[id] || id;
        },
        sourcemap: true,
    });
    const bundleCode = result.output[0].code;
    const bundleMap = result.output[0].map;
    const code = sourceMapUrl ? `${bundleCode}\n//# sourceMappingURL=${sourceMapUrl}` : bundleCode;
    const { id, specifier, namespace, name, version } = rootModuleDef;
    return {
        id,
        specifier,
        namespace,
        name,
        version,
        code,
        config: { external, exclude },
        map: bundleMap,
        bundleRecord: {
            imports: Array.from(requiredImports.values()),
            dynamicImports: Array.from(dynamicImports.values()),
            includedModules: [],
        },
    };
}
//# sourceMappingURL=esm-bundler.js.map