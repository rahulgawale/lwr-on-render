import { AbstractModuleId, BundleConfig, BundleDefinition, LwrAppObserver, ModuleBundler, ModuleRegistry, NormalizedLwrGlobalConfig, RuntimeParams, SourceMapRuntimeEnvironment, Compiler } from '@lwrjs/types';
interface LwrModuleBundlerConfig {
    compiler: Compiler;
    moduleRegistry: ModuleRegistry;
    appObserver?: LwrAppObserver;
}
export declare class LwrModuleBundler implements ModuleBundler {
    compiler: Compiler;
    moduleRegistry: ModuleRegistry;
    appObserver: LwrAppObserver | undefined;
    config: NormalizedLwrGlobalConfig;
    cache: Map<string, BundleDefinition>;
    private inflightBundleDefinitions;
    constructor(config: LwrModuleBundlerConfig, globalConfig: NormalizedLwrGlobalConfig);
    getModuleBundle<T extends AbstractModuleId>(moduleId: T, runtimeEnvironment: SourceMapRuntimeEnvironment, runtimeParams?: RuntimeParams, bundleConfigOverrides?: BundleConfig): Promise<BundleDefinition>;
}
export {};
//# sourceMappingURL=index.d.ts.map