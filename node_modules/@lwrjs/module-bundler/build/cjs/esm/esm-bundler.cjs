var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-bundler/src/esm/esm-bundler.ts
__markAsModule(exports);
__export(exports, {
  esmBundler: () => esmBundler
});
var import_rollup = __toModule(require("rollup"));
var import_rollup_esm_bundler_plugin = __toModule(require("./rollup-esm-bundler-plugin.cjs"));
async function esmBundler(moduleId, moduleRegistry, runtimeEnvironment, runtimeParams = {}, lwrConfig, bundleConfigOverride) {
  const {exclude, external = {}, alias = {}} = bundleConfigOverride ?? lwrConfig.bundleConfig;
  const {sourceMapUrl} = runtimeEnvironment;
  const requiredImports = new Map();
  const dynamicImports = new Map();
  const rootModuleDef = await moduleRegistry.getLinkedModule(moduleId, runtimeEnvironment, runtimeParams);
  const bundle = await (0, import_rollup.rollup)({
    input: moduleId.specifier,
    plugins: [
      (0, import_rollup_esm_bundler_plugin.bundleDefinitions)({
        rootModuleDef,
        runtimeEnvironment,
        moduleRegistry,
        exclude,
        alias,
        runtimeParams,
        requiredImports,
        dynamicImports
      })
    ],
    makeAbsoluteExternalsRelative: "ifRelativeSource"
  });
  const result = await bundle.generate({
    paths: (id2) => {
      return external[id2] || id2;
    },
    sourcemap: true
  });
  const bundleCode = result.output[0].code;
  const bundleMap = result.output[0].map;
  const code = sourceMapUrl ? `${bundleCode}
//# sourceMappingURL=${sourceMapUrl}` : bundleCode;
  const {id, specifier, namespace, name, version} = rootModuleDef;
  return {
    id,
    specifier,
    namespace,
    name,
    version,
    code,
    config: {external, exclude},
    map: bundleMap,
    bundleRecord: {
      imports: Array.from(requiredImports.values()),
      dynamicImports: Array.from(dynamicImports.values()),
      includedModules: []
    }
  };
}
