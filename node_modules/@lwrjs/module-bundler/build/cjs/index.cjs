var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-bundler/src/index.ts
__markAsModule(exports);
__export(exports, {
  LwrModuleBundler: () => LwrModuleBundler
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_amd_bundler = __toModule(require("./amd/amd-bundler.cjs"));
var import_esm_bundler = __toModule(require("./esm/esm-bundler.cjs"));
var TASK_POOL = new import_shared_utils.TaskPool();
var LwrModuleBundler = class {
  constructor(config, globalConfig) {
    this.cache = new Map();
    this.inflightBundleDefinitions = new import_shared_utils.InflightTasks();
    this.config = globalConfig;
    this.moduleRegistry = config.moduleRegistry;
    this.appObserver = config.appObserver;
    this.compiler = config.compiler;
    this.appObserver?.onModuleDefinitionChange(() => {
      this.cache.clear();
    });
  }
  async getModuleBundle(moduleId, runtimeEnvironment, runtimeParams = {}, bundleConfigOverrides) {
    const {moduleRegistry} = this;
    const {format, minify, debug} = runtimeEnvironment;
    const cacheKey = `${moduleId.specifier}|${moduleId.version}|${(0, import_shared_utils.getCacheKeyFromJson)({
      locale: runtimeParams.locale,
      format,
      minify,
      debug,
      bundleConfigOverrides
    })}`;
    const cacheDisabled = process.env.NOCACHE === "true";
    if (!cacheDisabled) {
      if (this.cache.has(cacheKey)) {
        const bundleDef = this.cache.get(cacheKey);
        return bundleDef;
      }
    }
    return this.inflightBundleDefinitions.execute(cacheKey, () => {
      return TASK_POOL.execute(async () => {
        const pendingBundleDef = format === "amd" ? (0, import_amd_bundler.amdBundler)(moduleId, moduleRegistry, runtimeEnvironment, runtimeParams, this.config, bundleConfigOverrides) : (0, import_esm_bundler.esmBundler)(moduleId, moduleRegistry, runtimeEnvironment, runtimeParams, this.config, bundleConfigOverrides);
        pendingBundleDef.then(async (bundleDef) => {
          const minified = !!minify && !debug;
          if (minified) {
            bundleDef.code = (await this.compiler.minifyJavascript(bundleDef.code)).code;
          }
          if (!cacheDisabled) {
            this.cache.set(cacheKey, bundleDef);
          }
          return bundleDef;
        });
        return pendingBundleDef;
      }, this);
    });
  }
};
