var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-bundler/src/amd/amd-bundler.ts
__markAsModule(exports);
__export(exports, {
  amdBundler: () => amdBundler
});
var import_compiler = __toModule(require("@lwrjs/compiler"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_rollup = __toModule(require("rollup"));
var import_rollup_amd_bundler_plugin = __toModule(require("./rollup-amd-bundler-plugin.cjs"));
async function bundle(id, moduleGraphs) {
  const bundler = await (0, import_rollup.rollup)({
    input: id,
    plugins: [
      (0, import_rollup_amd_bundler_plugin.bundleDefinitions)({
        moduleGraphs
      })
    ]
  });
  const {output} = await bundler.generate({
    amd: {id, define: import_compiler.AMD_DEFINE},
    exports: "named",
    format: "amd"
  });
  return output[0].code;
}
async function amdBundler(moduleId, moduleRegistry, runtimeEnvironment, runtimeParams = {}, {bundleConfig, amdLoader}, bundleConfigOverride) {
  const {exclude, external} = bundleConfigOverride ?? bundleConfig;
  const requiredImports = new Map();
  const dynamicImports = new Map();
  const includedModules = [];
  const graphOptions = {
    includeLinkedDefinitions: true,
    depth: {
      static: import_shared_utils.GraphDepth.ALL,
      dynamic: 0,
      includeId: (moduleRef) => {
        if (exclude?.includes(moduleRef.specifier) || moduleRef.specifier === amdLoader) {
          requiredImports.set(`${moduleId.specifier}_${moduleId.version}`, moduleRef);
          return false;
        }
        return true;
      }
    }
  };
  const moduleGraphs = await (0, import_shared_utils.getModuleGraphs)(moduleId.specifier, graphOptions, moduleRegistry, moduleRegistry, runtimeEnvironment, runtimeParams);
  const rootModule = moduleGraphs.graphs[0];
  const modules = [rootModule.specifier, ...moduleGraphs.graphs[0].static];
  const bundles = await Promise.all(modules.reduce((filteredModules, specifier2) => {
    const linkedDefinition = moduleGraphs.linkedDefinitions[specifier2];
    if (!linkedDefinition) {
      return filteredModules;
    }
    linkedDefinition.linkedModuleRecord.dynamicImports?.forEach((dynamicImport) => {
      if (dynamicImport.moduleNameType !== "unresolved") {
        dynamicImports.set(`${dynamicImport.specifier}_${dynamicImport.version}`, dynamicImport);
      }
    });
    if (specifier2.includes("#")) {
      return filteredModules;
    }
    filteredModules.unshift(linkedDefinition);
    return filteredModules;
  }, []).map((linkedDefinition) => {
    const id2 = (0, import_shared_utils.getSpecifier)(linkedDefinition);
    if (id2 !== rootModule.specifier) {
      includedModules.push(id2);
    }
    return bundle(id2, moduleGraphs);
  }));
  const {id, name, namespace, version, specifier} = moduleGraphs.linkedDefinitions[rootModule.specifier];
  return {
    id,
    name,
    namespace,
    version,
    specifier,
    code: bundles.join(""),
    config: {external, exclude},
    bundleRecord: {
      imports: Array.from(requiredImports.values()),
      dynamicImports: Array.from(dynamicImports.values()),
      includedModules
    }
  };
}
