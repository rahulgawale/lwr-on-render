var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/fs-asset-provider/src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_shared_utils2 = __toModule(require("@lwrjs/shared-utils"));
function hash(filePath) {
  const result = import_fs.default.statSync(filePath);
  return (result.mtimeMs * 1e4).toString();
}
var FsAssetProvider = class {
  constructor(pluginConfig, providerConfig) {
    this.name = "fs-asset-provider";
    this.cachedAssets = new Map();
    const {
      appEmitter,
      runtimeEnvironment: {watchFiles}
    } = providerConfig;
    this.emitter = appEmitter;
    if (watchFiles) {
      this.watcher = (0, import_shared_utils2.setupWatcher)(this.onModuleChange.bind(this));
    }
  }
  async onModuleChange(fileChanged) {
    let cachedAsset = this.cachedAssets.get(fileChanged);
    if (!cachedAsset) {
      throw new Error("We are observing a file we have not yet processed, this shouldn't happen...");
    }
    this.cachedAssets.delete(fileChanged);
    cachedAsset = await this.getAsset(fileChanged);
    this.emitter.notifyAssetSourceChanged(cachedAsset);
  }
  async initialize() {
    return;
  }
  async getAsset(fullAssetPath) {
    fullAssetPath = decodeURI(fullAssetPath);
    if (!this.cachedAssets.has(fullAssetPath)) {
      const [assetPath] = fullAssetPath.split("?");
      const ext = (0, import_path.extname)(`x.${assetPath}`).toLowerCase().substr(1);
      if (ext && import_fs.default.existsSync(assetPath)) {
        const ownHash = hash(assetPath);
        const mimeType = (0, import_shared_utils.mimeLookup)(assetPath);
        const assetDef = {
          entry: assetPath,
          ext,
          mime: mimeType,
          ownHash,
          content: (passedEncoding) => {
            const encoding = passedEncoding || (mimeType && mimeType.startsWith("text/") ? "utf-8" : null);
            return import_fs.default.readFileSync(assetPath, {encoding});
          }
        };
        this.cachedAssets.set(fullAssetPath, assetDef);
        if (this.watcher) {
          this.watcher.add(assetPath);
        }
      }
    }
    return this.cachedAssets.get(fullAssetPath);
  }
};
var src_default = FsAssetProvider;
