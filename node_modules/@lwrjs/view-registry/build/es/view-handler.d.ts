import { ViewRegistry, RuntimeEnvironment, NormalizedLwrGlobalConfig, ViewRequest, RuntimeParams, ViewResponse, LwrErrorRoute, LwrRoute, ModuleRegistry, RouteHandlerFunction } from '@lwrjs/types';
export interface ViewHandlerContext {
    viewRegistry: ViewRegistry;
    moduleRegistry: ModuleRegistry;
}
export declare class LwrViewHandler {
    viewRegistry: ViewRegistry;
    moduleRegistry: ModuleRegistry;
    globalConfig: NormalizedLwrGlobalConfig;
    inflightRouteHandlerEvalMap: Map<string, Promise<RouteHandlerFunction>>;
    routeHandlerFunctionMap: Map<string, RouteHandlerFunction>;
    constructor(context: ViewHandlerContext, globalConfig: NormalizedLwrGlobalConfig);
    getViewContent(viewRequest: ViewRequest, route: LwrRoute | LwrErrorRoute, runtimeEnvironment: RuntimeEnvironment, runtimeParams?: RuntimeParams): Promise<ViewResponse>;
    getViewJson(viewRequest: ViewRequest, route: LwrRoute | LwrErrorRoute, runtimeEnvironment: RuntimeEnvironment, runtimeParams?: RuntimeParams): Promise<ViewResponse>;
    getViewConfiguration(viewRequest: ViewRequest, route: LwrRoute | LwrErrorRoute, runtimeEnvironment: RuntimeEnvironment, runtimeParams?: RuntimeParams): Promise<ViewResponse | undefined>;
    private getDefaultRouteViewDefinition;
    private getRouteHandlerResponse;
    private getBoundApi;
    private hasViewResponse;
    private getViewResponse;
}
//# sourceMappingURL=view-handler.d.ts.map