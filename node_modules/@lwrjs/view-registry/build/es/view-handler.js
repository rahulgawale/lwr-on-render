import { normalizeResourcePath } from '@lwrjs/shared-utils';
import { generateHtmlTag, generatePageContext, getRouteHandler, isViewResponse, toJsonFormat, } from './utils.js';
import { resolve } from 'path';
export class LwrViewHandler {
    constructor(context, globalConfig) {
        // TODO convert to using InflightTasks in the shared utils
        this.inflightRouteHandlerEvalMap = new Map();
        this.routeHandlerFunctionMap = new Map();
        this.viewRegistry = context.viewRegistry;
        this.globalConfig = globalConfig;
        this.moduleRegistry = context.moduleRegistry;
    }
    // Get the View's HTML Response
    async getViewContent(
    // request
    viewRequest, 
    // config
    route, 
    // context
    runtimeEnvironment, runtimeParams = {}) {
        const { routeHandler } = route;
        if (routeHandler) {
            const response = await this.getRouteHandlerResponse(viewRequest, route, runtimeEnvironment, runtimeParams);
            if (isViewResponse(response)) {
                // Return custom view response payload as-is
                return response;
            }
            // Process ViewDefinitionResponse
            const { view, viewParams, renderOptions } = normalizeViewProperties(viewRequest, response, route, this.globalConfig);
            const viewDefinition = await this.viewRegistry.getViewDefinition(view, viewParams, runtimeEnvironment, {
                ...runtimeParams,
                params: viewRequest.params,
                query: viewRequest.query,
            }, renderOptions);
            return {
                ...response,
                body: viewDefinition.renderedView,
                metadata: {
                    viewDefinition,
                },
            };
        }
        // default static view
        const viewDefinition = await this.getDefaultRouteViewDefinition(viewRequest, route, runtimeEnvironment, runtimeParams);
        return {
            body: viewDefinition.renderedView,
            metadata: {
                viewDefinition,
            },
        };
    }
    // Get the View's JSON Manifest Response
    async getViewJson(
    // request
    viewRequest, 
    // config
    route, 
    // context
    runtimeEnvironment, runtimeParams = {}) {
        const { routeHandler } = route;
        if (routeHandler) {
            const response = await this.getRouteHandlerResponse(viewRequest, route, runtimeEnvironment, runtimeParams);
            if (isViewResponse(response)) {
                // Return custom view response payload as-is
                return response;
            }
            const { view, viewParams, renderOptions } = normalizeViewProperties(viewRequest, response, route, this.globalConfig);
            const viewDefinition = await this.viewRegistry.getViewDefinition(view, viewParams, runtimeEnvironment, runtimeParams, renderOptions);
            return {
                ...response,
                ...(await toJsonFormat(viewRequest, viewDefinition, route, runtimeEnvironment, runtimeParams, this.moduleRegistry)),
            };
        }
        // default static view
        const viewDefinition = await this.getDefaultRouteViewDefinition(viewRequest, route, runtimeEnvironment, runtimeParams);
        // return the JSON form of the LinkedViewDefinition
        return await toJsonFormat(viewRequest, viewDefinition, route, runtimeEnvironment, runtimeParams, this.moduleRegistry);
    }
    // Get the View's Configuration Script Response
    // This is a standalone script containing globalThis.LWR
    // It is linked from the JSON response of an app (globalThis.LWR is inlined for HTML responses)
    async getViewConfiguration(
    // request
    viewRequest, 
    // config
    route, 
    // context
    runtimeEnvironment, runtimeParams = {}) {
        const { routeHandler } = route;
        let viewDefinition;
        if (routeHandler) {
            const response = await this.getRouteHandlerResponse(viewRequest, route, runtimeEnvironment, runtimeParams);
            if (isViewResponse(response)) {
                // Return custom view response payload as-is
                return;
            }
            const { view, viewParams, renderOptions } = normalizeViewProperties(viewRequest, response, route, this.globalConfig);
            viewDefinition = await this.viewRegistry.getViewDefinition(view, viewParams, runtimeEnvironment, runtimeParams, renderOptions);
        }
        else {
            // default static view
            viewDefinition = await this.getDefaultRouteViewDefinition(viewRequest, route, runtimeEnvironment, runtimeParams);
        }
        // Serialize the ViewDefinitions bootstrap resources as the exposed configuration
        const bootstrapResources = viewDefinition.viewRecord.bootstrapModule?.resources;
        if (!bootstrapResources) {
            return;
        }
        // If configuration as source do not wrap the content in a script tag
        const htmlResources = route.bootstrap?.configAsSrc
            ? bootstrapResources.map((resource) => resource.content).join('\n')
            : await generateHtmlTag({
                type: 'application/javascript',
                inline: true,
                content: bootstrapResources.map((resource) => resource.content).join('\n'),
            });
        return {
            body: htmlResources,
        };
    }
    async getDefaultRouteViewDefinition(
    // request
    viewRequest, route, 
    // context
    runtimeEnvironment, runtimeParams = {}) {
        const { id, bootstrap, rootComponent, contentTemplate, layoutTemplate, properties } = route;
        const page = generatePageContext(viewRequest, route);
        const viewDefinition = await this.viewRegistry.getViewDefinition({
            id,
            bootstrap,
            rootComponent,
            contentTemplate,
            layoutTemplate,
        }, { page, ...properties }, runtimeEnvironment, {
            ...runtimeParams,
            params: viewRequest.params,
            query: viewRequest.query,
        });
        return viewDefinition;
    }
    async getRouteHandlerResponse(
    // request
    viewRequest, route, 
    // context
    runtimeEnvironment, runtimeParams = {}) {
        const { rootDir, assets, contentDir, layoutsDir, cacheDir } = this.globalConfig;
        const paths = { rootDir, assets, contentDir, layoutsDir };
        const { routeHandler } = route;
        if (!routeHandler) {
            throw new Error('Route Handler is required for a CustomView');
        }
        // Import and instantiate route handler
        let routeHandlerFunction = this.routeHandlerFunctionMap.get(routeHandler);
        if (!routeHandlerFunction) {
            const inflightRouteHandlerPromise = this.inflightRouteHandlerEvalMap.get(routeHandler);
            if (inflightRouteHandlerPromise) {
                // wait on the current inflight route handler promise
                routeHandlerFunction = await inflightRouteHandlerPromise;
            }
            else {
                // get the route handler eval promise
                const handlerPromise = getRouteHandler(routeHandler, { cacheDir, rootDir });
                this.inflightRouteHandlerEvalMap.set(routeHandler, handlerPromise);
                routeHandlerFunction = await handlerPromise;
            }
            // add the resolved route handler function into the cache and delete the inflight entry
            this.routeHandlerFunctionMap.set(routeHandler, routeHandlerFunction);
            this.inflightRouteHandlerEvalMap.delete(routeHandler);
        }
        const locale = runtimeParams.locale;
        const viewApi = this.getBoundApi(route, runtimeEnvironment, runtimeParams);
        const response = await routeHandlerFunction({ ...viewRequest, locale }, { route, viewApi, ...paths });
        return response;
    }
    /*
        The Custom Route Handler accessible APIS are bound to runtime request when provided to a
        Route Handler.
    */
    getBoundApi(route, runtimeEnvironment, runtimeParams) {
        return {
            // Create a version of renderView() to pass to the route handler, it will:
            //  - handle and protect the runtime environment
            getViewResponse: this.getViewResponse.bind(this, route, runtimeEnvironment, runtimeParams),
            hasViewResponse: this.hasViewResponse.bind(this, route, runtimeEnvironment, runtimeParams),
        };
    }
    hasViewResponse(route, runtimeEnvironment, runtimeParams = {}, 
    // custom route handler managed properties
    view, viewParams, renderOptions) {
        const { id, bootstrap } = route;
        const managedView = { ...view, id, bootstrap };
        return this.viewRegistry.hasViewDefinition(managedView, viewParams, runtimeEnvironment, runtimeParams, renderOptions);
    }
    async getViewResponse(route, runtimeEnvironment, runtimeParams = {}, 
    // custom route handler managed properties
    view, viewParams, renderOptions) {
        const { id, bootstrap } = route;
        const managedView = { ...view, id, bootstrap };
        const viewDefinition = await this.viewRegistry.getViewDefinition(managedView, viewParams, runtimeEnvironment, runtimeParams, renderOptions);
        return {
            body: viewDefinition.renderedView,
            metadata: {
                viewDefinition,
            },
        };
    }
}
function normalizeViewProperties(viewRequest, response, route, config) {
    const { view: { rootComponent, contentTemplate: cTemplate, layoutTemplate: lTemplate }, viewParams, renderOptions, } = response;
    const { rootDir, assets, contentDir, layoutsDir } = config;
    const paths = { rootDir, assets, contentDir, layoutsDir };
    // grab the page.title from the viewParams (analogous to route.properties)
    const page = generatePageContext(viewRequest, {
        ...route,
        contentTemplate: cTemplate,
        properties: viewParams,
    });
    const { id, bootstrap } = route;
    return {
        view: {
            id,
            bootstrap,
            ...(rootComponent && { rootComponent }),
            ...(cTemplate && { contentTemplate: resolve(normalizeResourcePath(cTemplate, paths)) }),
            ...(lTemplate && { layoutTemplate: resolve(normalizeResourcePath(lTemplate, paths)) }),
        },
        viewParams: { page, ...viewParams },
        renderOptions,
    };
}
//# sourceMappingURL=view-handler.js.map