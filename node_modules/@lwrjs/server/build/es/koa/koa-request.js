export default class KoaRequest {
    constructor(ctx, isMetadataRequest) {
        this.ctx = ctx;
        this.isMetadataRequest = isMetadataRequest || false;
    }
    get params() {
        return this.ctx.params || {};
    }
    get originalUrl() {
        return this.ctx.request.originalUrl;
    }
    get path() {
        return this.ctx.request.path;
    }
    get query() {
        return this.ctx.request.query;
    }
    get protocol() {
        return this.ctx.protocol;
    }
    get body() {
        return this.ctx.body;
    }
    get method() {
        return this.ctx.method;
    }
    get headers() {
        return this.ctx.headers;
    }
    get locale() {
        return this.ctx.locale;
    }
    set locale(l) {
        this.ctx.locale = l;
    }
    isSiteGeneration() {
        return this.isMetadataRequest;
    }
    acceptsLanguages() {
        return this.ctx.request.acceptsLanguages();
    }
    get(field) {
        return this.ctx.get(field);
    }
    cookie(key) {
        return this.ctx.cookies.get(key);
    }
    hasJsonParam() {
        return this.ctx.query.json !== undefined;
    }
    isJsonRequest() {
        const acceptHeader = this.ctx.request.get('Accept') || '';
        const hasJsonHeader = acceptHeader.indexOf('application/json') >= 0;
        return hasJsonHeader || this.hasJsonParam();
    }
    validateJsonRequest() {
        return !this.hasJsonParam() || this.ctx.request.accepts('json') === 'json';
    }
    getRuntimeContext(defaultRuntimeEnvironment) {
        const { format, apiVersion, compat, locale, environment, bundleSpecifier } = this.params;
        const { debug } = this.ctx.request.query;
        return {
            runtimeEnvironment: {
                ...defaultRuntimeEnvironment,
                format: format ? format : defaultRuntimeEnvironment.format,
                compat: compat !== undefined ? compat : defaultRuntimeEnvironment.compat,
                debug: debug !== undefined ? true : defaultRuntimeEnvironment.debug,
                apiVersion: apiVersion ? apiVersion : defaultRuntimeEnvironment.apiVersion,
                bundle: bundleSpecifier !== undefined ? true : false, // the absence of a bundle strategy means bundling is off
            },
            runtimeParams: {
                locale: locale
                    ? locale
                    : this.ctx.locale
                        ? this.ctx.locale
                        : defaultRuntimeEnvironment.defaultLocale,
                environment,
            },
        };
    }
}
//# sourceMappingURL=koa-request.js.map