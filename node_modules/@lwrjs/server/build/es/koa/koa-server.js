import Koa from 'koa';
import KoaRouter from '@koa/router';
import http from 'http';
import compress from 'koa-compress';
import AbstractInternalAppServer from '../common/abstract-internal-app-server.js';
import KoaRequest from './koa-request.js';
import KoaResponse from './koa-response.js';
/**
 * Koa Server Implementation (https://koajs.com/)
 */
export default class KoaInternalServer extends AbstractInternalAppServer {
    constructor() {
        super();
        this.koaApp = new Koa();
        this.koaRouter = new KoaRouter();
    }
    getImpl() {
        return this.koaApp;
    }
    createHttpServer() {
        this.httpServer = http.createServer(this.koaApp.callback());
        return this.httpServer;
    }
    use(middleware) {
        this.koaApp.use(async (ctx, next) => {
            const metadataRequest = this.isMetadataRequest(ctx.request.headers);
            const lwrReq = new KoaRequest(ctx, metadataRequest);
            const lwrRes = new KoaResponse(ctx, metadataRequest);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    all(path, middleware) {
        this.koaRouter.all(path, async (ctx, next) => {
            const metadataRequest = this.isMetadataRequest(ctx.request.headers);
            const lwrReq = new KoaRequest(ctx, metadataRequest);
            const lwrRes = new KoaResponse(ctx, metadataRequest);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    get(path, middleware) {
        this.koaRouter.get(path, async (ctx, next) => {
            const metadataRequest = this.isMetadataRequest(ctx.request.headers);
            const lwrReq = new KoaRequest(ctx, metadataRequest);
            const lwrRes = new KoaResponse(ctx, metadataRequest);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    post(path, middleware) {
        this.koaRouter.post(path, async (ctx, next) => {
            const metadataRequest = this.isMetadataRequest(ctx.request.headers);
            const lwrReq = new KoaRequest(ctx, metadataRequest);
            const lwrRes = new KoaResponse(ctx, metadataRequest);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    useCompression() {
        this.koaApp.use(compress());
    }
    getRegexWildcard() {
        return '(.*)';
    }
    initRoutes() {
        this.koaApp.use(this.koaRouter.routes());
    }
}
//# sourceMappingURL=koa-server.js.map