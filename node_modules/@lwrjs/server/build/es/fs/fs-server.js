import Koa from 'koa';
import KoaRouter from '@koa/router';
import compose from 'koa-compose';
import http from 'http';
import FsRequest from './fs-request.js';
import FsResponse from './fs-response.js';
import createFsContext from './fs-context.js';
import AbstractInternalAppServer from '../common/abstract-internal-app-server.js';
export class LwrFsKoa extends Koa {
    constructor() {
        super();
    }
    createMockContext(url, method = 'GET', lang) {
        return createFsContext(this, url, method, lang);
    }
    setMiddlewares(middlewares) {
        this.composedMiddleware = compose(middlewares);
    }
    async dispatchUrl(url, method, lang) {
        const { composedMiddleware } = this;
        if (!composedMiddleware) {
            throw new Error(`Middlewares not initialized`);
        }
        const ctx = this.createMockContext(url, method, lang);
        await composedMiddleware(ctx);
        return ctx;
    }
}
/**
 * FS Server (FS == FileSystem) implementation used for static generation. Should not be configured directly by consumers.
 */
export class FsInternalServer extends AbstractInternalAppServer {
    constructor() {
        super();
        this.middlewares = [];
        this.lwrFsKoaApp = new LwrFsKoa();
        this.koaRouter = new KoaRouter();
    }
    // TODO: mock this API as is not used for now
    createHttpServer() {
        return http.createServer();
    }
    use(middleware) {
        this.middlewares.push(async (ctx, next) => {
            const lwrReq = new FsRequest(ctx);
            const lwrRes = new FsResponse(ctx);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    all(path, middleware) {
        this.koaRouter.all(path, async (ctx, next) => {
            const lwrReq = new FsRequest(ctx);
            const lwrRes = new FsResponse(ctx);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    get(path, middleware) {
        this.koaRouter.get(path, async (ctx, next) => {
            const lwrReq = new FsRequest(ctx);
            const lwrRes = new FsResponse(ctx);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    post(path, middleware) {
        this.koaRouter.post(path, async (ctx, next) => {
            const lwrReq = new FsRequest(ctx);
            const lwrRes = new FsResponse(ctx);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    initRoutes() {
        this.middlewares.push(this.koaRouter.routes());
        this.lwrFsKoaApp.setMiddlewares(this.middlewares);
    }
    useCompression() {
        /* noop */
    }
    getImpl() {
        return this.lwrFsKoaApp;
    }
    getRegexWildcard() {
        return '(.*)';
    }
}
//# sourceMappingURL=fs-server.js.map