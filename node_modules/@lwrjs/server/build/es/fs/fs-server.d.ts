/// <reference types="koa__router" />
/// <reference types="node" />
import Koa from 'koa';
import KoaRouter, { Middleware as KoaMiddleware } from '@koa/router';
import { LwrDispatcher, FsContext, InternalAppServer, MiddlewareFunction } from '@lwrjs/types';
import { Server as HttpServer } from 'http';
import AbstractInternalAppServer from '../common/abstract-internal-app-server.js';
export declare class LwrFsKoa extends Koa implements LwrDispatcher {
    private composedMiddleware?;
    constructor();
    createMockContext(url: string, method: string | undefined, lang: string): FsContext;
    setMiddlewares(middlewares: KoaMiddleware[]): void;
    dispatchUrl(url: string, method: string, lang: string): Promise<FsContext>;
}
/**
 * FS Server (FS == FileSystem) implementation used for static generation. Should not be configured directly by consumers.
 */
export declare class FsInternalServer extends AbstractInternalAppServer implements InternalAppServer<'fs'> {
    private lwrFsKoaApp;
    protected koaRouter: KoaRouter;
    private middlewares;
    constructor();
    createHttpServer(): HttpServer;
    use(middleware: MiddlewareFunction): void;
    all(path: string | string[], middleware: MiddlewareFunction): void;
    get(path: string | string[], middleware: MiddlewareFunction): void;
    post(path: string | string[], middleware: MiddlewareFunction): void;
    initRoutes(): void;
    useCompression(): void;
    getImpl(): LwrFsKoa;
    getRegexWildcard(): string;
}
//# sourceMappingURL=fs-server.d.ts.map