import expressCompression from 'compression';
let compressionLibToUse;
const compression = async (req, res, next) => {
    if (compressionLibToUse === undefined) {
        // TODO: Unfortunately the compression story for express is a mess.
        // shrink-ray-current is a fork of compression with brotlli support, we will use it until the
        // "official" one accepts a PR to support it: https://github.com/expressjs/compression/issues/71
        // Since it has some native dependencies (node-zopfli-es, iltorb) that may fail to compile in
        // certain environments, we make it an optional dependency and fall back to vanilla compression.
        try {
            let shrinkRay = await import('shrink-ray-current');
            shrinkRay = shrinkRay.default || shrinkRay;
            compressionLibToUse = shrinkRay({ useZopfliForGzip: false });
        }
        catch (err) {
            compressionLibToUse = expressCompression();
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    compressionLibToUse(req, res, next);
};
export default function () {
    return compression;
}
//# sourceMappingURL=compression.js.map