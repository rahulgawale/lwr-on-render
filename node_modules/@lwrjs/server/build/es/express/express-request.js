export default class ExpressRequest {
    constructor(expressRequest, isMetadataRequest) {
        this.req = expressRequest;
        this.isMetadataRequest = isMetadataRequest || false;
    }
    get params() {
        return this.req.params;
    }
    get originalUrl() {
        return this.req.originalUrl;
    }
    get path() {
        return this.req.path;
    }
    get query() {
        return this.req.query;
    }
    get body() {
        // requires body parsing middleware
        return this.req.body;
    }
    get method() {
        return this.req.method;
    }
    get headers() {
        return this.req.headers;
    }
    get protocol() {
        return this.req.protocol;
    }
    get locale() {
        return this.req.locale;
    }
    set locale(l) {
        this.req.locale = l;
    }
    acceptsLanguages() {
        return this.req.acceptsLanguages();
    }
    get(field) {
        return this.req.get(field);
    }
    cookie(key) {
        // Does not require the cookie-parser middleware
        const rawCookies = (this.req.headers.cookie?.split(';') || []).map((c) => c.trim());
        const rawCookie = rawCookies.find((c) => c.startsWith(`${key}=`));
        return rawCookie ? decodeURIComponent(rawCookie.replace(`${key}=`, '')) : undefined;
    }
    hasJsonParam() {
        return this.req.query.json !== undefined;
    }
    isJsonRequest() {
        const acceptHeader = this.req.get('Accept') || '';
        const hasJsonHeader = acceptHeader.indexOf('application/json') >= 0;
        return hasJsonHeader || this.hasJsonParam();
    }
    isSiteGeneration() {
        return this.isMetadataRequest;
    }
    validateJsonRequest() {
        return !this.hasJsonParam() || this.req.accepts('json') === 'json';
    }
    getRuntimeContext(defaultRuntimeEnvironment) {
        const { format, apiVersion, compat, locale, environment, bundleSpecifier } = this.req.params;
        const { debug } = this.req.query;
        return {
            runtimeEnvironment: {
                ...defaultRuntimeEnvironment,
                format: format ? format : defaultRuntimeEnvironment.format,
                compat: compat !== undefined ? compat : defaultRuntimeEnvironment.compat,
                debug: debug !== undefined ? true : defaultRuntimeEnvironment.debug,
                apiVersion: apiVersion ? apiVersion : defaultRuntimeEnvironment.apiVersion,
                bundle: bundleSpecifier !== undefined ? true : false, // the absence of a bundle strategy means bundling is off
            },
            runtimeParams: {
                locale: locale
                    ? locale
                    : this.req.locale
                        ? this.req.locale
                        : defaultRuntimeEnvironment.defaultLocale,
                environment,
            },
        };
    }
}
//# sourceMappingURL=express-request.js.map