import express from 'express';
import http from 'http';
import compression from '../common/compression.js';
import AbstractInternalAppServer from '../common/abstract-internal-app-server.js';
import ExpressRequest from './express-request.js';
import ExpressResponse from './express-response.js';
/**
 * Express Server Implementation (https://expressjs.com/)
 */
export default class ExpressInternalServer extends AbstractInternalAppServer {
    constructor(options) {
        super();
        this.expressApp = express();
        if (options.basePath) {
            this.basePath = options.basePath;
        }
    }
    getImpl() {
        return this.expressApp;
    }
    createHttpServer() {
        if (this.basePath) {
            const server = express();
            server.use(this.basePath, this.expressApp);
            this.httpServer = http.createServer(server);
        }
        else {
            this.httpServer = http.createServer(this.expressApp);
        }
        return this.httpServer;
    }
    use(middleware) {
        this.expressApp.use(async (req, res, next) => {
            const metadataRequest = this.isMetadataRequest(req.headers);
            const lwrReq = new ExpressRequest(req, metadataRequest);
            const lwrRes = new ExpressResponse(res, metadataRequest);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    all(path, middleware) {
        this.expressApp.use(path, async (req, res, next) => {
            const metadataRequest = this.isMetadataRequest(req.headers);
            const lwrReq = new ExpressRequest(req, metadataRequest);
            const lwrRes = new ExpressResponse(res, metadataRequest);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    get(path, middleware) {
        this.expressApp.get(path, async (req, res, next) => {
            const metadataRequest = this.isMetadataRequest(req.headers);
            const lwrReq = new ExpressRequest(req, metadataRequest);
            const lwrRes = new ExpressResponse(res, metadataRequest);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    post(path, middleware) {
        this.expressApp.post(path, async (req, res, next) => {
            const metadataRequest = this.isMetadataRequest(req.headers);
            const lwrReq = new ExpressRequest(req, metadataRequest);
            const lwrRes = new ExpressResponse(res, metadataRequest);
            await middleware(lwrReq, lwrRes, next);
        });
    }
    useCompression() {
        this.expressApp.use(compression());
    }
    getRegexWildcard() {
        return '*';
    }
    initRoutes() {
        // No-op for express as express initializes routes
    }
}
//# sourceMappingURL=express-server.js.map