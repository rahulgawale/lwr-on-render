var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/server/src/index.ts
__markAsModule(exports);
__export(exports, {
  LwrFsKoa: () => import_fs_server.LwrFsKoa,
  createInternalServer: () => createInternalServer,
  mockMiddlewareRequest: () => mockMiddlewareRequest,
  mockMiddlewareResponse: () => mockMiddlewareResponse
});
var import_express_server = __toModule(require("./express/express-server.cjs"));
var import_express_request = __toModule(require("./express/express-request.cjs"));
var import_express_response = __toModule(require("./express/express-response.cjs"));
var import_koa_server = __toModule(require("./koa/koa-server.cjs"));
var import_fs_server = __toModule(require("./fs/fs-server.cjs"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
function createInternalServer(serverType = "express", options = {}) {
  if (serverType === "express") {
    const expressAppServer = new import_express_server.default(options);
    return expressAppServer;
  }
  if (serverType === "koa") {
    const koaAppServer = new import_koa_server.default();
    return koaAppServer;
  }
  if (serverType === "fs") {
    const fsAppServer = new import_fs_server.FsInternalServer();
    return fsAppServer;
  }
  throw (0, import_diagnostics.createSingleDiagnosticError)({description: import_diagnostics.descriptions.CONFIG_PARSER.INVALID_PROPERTY("serverType", serverType)}, import_diagnostics.LwrConfigValidationError);
}
function mockMiddlewareRequest(req) {
  return new import_express_request.default(req);
}
function mockMiddlewareResponse(res) {
  return new import_express_response.default(res, false);
}
