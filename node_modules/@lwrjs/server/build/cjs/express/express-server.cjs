var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/server/src/express/express-server.ts
__markAsModule(exports);
__export(exports, {
  default: () => express_server_default
});
var import_express = __toModule(require("express"));
var import_http = __toModule(require("http"));
var import_compression = __toModule(require("../common/compression.cjs"));
var import_abstract_internal_app_server = __toModule(require("../common/abstract-internal-app-server.cjs"));
var import_express_request = __toModule(require("./express-request.cjs"));
var import_express_response = __toModule(require("./express-response.cjs"));
var ExpressInternalServer = class extends import_abstract_internal_app_server.default {
  constructor(options) {
    super();
    this.expressApp = (0, import_express.default)();
    if (options.basePath) {
      this.basePath = options.basePath;
    }
  }
  getImpl() {
    return this.expressApp;
  }
  createHttpServer() {
    if (this.basePath) {
      const server = (0, import_express.default)();
      server.use(this.basePath, this.expressApp);
      this.httpServer = import_http.default.createServer(server);
    } else {
      this.httpServer = import_http.default.createServer(this.expressApp);
    }
    return this.httpServer;
  }
  use(middleware) {
    this.expressApp.use(async (req, res, next) => {
      const metadataRequest = this.isMetadataRequest(req.headers);
      const lwrReq = new import_express_request.default(req, metadataRequest);
      const lwrRes = new import_express_response.default(res, metadataRequest);
      await middleware(lwrReq, lwrRes, next);
    });
  }
  all(path, middleware) {
    this.expressApp.use(path, async (req, res, next) => {
      const metadataRequest = this.isMetadataRequest(req.headers);
      const lwrReq = new import_express_request.default(req, metadataRequest);
      const lwrRes = new import_express_response.default(res, metadataRequest);
      await middleware(lwrReq, lwrRes, next);
    });
  }
  get(path, middleware) {
    this.expressApp.get(path, async (req, res, next) => {
      const metadataRequest = this.isMetadataRequest(req.headers);
      const lwrReq = new import_express_request.default(req, metadataRequest);
      const lwrRes = new import_express_response.default(res, metadataRequest);
      await middleware(lwrReq, lwrRes, next);
    });
  }
  post(path, middleware) {
    this.expressApp.post(path, async (req, res, next) => {
      const metadataRequest = this.isMetadataRequest(req.headers);
      const lwrReq = new import_express_request.default(req, metadataRequest);
      const lwrRes = new import_express_response.default(res, metadataRequest);
      await middleware(lwrReq, lwrRes, next);
    });
  }
  useCompression() {
    this.expressApp.use((0, import_compression.default)());
  }
  getRegexWildcard() {
    return "*";
  }
  initRoutes() {
  }
};
var express_server_default = ExpressInternalServer;
