var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/server/src/koa/koa-response.ts
__markAsModule(exports);
__export(exports, {
  default: () => koa_response_default
});
var import_stream = __toModule(require("stream"));
var KoaResponse = class {
  constructor(ctx, isMetadataRequest) {
    this.ctx = ctx;
    this.isMetadataRequest = isMetadataRequest || false;
  }
  set(header) {
    this.ctx.response.set(header);
  }
  setHeader(name, value) {
    this.ctx.response.set(name, value);
  }
  status(status) {
    this.ctx.response.status = status;
    return this;
  }
  setMetadata(meta) {
    if (this.isMetadataRequest) {
      this.metadata = meta;
    }
  }
  send(object) {
    if (this.isMetadataRequest) {
      const context = {
        fs: {
          metadata: this.metadata
        }
      };
      this.ctx.response.body = context;
    } else {
      this.ctx.response.body = object;
    }
  }
  sendStatus(httpCode) {
    this.ctx.response.status = httpCode;
  }
  stream(stream) {
    if (this.isMetadataRequest) {
      const context = {
        fs: {
          metadata: this.metadata
        }
      };
      this.ctx.response.body = context;
    } else {
      this.ctx.response.body = stream.on("error", this.ctx.onerror).pipe(new import_stream.PassThrough());
    }
  }
  type(type) {
    this.ctx.type = type;
    return this;
  }
  cookie(name, value, options) {
    this.ctx.cookies.set(name, value, options);
    return this;
  }
};
var koa_response_default = KoaResponse;
