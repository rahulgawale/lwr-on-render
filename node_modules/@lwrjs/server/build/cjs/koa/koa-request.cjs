var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/server/src/koa/koa-request.ts
__markAsModule(exports);
__export(exports, {
  default: () => koa_request_default
});
var KoaRequest = class {
  constructor(ctx, isMetadataRequest) {
    this.ctx = ctx;
    this.isMetadataRequest = isMetadataRequest || false;
  }
  get params() {
    return this.ctx.params || {};
  }
  get originalUrl() {
    return this.ctx.request.originalUrl;
  }
  get path() {
    return this.ctx.request.path;
  }
  get query() {
    return this.ctx.request.query;
  }
  get protocol() {
    return this.ctx.protocol;
  }
  get body() {
    return this.ctx.body;
  }
  get method() {
    return this.ctx.method;
  }
  get headers() {
    return this.ctx.headers;
  }
  get locale() {
    return this.ctx.locale;
  }
  set locale(l) {
    this.ctx.locale = l;
  }
  isSiteGeneration() {
    return this.isMetadataRequest;
  }
  acceptsLanguages() {
    return this.ctx.request.acceptsLanguages();
  }
  get(field) {
    return this.ctx.get(field);
  }
  cookie(key) {
    return this.ctx.cookies.get(key);
  }
  hasJsonParam() {
    return this.ctx.query.json !== void 0;
  }
  isJsonRequest() {
    const acceptHeader = this.ctx.request.get("Accept") || "";
    const hasJsonHeader = acceptHeader.indexOf("application/json") >= 0;
    return hasJsonHeader || this.hasJsonParam();
  }
  validateJsonRequest() {
    return !this.hasJsonParam() || this.ctx.request.accepts("json") === "json";
  }
  getRuntimeContext(defaultRuntimeEnvironment) {
    const {format, apiVersion, compat, locale, environment, bundleSpecifier} = this.params;
    const {debug} = this.ctx.request.query;
    return {
      runtimeEnvironment: {
        ...defaultRuntimeEnvironment,
        format: format ? format : defaultRuntimeEnvironment.format,
        compat: compat !== void 0 ? compat : defaultRuntimeEnvironment.compat,
        debug: debug !== void 0 ? true : defaultRuntimeEnvironment.debug,
        apiVersion: apiVersion ? apiVersion : defaultRuntimeEnvironment.apiVersion,
        bundle: bundleSpecifier !== void 0 ? true : false
      },
      runtimeParams: {
        locale: locale ? locale : this.ctx.locale ? this.ctx.locale : defaultRuntimeEnvironment.defaultLocale,
        environment
      }
    };
  }
};
var koa_request_default = KoaRequest;
