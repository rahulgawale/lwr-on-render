var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/server/src/koa/koa-server.ts
__markAsModule(exports);
__export(exports, {
  default: () => koa_server_default
});
var import_koa = __toModule(require("koa"));
var import_router = __toModule(require("@koa/router"));
var import_http = __toModule(require("http"));
var import_koa_compress = __toModule(require("koa-compress"));
var import_abstract_internal_app_server = __toModule(require("../common/abstract-internal-app-server.cjs"));
var import_koa_request = __toModule(require("./koa-request.cjs"));
var import_koa_response = __toModule(require("./koa-response.cjs"));
var KoaInternalServer = class extends import_abstract_internal_app_server.default {
  constructor() {
    super();
    this.koaApp = new import_koa.default();
    this.koaRouter = new import_router.default();
  }
  getImpl() {
    return this.koaApp;
  }
  createHttpServer() {
    this.httpServer = import_http.default.createServer(this.koaApp.callback());
    return this.httpServer;
  }
  use(middleware) {
    this.koaApp.use(async (ctx, next) => {
      const metadataRequest = this.isMetadataRequest(ctx.request.headers);
      const lwrReq = new import_koa_request.default(ctx, metadataRequest);
      const lwrRes = new import_koa_response.default(ctx, metadataRequest);
      await middleware(lwrReq, lwrRes, next);
    });
  }
  all(path, middleware) {
    this.koaRouter.all(path, async (ctx, next) => {
      const metadataRequest = this.isMetadataRequest(ctx.request.headers);
      const lwrReq = new import_koa_request.default(ctx, metadataRequest);
      const lwrRes = new import_koa_response.default(ctx, metadataRequest);
      await middleware(lwrReq, lwrRes, next);
    });
  }
  get(path, middleware) {
    this.koaRouter.get(path, async (ctx, next) => {
      const metadataRequest = this.isMetadataRequest(ctx.request.headers);
      const lwrReq = new import_koa_request.default(ctx, metadataRequest);
      const lwrRes = new import_koa_response.default(ctx, metadataRequest);
      await middleware(lwrReq, lwrRes, next);
    });
  }
  post(path, middleware) {
    this.koaRouter.post(path, async (ctx, next) => {
      const metadataRequest = this.isMetadataRequest(ctx.request.headers);
      const lwrReq = new import_koa_request.default(ctx, metadataRequest);
      const lwrRes = new import_koa_response.default(ctx, metadataRequest);
      await middleware(lwrReq, lwrRes, next);
    });
  }
  useCompression() {
    this.koaApp.use((0, import_koa_compress.default)());
  }
  getRegexWildcard() {
    return "(.*)";
  }
  initRoutes() {
    this.koaApp.use(this.koaRouter.routes());
  }
};
var koa_server_default = KoaInternalServer;
