import { ModuleRecord, ModuleEntry, ModuleDefinition, RuntimeEnvironment, Specifier, RuntimeParams, InterchangeableModuleMap } from '@lwrjs/types';
import { LwrModuleRegistry } from '../index.js';
export interface LinkingStrategy {
    (moduleId: {
        specifier: Specifier;
        version: string;
    }, runtimeEnvironment: RuntimeEnvironment, runtimeParams?: RuntimeParams, signature?: string): string;
}
interface AmdLinkerConfig {
    amdLoaderModule: ModuleEntry;
}
interface EsmLinkerConfig {
    esmLoaderModule: ModuleEntry;
}
export declare type LinkerConfig = AmdLinkerConfig | EsmLinkerConfig;
export interface ModuleLinkResult {
    id: string;
    code: string;
    linkedModuleRecord: ModuleRecord;
}
/**
 * Link the compiledSource of a module source with the versioned ModuleRecord imports using a specific linking strategy
 * @param moduleDef
 * @param moduleRecord
 * @param strategy
 */
export declare function link(moduleRegistry: LwrModuleRegistry, moduleDef: ModuleDefinition, versionStrategy: LinkingStrategy, uriStrategy: LinkingStrategy, runtimeEnvironment: RuntimeEnvironment, runtimeParams?: RuntimeParams, config?: LinkerConfig, interchangeableModules?: InterchangeableModuleMap, exclude?: string[]): Promise<ModuleLinkResult>;
export {};
//# sourceMappingURL=linker.d.ts.map