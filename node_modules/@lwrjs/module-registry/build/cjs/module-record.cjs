var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-registry/src/module-record.ts
__markAsModule(exports);
__export(exports, {
  getModuleRecord: () => getModuleRecord
});
var import_path = __toModule(require("path"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
async function resolveRelativeImport(registry, moduleSpecifier, importeeEntry, version, location) {
  const [importeeSpecifier, importeePath] = importeeEntry.specifier.split("#");
  if (importeePath) {
    moduleSpecifier = `./${import_path.default.join(importeePath, "..", moduleSpecifier)}`;
  }
  const specifier = `${importeeSpecifier}#${moduleSpecifier.substr(2)}`;
  const {namespace, name} = (0, import_shared_utils.explodeSpecifier)(specifier);
  const dependencyModuleEntry = await registry.getModuleEntry({
    specifier,
    version,
    importer: importeeEntry.scope
  });
  return {
    namespace,
    name: name || specifier,
    sourceSpecifier: moduleSpecifier,
    specifier,
    version: dependencyModuleEntry.version,
    scope: dependencyModuleEntry.scope,
    locations: [location]
  };
}
async function resolveExternalImport(registry, moduleSpecifier, importeeEntry, location) {
  const {namespace, name, specifier} = (0, import_shared_utils.explodeSpecifier)(moduleSpecifier);
  const {entry, virtual} = importeeEntry;
  const moduleEntryRoot = virtual ? void 0 : import_path.default.dirname(entry);
  const dependencyModuleEntry = await registry.getModuleEntry({
    specifier: moduleSpecifier,
    importer: moduleEntryRoot
  });
  return {
    namespace,
    name: name || specifier,
    scope: dependencyModuleEntry.scope,
    sourceSpecifier: moduleSpecifier,
    specifier: moduleSpecifier,
    version: dependencyModuleEntry.version,
    locations: [location],
    interchangeable: dependencyModuleEntry.interchangeable
  };
}
async function getModuleRecord(compiledModule, registry, compiler) {
  const imports = [];
  const dynamicImports = [];
  const {compiledMetadata: defaultCompilerMetadata, moduleEntry, version} = compiledModule;
  const compiledMetadata = defaultCompilerMetadata || {};
  const {imports: compiledModuleImports, dynamicImports: compiledModuleDynamicImports} = await compiler.getModuleMetadata(compiledModule.compiledSource);
  Object.assign(compiledMetadata, {
    imports: compiledModuleImports,
    dynamicImports: compiledModuleDynamicImports
  });
  if (compiledMetadata && compiledMetadata.imports && compiledMetadata.imports.length > 0) {
    const visitedImports = new Set();
    for (const {moduleSpecifier, location} of compiledMetadata.imports) {
      if (!visitedImports.has(moduleSpecifier)) {
        visitedImports.add(moduleSpecifier);
        if (moduleSpecifier.startsWith(".")) {
          const resolvedImport = await resolveRelativeImport(registry, moduleSpecifier, moduleEntry, version, location);
          imports.push(resolvedImport);
        } else {
          const resolvedImport = await resolveExternalImport(registry, moduleSpecifier, moduleEntry, location);
          imports.push(resolvedImport);
        }
      } else {
        const importReference = imports.find((i) => i.sourceSpecifier === moduleSpecifier);
        if (importReference) {
          importReference.locations.push(location);
        }
      }
    }
  }
  if (compiledMetadata && compiledMetadata.dynamicImports && compiledMetadata.dynamicImports.length > 0) {
    const visitedDynamicImports = new Set();
    for (const {
      moduleSpecifier,
      location,
      importLocation,
      moduleNameType
    } of compiledMetadata.dynamicImports) {
      if (!visitedDynamicImports.has(moduleSpecifier)) {
        visitedDynamicImports.add(moduleSpecifier);
        if (moduleNameType === import_shared_utils.ModuleNameType.unresolved) {
          dynamicImports.push({
            specifier: moduleSpecifier,
            sourceSpecifier: moduleSpecifier,
            version: "",
            name: moduleNameType,
            moduleNameType,
            locations: [
              {
                location,
                importLocation
              }
            ]
          });
        } else if (moduleSpecifier.startsWith(".")) {
          const {locations, ...resolvedImport} = await resolveRelativeImport(registry, moduleSpecifier, moduleEntry, version, location);
          dynamicImports.push({
            ...resolvedImport,
            moduleNameType: import_shared_utils.ModuleNameType.string,
            locations: [
              {
                location: locations[0],
                importLocation
              }
            ]
          });
        } else {
          const {locations, ...resolvedImport} = await resolveExternalImport(registry, moduleSpecifier, moduleEntry, location);
          dynamicImports.push({
            ...resolvedImport,
            moduleNameType: import_shared_utils.ModuleNameType.string,
            locations: [
              {
                location: locations[0],
                importLocation
              }
            ]
          });
        }
      } else {
        const importReference = dynamicImports.find((i) => i.sourceSpecifier === moduleSpecifier);
        if (importReference) {
          importReference.locations.push({location, importLocation});
        }
      }
    }
  }
  return {
    imports,
    dynamicImports
  };
}
