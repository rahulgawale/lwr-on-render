var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-registry/src/linker/linker.ts
__markAsModule(exports);
__export(exports, {
  link: () => link
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_shared_utils2 = __toModule(require("@lwrjs/shared-utils"));
var import_signature = __toModule(require("../signature.cjs"));
async function link(moduleRegistry, moduleDef, versionStrategy, uriStrategy, runtimeEnvironment, runtimeParams, config, interchangeableModules, exclude) {
  const {specifier, version, compiledSource, moduleRecord} = moduleDef;
  const {imports, dynamicImports} = moduleRecord;
  const codeStringBuilder = (0, import_shared_utils.createStringBuilder)(compiledSource);
  const amdLoaderModule = config?.amdLoaderModule;
  const esmLoaderModule = config?.esmLoaderModule;
  const strategy = amdLoaderModule ? versionStrategy : uriStrategy;
  const id = strategy({specifier, version}, runtimeEnvironment, runtimeParams);
  let linkedImports = [];
  let linkedDynamicImports = [];
  if (imports && imports.length > 0) {
    linkedImports = await Promise.all(imports.map(async (importRef) => {
      if (importRef.interchangeable && runtimeParams?.environment) {
        if (interchangeableModules?.has(importRef.specifier)) {
          const contextMap = interchangeableModules.get(importRef.specifier);
          const context = runtimeParams.environment;
          if (contextMap?.has(context)) {
            const overrideSpecifier = contextMap.get(context);
            const overrideEntry = await moduleRegistry.getModuleEntry({
              specifier: overrideSpecifier
            });
            if (overrideEntry) {
              importRef = {
                ...importRef,
                ...overrideEntry
              };
            }
          }
        }
      }
      let signature;
      if (runtimeEnvironment.bundle && runtimeEnvironment.format === "esm" && exclude?.includes(importRef.specifier)) {
        signature = await (0, import_signature.getBundleSignature)(importRef, moduleRegistry, exclude);
      }
      const {locations, sourceSpecifier} = importRef;
      const link2 = strategy(importRef, runtimeEnvironment, runtimeParams, signature);
      const linkedLocations = locations.map((location) => {
        const {startColumn, endColumn} = location;
        codeStringBuilder.overwrite(startColumn, endColumn, link2);
        return {
          startColumn,
          endColumn: endColumn + link2.length
        };
      });
      return {...importRef, sourceSpecifier, specifier: link2, locations: linkedLocations};
    }));
  }
  if (dynamicImports && dynamicImports.length > 0) {
    let loaderSizeOffset = 0;
    linkedDynamicImports = await Promise.all(dynamicImports.map(async (importRef) => {
      const {locations, sourceSpecifier} = importRef;
      let signature;
      const isStringLiteral = importRef.moduleNameType === import_shared_utils2.ModuleNameType.string;
      if (isStringLiteral && runtimeEnvironment.bundle && runtimeEnvironment.format === "esm") {
        signature = await (0, import_signature.getBundleSignature)(importRef, moduleRegistry, exclude);
      }
      const link2 = isStringLiteral ? versionStrategy(importRef, runtimeEnvironment, runtimeParams, signature) : importRef.specifier;
      const linkedLocations = locations.map(({location, importLocation}) => {
        const {startColumn, endColumn} = location;
        const {startColumn: importStart, endColumn: importEnd} = importLocation;
        if (isStringLiteral) {
          codeStringBuilder.overwrite(startColumn + 1, endColumn - 1, link2);
        }
        if (amdLoaderModule || esmLoaderModule) {
          codeStringBuilder.overwrite(importStart, importEnd, "load(");
          loaderSizeOffset = 2;
          if (!isStringLiteral) {
            const importerSpecifier = (0, import_shared_utils2.getSpecifier)({specifier, version});
            codeStringBuilder.overwrite(endColumn, endColumn + 1, `, '${importerSpecifier}')`);
            loaderSizeOffset = -1 * importerSpecifier.length - 2;
          }
        }
        return {
          importLocation: {
            startColumn,
            endColumn: endColumn - loaderSizeOffset
          },
          location: {
            startColumn,
            endColumn: endColumn + link2.length - loaderSizeOffset
          }
        };
      });
      return {...importRef, sourceSpecifier, specifier: link2, locations: linkedLocations};
    }));
  }
  if (dynamicImports && dynamicImports.length > 0 && (amdLoaderModule || esmLoaderModule)) {
    const {version: version2, specifier: specifier2} = amdLoaderModule || esmLoaderModule;
    const {namespace, name} = (0, import_shared_utils2.explodeSpecifier)(specifier2);
    let signature;
    if (esmLoaderModule && runtimeEnvironment.bundle) {
      signature = await (0, import_signature.getBundleSignature)({version: version2, specifier: specifier2}, moduleRegistry, exclude);
    }
    const loaderLink = strategy({specifier: specifier2, version: version2}, runtimeEnvironment, runtimeParams, signature);
    codeStringBuilder.prepend(`import { load } from "${loaderLink}";
`);
    linkedImports.unshift({
      name,
      namespace,
      sourceSpecifier: specifier2,
      specifier: loaderLink,
      version: version2,
      locations: [
        {
          startColumn: 22,
          endColumn: 22 + loaderLink.length
        }
      ]
    });
  }
  return {
    id,
    code: codeStringBuilder.toString(),
    linkedModuleRecord: {
      imports: linkedImports,
      dynamicImports: linkedDynamicImports
    }
  };
}
