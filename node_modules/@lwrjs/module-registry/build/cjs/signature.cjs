var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-registry/src/signature.ts
__markAsModule(exports);
__export(exports, {
  getBundleSignature: () => getBundleSignature
});
var import_crypto = __toModule(require("crypto"));
var import_path = __toModule(require("path"));
var import_process = __toModule(require("process"));
var import_module = __toModule(require("module"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var LWC_VERSION = getLWCVersion();
var ENABLED_FINGERPRINTS = !(0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER;
var ENV_KEY = `LWC:${LWC_VERSION},FINGERPRINTS:${ENABLED_FINGERPRINTS}`;
async function getRecursiveModuleHash(modules, registry, hash, visitedDefinitions = new Set()) {
  if (!modules.length) {
    return;
  }
  const definitions = await Promise.all(modules.map((module2) => registry.getModule(module2)));
  const imports = new Map();
  for (const definition of definitions) {
    const {ownHash, moduleRecord} = definition;
    hash.update(ownHash);
    visitedDefinitions.add((0, import_shared_utils.getSpecifier)(definition));
    moduleRecord.imports?.forEach((importReference) => {
      imports.set((0, import_shared_utils.getSpecifier)(importReference), importReference);
    });
  }
  const dependencies = Array.from(imports, ([_, dependency]) => dependency).filter((dependency) => !visitedDefinitions.has(dependency.specifier) && !visitedDefinitions.has((0, import_shared_utils.getSpecifier)(dependency)));
  if (dependencies.length) {
    return getRecursiveModuleHash(dependencies, registry, hash, visitedDefinitions);
  }
}
async function getBundleSignature(moduleId, registry, exclude) {
  const hash = import_crypto.default.createHash("sha1");
  hash.update(ENV_KEY);
  await getRecursiveModuleHash([moduleId], registry, hash, new Set(exclude));
  return hash.digest("hex");
}
function getLWCVersion() {
  let lwcVersion;
  try {
    if (LWR?.LWC_VERSION) {
      lwcVersion = LWR.LWC_VERSION;
    }
  } catch (err) {
  }
  if (!lwcVersion) {
    const require2 = (0, import_module.createRequire)(import_path.default.join((0, import_process.cwd)(), "./env-config.js"));
    const {version} = require2("lwc/package.json");
    lwcVersion = version;
  }
  import_shared_utils.logger.debug(`Signature LWC Version: ${lwcVersion}`);
  return lwcVersion;
}
