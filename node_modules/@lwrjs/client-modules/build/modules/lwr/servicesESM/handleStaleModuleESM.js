const handleStaleModuleHooks = [];
let socket;
export function registerHandleStaleModuleHook(callback) {
  handleStaleModuleHooks.push(callback);

  if (!socket) {
    socket = new WebSocket(`ws://${location.host}`);
    socket.addEventListener('message', async ({
      data
    }) => {
      const event = JSON.parse(data);

      if (event.eventType === 'moduleUpdate') {
        const {
          oldHash,
          newHash,
          module: {
            specifier
          }
        } = event.payload; // keep evaluating hooks unless return value is null

        for (let i = 0; i < handleStaleModuleHooks.length; i++) {
          const hook = handleStaleModuleHooks[i];
          const result = hook({
            name: specifier,
            oldHash,
            newHash
          });

          if (result !== null) {
            break;
          }
        }
      }
    });
  }
}