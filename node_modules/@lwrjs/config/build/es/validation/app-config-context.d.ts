import { AssetDirConfig, AssetFileConfig, LwrErrorRoute, LwrRoute, NormalizedLwrGlobalConfig, NormalizedLwrAppBootstrapConfig, LwrLockerConfig } from '@lwrjs/types';
import { Node } from 'jsonc-parser';
import { Diagnostic } from '@lwrjs/diagnostics';
declare type RequiredAssetDirConfig = Required<AssetDirConfig>;
declare type RequiredAssetFileConfig = Required<AssetFileConfig>;
declare type RequiredLwrRoute = Required<LwrRoute>;
declare type RequiredLwrErrorRoute = Required<LwrErrorRoute>;
declare type RequiredLwrLockerConfig = Required<LwrLockerConfig>;
interface ConfigMap {
    root: NormalizedLwrGlobalConfig;
    assetDir: RequiredAssetDirConfig;
    assetFile: RequiredAssetFileConfig;
    routes: RequiredLwrRoute;
    errorRoutes: RequiredLwrErrorRoute;
    bootstrap: NormalizedLwrAppBootstrapConfig;
    locker: RequiredLwrLockerConfig;
}
export declare const ROOT_ATTRIBUTE_KEYS: ["amdLoader", "apiVersion", "assets", "assetProviders", "assetTransformers", "bundleConfig", "cacheDir", "contentDir", "environment", "errorRoutes", "esmLoader", "staticSiteGenerator", "globalData", "globalDataDir", "hooks", "ignoreLwrConfigFile", "lwrConfigFile", "layoutsDir", "locker", "lwc", "lwrVersion", "moduleProviders", "port", "basePath", "resourceProviders", "rootDir", "routes", "serverMode", "serverType", "templateEngine", "viewProviders", "viewTransformers"];
export declare const ASSET_DIR_ATTRIBUTE_KEYS: ["alias", "dir", "urlPath"];
export declare const ASSET_FILE_ATTRIBUTE_KEYS: ["alias", "file", "urlPath"];
export declare const LOCKER_ATTRIBUTE_KEYS: ["enabled", "trustedComponents", "clientOnly"];
export declare const ROUTE_ATTRIBUTE_KEYS: ["bootstrap", "subRoutes", "contentTemplate", "id", "cache", "layoutTemplate", "method", "path", "rootComponent", "routeHandler", "properties"];
export declare const ERROR_ROUTE_ATTRIBUTE_KEYS: ["bootstrap", "subRoutes", "contentTemplate", "id", "layoutTemplate", "rootComponent", "routeHandler", "status", "properties", "cache"];
export declare const BOOTSTRAP_ATTRIBUTE_KEYS: ["autoBoot", "syntheticShadow", "workers", "services", "configAsSrc", "ssr"];
export declare const BASE_PATH_REGEX: RegExp;
export declare class ValidationContext {
    diagnostics: Diagnostic[];
    sourceText: string;
    constructor(sourceText: string);
    private getLocationFromNode;
    assertIsObject<T extends keyof ConfigMap>(node: Node, property: T): void;
    assertIsBoolean(node: Node | undefined, property: string): void;
    assertIsArray(node: Node | undefined, property: string): void;
    assertIsSpecifier(node: Node | undefined, property: string): void;
    assertIsPath(node: Node | undefined, property: string): void;
    assertIsPort(node: Node | undefined, property: string): void;
    assertIsServerType(node: Node | undefined, property: string): void;
    assertIsStaticSiteGenerator(node: Node | undefined, property: string): void;
    assertIsMethod(node: Node | undefined, property: string): void;
    assertIsStatus(node: Node | undefined, property: string): void;
    assertIsEnvironment(node: Node | undefined, property: string): void;
    assertIsBasePath(node: Node | undefined, property: string): void;
    assertNotEmptyString(node: Node | undefined, property: string): void;
    assertNotEmptyArray(node: Node | undefined, property: string): void;
    assertHasOneOrMore(node: Node, property: string, childProps: string[]): void;
    assertHasOnlyOne(node: Node, property: string, childProps: string[]): void;
    assertArrayOfStrings(node: Node | undefined, property: string): void;
    assertArrayOfSpecifiers(node: Node | undefined, property: string): void;
    assertArrayOfServices(node: Node | undefined, property: string): void;
    assertUniqueIds(nodes: Node[], property: string): void;
    assertRequiredKeys(node: Node, property: string, requiredPropertyKeys: string[]): void;
    assertValidKeys<T extends keyof ConfigMap>(node: Node, property: T, validPropertyKeys: (keyof ConfigMap[T])[]): void;
}
export {};
//# sourceMappingURL=app-config-context.d.ts.map