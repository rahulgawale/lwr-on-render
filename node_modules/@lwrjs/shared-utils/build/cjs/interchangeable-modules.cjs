var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/shared-utils/src/interchangeable-modules.ts
__markAsModule(exports);
__export(exports, {
  discoverInterchangeableModules: () => discoverInterchangeableModules,
  normalizeInterchangeableModuleConfig: () => normalizeInterchangeableModuleConfig,
  resolveCustomLWCMetadata: () => resolveCustomLWCMetadata
});
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var import_resolve = __toModule(require("resolve"));
var import_fs2 = __toModule(require("./fs.cjs"));
var CONFIG_FILES = ["package.json", "lwc.config.json", "lwr.config.json"];
var NoLwcModuleError = class extends Error {
  constructor() {
    super("No LWC module found");
    this.code = "NO_LWC_MODULE_FOUND";
  }
};
function isNpmModuleRecord(module2) {
  return module2.npm !== void 0;
}
function discoverInterchangeableModules(modules, interchangeableModules) {
  if (!interchangeableModules) {
    interchangeableModules = new Map();
  }
  if (modules.length === 0) {
    return interchangeableModules;
  }
  const nestedModules = [];
  for (const module2 of modules) {
    if (!isNpmModuleRecord(module2)) {
      continue;
    }
    const packageJsonPath = import_resolve.default.sync(`${module2.npm}/package.json`);
    const packageJson = JSON.parse((0, import_fs2.readFile)(packageJsonPath));
    let lwcConfig = packageJson.lwc;
    if (!lwcConfig) {
      const lwcConfigPath = import_path.default.join(import_path.default.dirname(packageJsonPath), "lwc.config.json");
      lwcConfig = JSON.parse((0, import_fs2.readFile)(lwcConfigPath));
    }
    if (lwcConfig?.modules?.length) {
      nestedModules.push(...lwcConfig.modules);
    }
    if (lwcConfig?.interchangeableModules) {
      interchangeableModules = normalizeInterchangeableModuleConfig(lwcConfig.interchangeableModules, interchangeableModules);
    }
  }
  return discoverInterchangeableModules(nestedModules, interchangeableModules);
}
function resolveCustomLWCMetadata(dir) {
  for (const configFile of CONFIG_FILES) {
    const configPath = import_path.default.join(dir, configFile);
    if (import_fs.default.existsSync(configPath)) {
      let metadata = JSON.parse((0, import_fs2.readFile)(configPath));
      if (metadata.lwc) {
        metadata = metadata.lwc;
      }
      if (!metadata.modules) {
        continue;
      }
      const {interchangeable, interchangeableModules} = metadata;
      return {
        interchangeable,
        interchangeableModules
      };
    }
  }
  throw new NoLwcModuleError();
}
function normalizeInterchangeableModuleConfig(records, interchangeableModules) {
  return records.reduce((interchangeableModules2, record) => {
    for (const [target, override] of Object.entries(record.modules)) {
      const contextMap = interchangeableModules2.get(target) || new Map();
      if (contextMap.has(record.context)) {
        throw `Multiple implementations found for "${target}" in the "${record.context}" context`;
      }
      contextMap.set(record.context, override);
      interchangeableModules2.set(target, contextMap);
    }
    return interchangeableModules2;
  }, interchangeableModules || new Map());
}
