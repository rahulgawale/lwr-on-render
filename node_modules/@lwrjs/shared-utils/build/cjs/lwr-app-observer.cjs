var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/shared-utils/src/lwr-app-observer.ts
__markAsModule(exports);
__export(exports, {
  LwrApplicationObserver: () => LwrApplicationObserver
});
var import_events = __toModule(require("events"));
var MODULE_DEF_CHANGED_EVENT = "module_definition_changed";
var MODULE_SOURCE_CHANGED_EVENT = "module_source_changed";
var VIEW_SOURCE_CHANGED_EVENT = "view_source_changed";
var ASSET_SOURCE_CHANGED_EVENT = "asset_source_changed";
var LwrEmitter = class {
  constructor(observer) {
    this.observer = observer;
  }
  notifyAssetSourceChanged(payload) {
    this.observer.emit(ASSET_SOURCE_CHANGED_EVENT, {
      eventType: ASSET_SOURCE_CHANGED_EVENT,
      payload
    });
  }
  notifyViewSourceChanged(payload) {
    this.observer.emit(VIEW_SOURCE_CHANGED_EVENT, {
      eventType: VIEW_SOURCE_CHANGED_EVENT,
      payload
    });
  }
  notifyModuleDefinitionChanged(payload) {
    this.observer.emit(MODULE_DEF_CHANGED_EVENT, {
      eventType: MODULE_DEF_CHANGED_EVENT,
      payload
    });
  }
  notifyModuleSourceChanged(payload) {
    this.observer.emit(MODULE_SOURCE_CHANGED_EVENT, {
      eventType: MODULE_SOURCE_CHANGED_EVENT,
      payload
    });
  }
};
var LwrApplicationObserver = class extends import_events.EventEmitter {
  constructor() {
    super();
  }
  onModuleDefinitionChange(listener) {
    this.on(MODULE_DEF_CHANGED_EVENT, listener);
  }
  onModuleSourceChange(listener) {
    this.on(MODULE_SOURCE_CHANGED_EVENT, listener);
  }
  onViewSourceChange(listener) {
    this.on(VIEW_SOURCE_CHANGED_EVENT, listener);
  }
  onAssetSourceChange(listener) {
    this.on(ASSET_SOURCE_CHANGED_EVENT, listener);
  }
  createLwrEmitter() {
    return new LwrEmitter(this);
  }
};
