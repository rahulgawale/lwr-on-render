var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/shared-utils/src/tasks.ts
__markAsModule(exports);
__export(exports, {
  InflightTasks: () => InflightTasks,
  TaskPool: () => TaskPool
});
var Task = class {
  constructor(taskFunction, caller, resolve, reject) {
    this.taskFunction = taskFunction;
    this.caller = caller;
    this.resolve = resolve;
    this.reject = reject;
  }
};
var TaskPool = class {
  constructor(size) {
    this.queue = [];
    this.running = 0;
    this.size = size || 15;
  }
  async execute(taskFunction, caller) {
    return new Promise((resolve, reject) => {
      const task = new Task(taskFunction, caller || this, resolve, reject);
      if (this.running >= this.size) {
        this.queue.push(task);
      } else {
        this.start(task);
      }
    });
  }
  async start(task) {
    this.running++;
    try {
      const ret = await task.taskFunction.bind(task.caller)();
      task.resolve(ret);
    } catch (err) {
      task.reject(err);
    } finally {
      this.running--;
      this.runNext();
    }
  }
  runNext() {
    const next = this.queue.shift();
    if (next) {
      this.start(next);
    }
  }
};
var InflightTasks = class {
  constructor() {
    this.tasks = new Map();
  }
  execute(id, fn) {
    let promise = this.tasks.get(id);
    if (!promise) {
      promise = fn().finally(() => this.tasks.delete(id));
      this.tasks.set(id, promise);
    }
    return promise;
  }
};
