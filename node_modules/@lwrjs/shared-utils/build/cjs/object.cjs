var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/shared-utils/src/object.ts
__markAsModule(exports);
__export(exports, {
  debounce: () => debounce,
  deepFreeze: () => deepFreeze
});
function _deepFreeze(obj, maxDepth, depth) {
  if (depth < maxDepth) {
    Object.keys(obj).forEach((prop) => {
      const value = obj[prop];
      if (typeof value === "object" && !Object.isFrozen(value)) {
        _deepFreeze(value, maxDepth, depth + 1);
      }
    });
    return Object.freeze(obj);
  }
}
function deepFreeze(obj, maxDepth = 5) {
  return _deepFreeze(obj, maxDepth, 0);
}
var debounce = (func, waitFor) => {
  const timeouts = new Map();
  const debounced = (...args) => {
    const firstArg = args[0];
    if (!timeouts.has(firstArg)) {
      func(...args);
      timeouts.set(args[0], setTimeout(() => {
        timeouts.delete(firstArg);
      }, waitFor));
    }
  };
  return debounced;
};
