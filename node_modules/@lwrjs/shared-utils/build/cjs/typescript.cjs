var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/shared-utils/src/typescript.ts
__markAsModule(exports);
__export(exports, {
  transpileTs: () => transpileTs
});
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var import_esbuild = __toModule(require("esbuild"));
var esbuild = import_esbuild.default;
if (!import_esbuild.default) {
  try {
    esbuild = require("esbuild");
  } catch {
  }
}
var isCommonJs = typeof module !== "undefined";
var ESBUILD_EXTENSION_PLUGIN = function(absFilePath, format) {
  return {
    name: "replace-extension-plugin",
    setup(build) {
      build.onResolve({filter: /.*/}, ({path, importer, resolveDir}) => {
        if (path !== absFilePath) {
          if (path.startsWith(".")) {
            const importeeExt = (0, import_path.extname)(path);
            const ext = importeeExt !== "" ? importeeExt : ".ts";
            let absPath = (0, import_path.join)((0, import_path.dirname)(importer), `${path}${ext}`);
            if (!import_fs.default.existsSync(absPath) && ext === ".js") {
              absPath = absPath.replace(".js", ".ts");
            }
            return {path: absPath};
          } else {
            return {
              external: true
            };
          }
        }
      });
    }
  };
};
async function transpileTs(tsAbsPath, {rootDir, cacheDir}) {
  const format = isCommonJs ? "cjs" : "esm";
  const ext = format === "esm" ? ".mjs" : ".cjs";
  const pathRelativeToRoot = tsAbsPath.replace(new RegExp(`^${rootDir}`), "");
  const outBasename = pathRelativeToRoot.replace(/\//g, "_");
  const outFilename = outBasename.replace(/\.ts$/, ext);
  const outfile = (0, import_path.join)(cacheDir, outFilename);
  await esbuild.build({
    format,
    bundle: true,
    logLevel: "error",
    entryPoints: [tsAbsPath],
    sourcemap: true,
    outfile,
    plugins: [ESBUILD_EXTENSION_PLUGIN(tsAbsPath, format)]
  });
  return outfile;
}
