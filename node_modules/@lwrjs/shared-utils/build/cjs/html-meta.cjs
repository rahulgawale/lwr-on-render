var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/shared-utils/src/html-meta.ts
__markAsModule(exports);
__export(exports, {
  extractMetadataFromHtml: () => extractMetadataFromHtml,
  isRelative: () => isRelative,
  isSelfUrl: () => isSelfUrl
});
var import_identity = __toModule(require("./identity.cjs"));
var import_parse5_sax_parser = __toModule(require("parse5-sax-parser"));
var import_stream = __toModule(require("stream"));
function parseAssetLocation(htmlSource, tagName, attrLocation) {
  const {startOffset, endOffset} = attrLocation;
  const srcAttr = htmlSource.substring(startOffset, endOffset);
  const split = srcAttr.indexOf("=");
  const keyAttr = srcAttr.substr(0, split);
  const url = srcAttr.slice(split + 2, -1);
  return {
    url,
    tagName,
    relative: isRelative(url),
    location: {
      startOffset: startOffset + keyAttr.length + 2,
      endOffset: endOffset - 1
    }
  };
}
function isRelative(url) {
  return !url?.match(isNotRelativeRegex);
}
var isNotRelativeRegex = /^(http(s)?:\/\/|\/)/i;
function isSelfUrl(url) {
  return !url || !!url.match(isSelfUrlRegex);
}
var isSelfUrlRegex = /^\s*(data:|#)/i;
async function extractMetadataFromHtml(htmlSource) {
  return new Promise((resolve, reject) => {
    const customElements = [];
    const openElements = new Set();
    const assetReferences = [];
    const parser = new import_parse5_sax_parser.default({sourceCodeLocationInfo: true});
    const ceRefStack = [];
    parser.on("startTag", ({
      tagName,
      attrs,
      sourceCodeLocation
    }) => {
      if (tagName.includes("-") && !openElements.has(tagName)) {
        const {startOffset, endOffset} = sourceCodeLocation;
        const ceRef = {
          tagName,
          location: {startOffset, endOffset},
          props: attrs.length ? attrs.reduce((obj, {name, value}) => {
            obj[(0, import_identity.getPropFromAttrName)(name)] = value === "" ? "true" : value;
            return obj;
          }, {}) : void 0
        };
        openElements.add(tagName);
        if (ceRefStack.length) {
          const last = ceRefStack[ceRefStack.length - 1];
          last.children = last.children ? [...last.children, ceRef] : [ceRef];
          ceRefStack.push(ceRef);
        } else {
          customElements.push(ceRef);
          ceRefStack.push(ceRef);
        }
      }
      if ((tagName === "img" || tagName === "script") && sourceCodeLocation.attrs) {
        if (sourceCodeLocation.attrs.src) {
          assetReferences.push(parseAssetLocation(htmlSource, tagName, sourceCodeLocation.attrs.src));
        }
      }
      if (tagName === "link" && sourceCodeLocation.attrs) {
        if (sourceCodeLocation.attrs.href) {
          assetReferences.push(parseAssetLocation(htmlSource, tagName, sourceCodeLocation.attrs.href));
        }
      }
    });
    parser.on("endTag", ({
      tagName,
      sourceCodeLocation
    }) => {
      if (openElements.has(tagName)) {
        const ceRef = ceRefStack.pop();
        openElements.delete(tagName);
        if (!ceRef) {
          throw new Error(`Error extracting metadata: Unmatched custom element close tag for ${tagName}`);
        }
        ceRef.location.endOffset = sourceCodeLocation.endOffset;
      }
    });
    const inputStream = import_stream.Readable.from(htmlSource);
    inputStream.on("end", () => resolve({customElements, assetReferences}));
    inputStream.on("error", (error) => reject(error));
    inputStream.pipe(parser);
  });
}
