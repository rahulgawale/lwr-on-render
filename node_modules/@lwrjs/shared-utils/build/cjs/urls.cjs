var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/shared-utils/src/urls.ts
__markAsModule(exports);
__export(exports, {
  decodeViewPath: () => decodeViewPath,
  extractRequestParams: () => extractRequestParams,
  getClientBootstrapConfigurationRoutes: () => getClientBootstrapConfigurationRoutes,
  getClientBootstrapConfigurationUri: () => getClientBootstrapConfigurationUri,
  getClientBootstrapConfigurationUriPrefix: () => getClientBootstrapConfigurationUriPrefix,
  removeClientBootstrapConfigurationSuffix: () => removeClientBootstrapConfigurationSuffix
});
var import_path_to_regexp = __toModule(require("path-to-regexp"));
var CONFIG_SUFFIX = "/config.js";
var SIGNATURE_SIGIL = "s";
function getClientBootstrapConfigurationUri(routeInfo, runtimeEnvironment, runtimeParams, signature) {
  const encodeUrl = `-${encodeURIComponent(routeInfo.url)}-`;
  const configUrlPrefix = getClientBootstrapConfigurationUriPrefix(routeInfo, runtimeEnvironment, runtimeParams);
  const signatureSegment = signature ? `/${SIGNATURE_SIGIL}/${signature}` : "";
  return `${configUrlPrefix}/${encodeUrl}${signatureSegment}${CONFIG_SUFFIX}`;
}
function decodeViewPath(encodedViewPath) {
  let decodePath = decodeURIComponent(encodedViewPath);
  if (encodedViewPath.startsWith("-") && encodedViewPath.endsWith("-")) {
    decodePath = decodePath.substring(1, decodePath.length - 1);
  }
  return decodePath;
}
function getClientBootstrapConfigurationUriPrefix(routeInfo, runtimeEnvironment, runtimeParams) {
  const {apiVersion, format, basePath} = runtimeEnvironment;
  const {id} = routeInfo;
  const locale = runtimeParams?.locale;
  const environment = runtimeParams?.environment;
  if (locale && environment) {
    return `${basePath}/${apiVersion}/application/${format}/l/${locale}/e/${environment}/ai/${id}/configuration/ci`;
  } else if (locale) {
    return `${basePath}/${apiVersion}/application/${format}/l/${locale}/ai/${id}/configuration/ci`;
  } else if (environment) {
    return `${basePath}/${apiVersion}/application/${format}/e/${environment}/ai/${id}/configuration/ci`;
  } else {
    return `${basePath}/${apiVersion}/application/${format}/ai/${id}/configuration/ci`;
  }
}
function removeClientBootstrapConfigurationSuffix(url) {
  let ret = url;
  if (url.endsWith(CONFIG_SUFFIX)) {
    ret = url.slice(0, -CONFIG_SUFFIX.length);
  }
  return ret;
}
function getClientBootstrapConfigurationRoutes() {
  return [
    `/:apiVersion/application/:format/l/:locale/ai/:appId/configuration/ci/:encodedViewPath${CONFIG_SUFFIX}`,
    `/:apiVersion/application/:format/l/:locale/e/:environment/ai/:appId/configuration/ci/:encodedViewPath${CONFIG_SUFFIX}`,
    `/:apiVersion/application/:format/ai/:appId/configuration/ci/:encodedViewPath${CONFIG_SUFFIX}`,
    `/:apiVersion/application/:format/e/:environment/ai/:appId/configuration/ci/:encodedViewPath${CONFIG_SUFFIX}`,
    `/:apiVersion/application/:format/l/:locale/ai/:appId/configuration/ci/:encodedViewPath/s/:signature${CONFIG_SUFFIX}`,
    `/:apiVersion/application/:format/l/:locale/e/:environment/ai/:appId/configuration/ci/:encodedViewPath/s/:signature${CONFIG_SUFFIX}`,
    `/:apiVersion/application/:format/ai/:appId/configuration/ci/:encodedViewPath/s/:signature${CONFIG_SUFFIX}`,
    `/:apiVersion/application/:format/e/:environment/ai/:appId/configuration/ci/:encodedViewPath/s/:signature${CONFIG_SUFFIX}`
  ];
}
function extractRequestParams(parameterizedRoute, resolvedUrl, existingParams) {
  const keys = [];
  const re = (0, import_path_to_regexp.pathToRegexp)(parameterizedRoute, keys);
  const params = existingParams || {};
  if (keys.length > 0) {
    const result = re.exec(resolvedUrl) || new Array(keys.length);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i].name;
      const value = result[i + 1];
      params[key] = value;
    }
  }
  return params;
}
