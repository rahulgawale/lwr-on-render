var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/shared-utils/src/import-metadata.ts
__markAsModule(exports);
__export(exports, {
  ModuleNameType: () => ModuleNameType,
  getImportMetadata: () => getImportMetadata
});
var import_es_module_lexer = __toModule(require("es-module-lexer"));
var ModuleNameType;
(function(ModuleNameType2) {
  ModuleNameType2["string"] = "string";
  ModuleNameType2["unresolved"] = "unresolved";
})(ModuleNameType || (ModuleNameType = {}));
async function getImportMetadata(compiledSource) {
  const imports = [];
  const dynamicImports = [];
  const [moduleImportLocations] = await (0, import_es_module_lexer.parse)(compiledSource);
  for (const moduleImportLocation of moduleImportLocations) {
    let moduleSpecifier = compiledSource.substring(moduleImportLocation.s, moduleImportLocation.e);
    const isDynamic = moduleImportLocation.d !== -1;
    const location = {
      startColumn: moduleImportLocation.s,
      endColumn: moduleImportLocation.e
    };
    if (isDynamic) {
      const isStringLiteral = moduleSpecifier.startsWith("'") || moduleSpecifier.startsWith('"');
      const moduleNameType = isStringLiteral ? ModuleNameType.string : ModuleNameType.unresolved;
      moduleSpecifier = isStringLiteral ? moduleSpecifier.slice(1, -1) : moduleSpecifier;
      dynamicImports.push({
        moduleSpecifier,
        moduleNameType,
        location,
        importLocation: {
          startColumn: moduleImportLocation.d,
          endColumn: moduleImportLocation.s
        }
      });
    } else {
      imports.push({moduleSpecifier, location});
    }
  }
  return {
    imports,
    dynamicImports
  };
}
