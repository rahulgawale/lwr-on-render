/// <reference types="node" />
import { EventEmitter } from 'events';
import { ModuleCompiled, LwrAppEmitter, LwrAppObserver, ModuleDefinitionChangedEvent, ModuleSourceChangedEvent, CompiledView, AssetSource, AssetSourceChangedEvent, ViewSourceChangedEvent } from '@lwrjs/types';
declare class LwrEmitter implements LwrAppEmitter {
    observer: LwrApplicationObserver;
    constructor(observer: LwrApplicationObserver);
    notifyAssetSourceChanged(payload: AssetSource): void;
    notifyViewSourceChanged(payload: CompiledView): void;
    notifyModuleDefinitionChanged(payload: ModuleCompiled): void;
    notifyModuleSourceChanged(payload: ModuleCompiled): void;
}
export declare class LwrApplicationObserver extends EventEmitter implements LwrAppObserver {
    constructor();
    onModuleDefinitionChange(listener: (event: ModuleDefinitionChangedEvent) => void): void;
    onModuleSourceChange(listener: (event: ModuleSourceChangedEvent) => void): void;
    onViewSourceChange(listener: (event: ViewSourceChangedEvent) => void): void;
    onAssetSourceChange(listener: (event: AssetSourceChangedEvent) => void): void;
    createLwrEmitter(): LwrEmitter;
}
export {};
//# sourceMappingURL=lwr-app-observer.d.ts.map