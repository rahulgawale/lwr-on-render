import { AbstractModuleId, FlattenedModuleGraphs, ImportMetadata, ModuleBundler, ModuleRegistry, RuntimeEnvironment, RuntimeParams } from '@lwrjs/types';
/**
 * Get the Import Metadata for the LWR Mapping Api (https://rfcs.lwc.dev/rfcs/lwr/0000-mapping-api)
 */
export declare function getImportMetadataMappings(moduleIds: AbstractModuleId[], runtimeEnvironment: RuntimeEnvironment, runtimeParams: RuntimeParams, moduleRegistry: ModuleRegistry, moduleBundler: ModuleBundler): Promise<ImportMetadata>;
/**
 * Generate the import mapping metadata for a module graph.
 *
 * The graph must have set includeUris and includeLinkedDefinitions to link specifiers to uris.
 *
 * You can pass in an existing set of import metadata and the result will merge the imports.
 * If there is a duplicate uri the merge will keep the one from the existing metadata.
 *
 * @param moduleGraph FlattenedModuleGraphs created by the graph shared util
 * @param existingImportMetadata Optional existing ImportMetadata.  If provided the results will be a merge the two sets of URI mappings.
 * @returns Returns ImportMetadata from a module graph in the format here -> https://rfcs.lwc.dev/rfcs/lwr/0000-mapping-api#uri-mapping-resource-specification
 */
export declare function toImportMetadata(moduleGraph: FlattenedModuleGraphs, existingImportMetadata: ImportMetadata | undefined, moduleRegistry: ModuleRegistry, runtimeEnvironment: RuntimeEnvironment, runtimeParams?: RuntimeParams): Promise<ImportMetadata>;
//# sourceMappingURL=mappings.d.ts.map