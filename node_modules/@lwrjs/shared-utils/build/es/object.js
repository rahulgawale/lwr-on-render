// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _deepFreeze(obj, maxDepth, depth) {
    if (depth < maxDepth) {
        Object.keys(obj).forEach((prop) => {
            const value = obj[prop];
            if (typeof value === 'object' && !Object.isFrozen(value)) {
                _deepFreeze(value, maxDepth, depth + 1);
            }
        });
        return Object.freeze(obj);
    }
}
/**
 * Deep freeze an object
 *
 * @param obj - object to freeze
 * @param maxDepth - the number of levels to recurse
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
export function deepFreeze(obj, maxDepth = 5) {
    return _deepFreeze(obj, maxDepth, 0);
}
/**
 * Returns a function which debounces when the input function is called with the same first argument
 *
 * @param func - Function to debounce
 * @param waitFor - milliseconds to wait between calls
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type
export const debounce = (func, waitFor) => {
    const timeouts = new Map();
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/no-explicit-any
    const debounced = (...args) => {
        const firstArg = args[0];
        if (!timeouts.has(firstArg)) {
            func(...args);
            timeouts.set(args[0], setTimeout(() => {
                timeouts.delete(firstArg);
            }, waitFor));
        }
    };
    return debounced;
};
//# sourceMappingURL=object.js.map