/// <reference types="node" />
import { ResourcePaths, Watcher, ViewSource } from '@lwrjs/types';
import { lookup } from 'mime-types';
/**
 * Create a hash string for a source
 * @param source
 */
export declare function hashContent(source: string | Buffer): string;
/**
 * Read in the contents of the file path
 * @param filePath
 */
export declare function readFile(filePath: string): string;
/**
 * Given a filepath, ensure it has a file extension by checking for the file on the fs
 * @param filePath
 */
export declare function resolveFileExtension(filePath: string): string;
/**
 * Set up a watcher with the given options
 * @param options
 */
export declare function createFileWatcher(options?: any): Watcher;
/**
 * Set up file watcher
 */
export declare function setupWatcher(onModuleChange: Function): Watcher;
/**
 * Returns if view of specific type can be resolved
 *
 * @param source - path to view
 * @param type - extension of file that should be expected, i.e. 'html'
 */
export declare function canResolveView(source: string, type: string): boolean;
/**
 * Construct a ViewSource from the associated file on the fs
 * @param source - Filepath with the source (source can be an absolute or relative path)
 * @param viewFolder - File in the fs which holds the view
 */
export declare function getViewSourceFromFile(source: string): ViewSource;
export declare function normalizeDirectory(dir: string, rootDir: string): string;
export declare function normalizeResourcePath(rawPath: string, { rootDir, assets, contentDir, layoutsDir }: ResourcePaths, allowUnresolvedAlias?: boolean): string;
export { lookup as mimeLookup };
//# sourceMappingURL=fs.d.ts.map