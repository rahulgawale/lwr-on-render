import visit from 'unist-util-visit';
import { slugify } from '@lwrjs/shared-utils';
function isLiteralNode(node) {
    return node && typeof node.value === 'string';
}
function isParentNode(node) {
    return node && Array.isArray(node.children);
}
function headingVisitor(collector, { depth, children }) {
    const text = toStringAll(children);
    const slug = slugify(text);
    if (depth > 1) {
        // skip H1
        collector.headings.push({ depth, text, slug });
    }
}
const TAG_NAME_REGEX = /<\/?([^>\s]+).*>/gmu;
function htmlCustomElementsVisitor(collector, node) {
    const matches = node.value.matchAll(TAG_NAME_REGEX);
    for (const [, tagName] of matches) {
        if (tagName.includes('-')) {
            collector.customElements.add(tagName);
        }
    }
}
function toStringAll(values) {
    const result = [];
    let index = -1;
    while (++index < values.length) {
        if (isLiteralNode(values[index])) {
            result[index] = toString(values[index]);
        }
    }
    return result.join('');
}
function toString(node) {
    let ret = '';
    if (isLiteralNode(node)) {
        ret = String(node.value);
    }
    else if (isParentNode(node)) {
        ret = toStringAll(node.children);
    }
    return ret;
}
export function mdMetadataCollector(options) {
    const collector = options.collector;
    const internalMetaCollector = {
        customElements: new Set(),
        headings: [],
    };
    return function (tree) {
        visit(tree, 'heading', headingVisitor.bind(undefined, internalMetaCollector));
        visit(tree, 'html', htmlCustomElementsVisitor.bind(undefined, internalMetaCollector));
        collector.headings = internalMetaCollector.headings;
        collector.customElements = Array.from(internalMetaCollector.customElements);
    };
}
//# sourceMappingURL=md-metadata-collector.js.map