var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/markdown-view-provider/src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_path = __toModule(require("path"));
var import_gray_matter = __toModule(require("gray-matter"));
var import_markdown_parser = __toModule(require("./markdown-parser/markdown-parser.cjs"));
var import_vfile = __toModule(require("vfile"));
function canResolve(route) {
  return !route.rootComponent && !!route.contentTemplate && (0, import_shared_utils.canResolveView)(route.contentTemplate, "md");
}
var MarkdownViewProvider = class {
  constructor(pluginConfig = {}, providerConfig) {
    this.cachedViews = new Map();
    this.pluginConfig = pluginConfig;
    this.routes = providerConfig.config.routes;
    this.name = "lwr-markdown-view-provider";
    this.emitter = providerConfig.appEmitter;
    const {
      runtimeEnvironment: {watchFiles}
    } = providerConfig;
    if (watchFiles) {
      this.watcher = (0, import_shared_utils.setupWatcher)(this.onModuleChange.bind(this));
    }
  }
  async onModuleChange(fileChanged) {
    const cachedView = this.cachedViews.get(fileChanged);
    if (!cachedView) {
      throw new Error("We are observing a file we have not yet processed, this shouldnt happen...");
    }
    const compiledView = await this.getView(cachedView.viewId);
    if (!compiledView) {
      throw new Error("Unable to get compiledView");
    }
    this.emitter.notifyViewSourceChanged(compiledView);
  }
  async initialize() {
    this.markdown = await (0, import_markdown_parser.default)(this.pluginConfig.parserOptions);
    return;
  }
  async getView(viewId) {
    if (!viewId.contentTemplate || !canResolve(viewId)) {
      return;
    }
    if (!this.markdown) {
      throw new Error("Markdown View Provider must be initialized");
    }
    const viewSource = (0, import_shared_utils.getViewSourceFromFile)(viewId.contentTemplate);
    const {content, data: viewMetadata} = (0, import_gray_matter.default)(viewSource.originalSource);
    const vFile = (0, import_vfile.default)({path: viewId.contentTemplate, contents: content});
    const {html, metadata: markdownMetadata} = await this.markdown.render(vFile);
    const {layoutTemplate, ...nonLwrManagedMetadata} = viewMetadata;
    const compiledView = {
      ...viewSource,
      layoutTemplate,
      properties: {
        ...nonLwrManagedMetadata,
        ...markdownMetadata
      },
      viewId,
      render: async () => {
        return {
          renderedView: html
        };
      }
    };
    const fullPath = import_path.default.resolve(viewId.contentTemplate);
    if (this.watcher && !this.cachedViews.has(fullPath)) {
      this.cachedViews.set(fullPath, {compiledView, viewId});
      this.watcher.add(fullPath);
    }
    return compiledView;
  }
};
var src_default = MarkdownViewProvider;
