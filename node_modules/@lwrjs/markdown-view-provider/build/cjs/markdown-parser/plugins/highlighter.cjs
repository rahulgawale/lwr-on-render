var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/markdown-view-provider/src/markdown-parser/plugins/highlighter.ts
__markAsModule(exports);
__export(exports, {
  getHtmlHighlighter: () => getHtmlHighlighter
});
var import_hast_util_to_string = __toModule(require("hast-util-to-string"));
var import_hast_util_is_element = __toModule(require("hast-util-is-element"));
var import_unist_util_visit = __toModule(require("unist-util-visit"));
var Shiki = __toModule(require("shiki"));
async function getHtmlHighlighter({theme}) {
  const highlighter = await Shiki.getHighlighter({
    theme,
    langs: ["javascript"]
  });
  const languageRegistry = {
    loaded: new Set(highlighter.getLoadedLanguages()),
    unknown: new Set()
  };
  async function loadMissingLanguages(langs) {
    const promises = [];
    for (const lang of langs) {
      if (!languageRegistry.loaded.has(lang) && !languageRegistry.unknown.has(lang)) {
        promises.push(highlighter.loadLanguage(lang).then(() => languageRegistry.loaded.add(lang), () => languageRegistry.unknown.add(lang)));
      }
    }
    await Promise.all(promises);
  }
  return function htmlHighlighter() {
    return async function(tree) {
      const highlightCandidates = [];
      (0, import_unist_util_visit.default)(tree, "element", (node, index, parent) => {
        if (!(0, import_hast_util_is_element.default)(node) || node.tagName !== "code" || !(0, import_hast_util_is_element.default)(parent) || parent.tagName !== "pre") {
          return;
        }
        const lang = getLanguage(node);
        if (lang) {
          highlightCandidates.push({parent, node, lang});
        }
      });
      const langs = new Set(highlightCandidates.map(({lang}) => lang));
      await loadMissingLanguages(langs);
      for (const {parent, node, lang} of highlightCandidates) {
        if (languageRegistry.loaded.has(lang)) {
          const tokens = highlighter.codeToThemedTokens((0, import_hast_util_to_string.default)(node), lang, theme);
          addClassToHastElement(parent, "shiki");
          const backgroundColor = highlighter.getBackgroundColor(theme);
          addStyleToHastElement(parent, `background-color: ${backgroundColor}`);
          node.children = tokensToHast(tokens);
        }
      }
    };
  };
}
function getLanguage(node) {
  const className = node.properties?.className;
  if (className) {
    for (const part of className) {
      const match = part.match(/language-(\w+)/);
      if (match) {
        return match[1];
      }
    }
  }
  return void 0;
}
function addClassToHastElement(elm, klass) {
  const properties = elm.properties || {};
  const className = properties.className || [];
  className.push(klass);
  properties.className = className;
  elm.properties = properties;
}
function addStyleToHastElement(elm, style) {
  const properties = elm.properties || {};
  const styles = properties.style || [];
  styles.push(style);
  properties.style = styles;
  elm.properties = properties;
}
function tokensToHast(lines) {
  const tree = [];
  for (const line of lines) {
    if (line.length === 0) {
      tree.push({
        type: "text",
        value: "\n"
      });
    } else {
      for (const token of line) {
        tree.push({
          type: "element",
          tagName: "span",
          properties: {
            style: tokenToStyle(token)
          },
          children: [
            {
              type: "text",
              value: token.content
            }
          ]
        });
      }
      tree.push({
        type: "text",
        value: "\n"
      });
    }
  }
  tree.pop();
  return tree;
}
function tokenToStyle(token) {
  const styles = [];
  if (token.color) {
    styles.push(`color: ${token.color}`);
  }
  if (token.fontStyle) {
    if (token.fontStyle & Shiki.FontStyle.Bold) {
      styles.push("font-weight: bold");
    }
    if (token.fontStyle & Shiki.FontStyle.Italic) {
      styles.push("font-style: italic");
    }
    if (token.fontStyle & Shiki.FontStyle.Underline) {
      styles.push("text-decoration: underline");
    }
  }
  return styles;
}
