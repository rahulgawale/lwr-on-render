var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/markdown-view-provider/src/markdown-parser/plugins/md-metadata-collector.ts
__markAsModule(exports);
__export(exports, {
  mdMetadataCollector: () => mdMetadataCollector
});
var import_unist_util_visit = __toModule(require("unist-util-visit"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
function isLiteralNode(node) {
  return node && typeof node.value === "string";
}
function isParentNode(node) {
  return node && Array.isArray(node.children);
}
function headingVisitor(collector, {depth, children}) {
  const text = toStringAll(children);
  const slug = (0, import_shared_utils.slugify)(text);
  if (depth > 1) {
    collector.headings.push({depth, text, slug});
  }
}
var TAG_NAME_REGEX = /<\/?([^>\s]+).*>/gmu;
function htmlCustomElementsVisitor(collector, node) {
  const matches = node.value.matchAll(TAG_NAME_REGEX);
  for (const [, tagName] of matches) {
    if (tagName.includes("-")) {
      collector.customElements.add(tagName);
    }
  }
}
function toStringAll(values) {
  const result = [];
  let index = -1;
  while (++index < values.length) {
    if (isLiteralNode(values[index])) {
      result[index] = toString(values[index]);
    }
  }
  return result.join("");
}
function toString(node) {
  let ret = "";
  if (isLiteralNode(node)) {
    ret = String(node.value);
  } else if (isParentNode(node)) {
    ret = toStringAll(node.children);
  }
  return ret;
}
function mdMetadataCollector(options) {
  const collector = options.collector;
  const internalMetaCollector = {
    customElements: new Set(),
    headings: []
  };
  return function(tree) {
    (0, import_unist_util_visit.default)(tree, "heading", headingVisitor.bind(void 0, internalMetaCollector));
    (0, import_unist_util_visit.default)(tree, "html", htmlCustomElementsVisitor.bind(void 0, internalMetaCollector));
    collector.headings = internalMetaCollector.headings;
    collector.customElements = Array.from(internalMetaCollector.customElements);
  };
}
