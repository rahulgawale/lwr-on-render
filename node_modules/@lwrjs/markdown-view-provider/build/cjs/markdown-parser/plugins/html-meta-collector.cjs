var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/markdown-view-provider/src/markdown-parser/plugins/html-meta-collector.ts
__markAsModule(exports);
__export(exports, {
  htmlMetadataCollector: () => htmlMetadataCollector
});
var import_unist_util_visit = __toModule(require("unist-util-visit"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
function imageVisitor(collector, node) {
  if (node.tagName === "img") {
    const url = node.properties.src;
    collector.images.push({
      url,
      tagName: "img",
      relative: (0, import_shared_utils.isRelative)(url),
      location: {
        startOffset: node.position?.start.offset || -1,
        endOffset: node.position?.end.offset || -1
      }
    });
  }
}
function htmlMetadataCollector(options) {
  const collector = options.collector;
  const internalMetaCollector = {images: []};
  return function(tree) {
    (0, import_unist_util_visit.default)(tree, "element", imageVisitor.bind(void 0, internalMetaCollector));
    collector.images = internalMetaCollector.images;
  };
}
