var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/markdown-view-provider/src/markdown-parser/markdown-parser.ts
__markAsModule(exports);
__export(exports, {
  default: () => markdownParser
});
var import_unified = __toModule(require("unified"));
var import_remark_parse = __toModule(require("remark-parse"));
var import_remark_rehype = __toModule(require("remark-rehype"));
var import_remark_gfm = __toModule(require("remark-gfm"));
var import_rehype_stringify = __toModule(require("rehype-stringify"));
var import_highlighter = __toModule(require("./plugins/highlighter.cjs"));
var import_rehype_raw = __toModule(require("rehype-raw"));
var import_md_metadata_collector = __toModule(require("./plugins/md-metadata-collector.cjs"));
var import_html_slug = __toModule(require("./plugins/html-slug.cjs"));
var import_html_meta_collector = __toModule(require("./plugins/html-meta-collector.cjs"));
async function markdownParser(options = {}) {
  const {markdownPlugins = [], htmlPlugins = [], codeHighlightTheme = "light-plus"} = options;
  const highlighter = await (0, import_highlighter.getHtmlHighlighter)({theme: codeHighlightTheme});
  return {
    async render(vFile) {
      const collector = {};
      const processor = (0, import_unified.default)().use(import_remark_parse.default).use(import_remark_gfm.default).use(markdownPlugins).use(import_md_metadata_collector.mdMetadataCollector, {collector}).use(import_remark_rehype.default, {allowDangerousHtml: true}).use(import_rehype_raw.default).use(import_html_slug.slug).use(htmlPlugins).use(import_html_meta_collector.htmlMetadataCollector, {collector}).use(highlighter).use(import_rehype_stringify.default);
      const result = await processor.process(vFile);
      const {customElements = [], headings = [], images = []} = collector;
      return {
        html: result.contents.toString(),
        metadata: {
          customElements,
          images,
          headings
        }
      };
    }
  };
}
