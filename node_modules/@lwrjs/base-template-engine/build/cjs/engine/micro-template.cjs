var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/base-template-engine/src/engine/micro-template.ts
__markAsModule(exports);
__export(exports, {
  default: () => template
});
var import_escape_goat = __toModule(require("escape-goat"));
function template(template2, data) {
  if (typeof template2 !== "string") {
    throw new TypeError(`Expected a \`string\` in the first argument, got \`${typeof template2}\``);
  }
  if (typeof data !== "object") {
    throw new TypeError(`Expected an \`object\` or \`Array\` in the second argument, got \`${typeof data}\``);
  }
  const triplebraceRegex = /{{{(.*?)}}}/g;
  if (triplebraceRegex.test(template2)) {
    template2 = template2.replace(triplebraceRegex, (_, key) => {
      let result = data;
      for (const property of key.split(".")) {
        result = result && result[property] ? result[property] : "";
      }
      return String(result);
    });
  }
  const doubleBraceRegex = /{{(.*?)}}/g;
  if (doubleBraceRegex.test(template2)) {
    template2 = template2.replace(doubleBraceRegex, (_, key) => {
      let result = data;
      for (const property of key.split(".")) {
        result = result && result[property] ? result[property] : "";
      }
      return (0, import_escape_goat.htmlEscape)(String(result));
    });
  }
  return template2;
}
