import { Worker } from 'worker_threads';
const HEADER = '/* This module is generated and meant to be used in a Server context */';
/**
 * Sandbox APIs
 * @param globalThis.getContext
 * function to provide prop request context object with properties such as props, params, and locale
 *
 * @param globalThis.fetch
 * fetch function for external data fetching
 *
 * @param globalThis.postMessage
 * postbacks from sandbox to main thread
 */
const WORKER_CODE_SANDBOX_APIS = [
    `const { parentPort, workerData } = require('worker_threads');`,
    `globalThis.getContext = () => workerData;`,
    `globalThis.fetch = require('node-fetch');`,
    `globalThis.resolver = (...args) => parentPort.postMessage(...args);`,
];
/**
 * Run the SSR module code in a worker, and return the results to the main thread.
 * @param codes - Code strings which SSR a root component
 * @returns a promise to the SSRed code string, or an error message
 */
export default function runCode(codes, workerData) {
    const workerCode = [HEADER, ...WORKER_CODE_SANDBOX_APIS, ...codes].join('\n');
    return new Promise((resolve, reject) => {
        const worker = new Worker(workerCode, { eval: true, workerData });
        worker.on('message', resolve);
        worker.on('error', reject);
        worker.on('exit', (code) => {
            if (code !== 0) {
                reject(new Error(`SSR worker stopped with exit code: ${code}`));
            }
        });
    });
}
//# sourceMappingURL=sandbox-worker.js.map