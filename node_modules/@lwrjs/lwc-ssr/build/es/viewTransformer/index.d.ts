import type { ProviderContext, ViewTransformPlugin } from '@lwrjs/types';
interface SsrPluginOptions {
    shareWorker?: boolean;
}
/**
 * This is a view transformer run by the view registry during linking of a page document/route (configured in lwr.config.json[routes]).
 * If the "ssr" bootstrap flag is on for the route, it will server-side render (SSR) each custom element found in the page HTML.
 *
 * SSR Flow:
 *  1. There is a request to generate a view (ie: page document) via the UI middleware or static site generation
 *  2. During view generation, the view registry runs all the registered view transformers (including this one)
 *  3. This view transformer links the SSRed string for EVERY custom element (ie: root component) found in the page document:
 *      a) It requests a module which SSRs a given custom element, generated by "lwc-ssr/moduleProvider"
 *      b) A bundle is created for the generated SSR module (see "./ssr-element")
 *      c) The bundle code is run inside a worker (see "./ssr-element"), with context stored in "workerData"
 *      d) RootComponent.getPageData() is run to preload data and <links>, if available
 *      e) The generated SSR module (running the worker) passes the SSRed code string back to the main thread
 *      f) The SSRed string is used to overwrite/link each custom element (eg: "<c-app></c-app>") in the document (see "stringBuilder.overwrite")
 *      g) A script containing all the serialized properties is added for hydration
 * 4. The view/page document now contains SSRed components, which will be sent to the client
 * 5. During bootstrap on the client, the "lwr/initSsr" module will hydrate ALL the custom elements on the page
 */
export default function lwcSsrViewTranformer(options: SsrPluginOptions, { moduleBundler }: ProviderContext): ViewTransformPlugin;
export {};
//# sourceMappingURL=index.d.ts.map