import AmdLoaderShimService from '@lwrjs/loader';
import { getFeatureFlags } from '@lwrjs/shared-utils';
async function readableToString(readable) {
    let result = '';
    for await (const chunk of readable) {
        result += chunk;
    }
    return result;
}
let loaderShimSource;
async function getLoaderShim(runtimeEnvironment) {
    if (loaderShimSource !== undefined) {
        return loaderShimSource;
    }
    const amdloaderShimService = new AmdLoaderShimService({}, {
        runtimeEnvironment,
        resourceRegistry: { resolveResourceUri: () => 'NOT IMPLEMENTED' },
    });
    const specifier = getFeatureFlags().LEGACY_LOADER
        ? 'lwr-loader-shim-legacy.bundle.js'
        : 'lwr-loader-shim.bundle.js';
    const resource = await amdloaderShimService.getResource({ specifier }, runtimeEnvironment);
    if (resource) {
        const { stream } = resource;
        if (stream) {
            loaderShimSource = await readableToString(stream);
            return loaderShimSource;
        }
    }
}
function getLwrConfig(bundleSpecifier, lwrVersion) {
    // This is the minimum LWR config required for the loader to be created and mountApp to succeed
    return Object.assign({}, {
        autoBoot: true,
        bootstrapModule: `${bundleSpecifier}/v/${lwrVersion}`,
        disableInitDefer: true,
        endpoints: {
            uris: { mapping: '/1/mapping/amd/1/l/en-US/mp/' },
        },
        rootComponents: [`${bundleSpecifier.split('@lwrjs/lwc-ssr/')[1]}/v/${lwrVersion}`],
    }, getFeatureFlags().LEGACY_LOADER
        ? {
            baseUrl: 'ssr',
        }
        : {
            baseUrl: '/',
            imports: {
                'any/thing.js': ['any/thing'],
            },
        });
}
// lwc/v/2_13_0 -> @lwc/engine-server/v/2_13_0
function lwcDefineOverride(lwcSpecifier) {
    return `LWR.define("${lwcSpecifier}", ["${lwcSpecifier.replace('lwc', '@lwc/engine-server')}"], function(lwcEngine) { return lwcEngine; });`;
}
const GLOBALTHIS_LWR = `globalThis.LWR = globalThis.LWR || {};`;
export default async function getCode(runtimeEnvironment, lwrVersion, bundleSpecifier, includedModules) {
    const loaderShimSource = await getLoaderShim(runtimeEnvironment);
    const lwrConfigString = JSON.stringify(getLwrConfig(bundleSpecifier, lwrVersion));
    const lwcSpecifier = includedModules.reduce((specifier, includedModule) => {
        if (includedModule.startsWith('lwc/v')) {
            return includedModule;
        }
        // define `lwc` when `@lwc/engine-server` is included in the bundle
        // `lwc` will be excluded by default when bundling is enabled
        if (!specifier && includedModule.startsWith('@lwc/engine-server/v')) {
            return includedModule.replace('@lwc/engine-server', 'lwc');
        }
        return specifier;
    }, '');
    // Order matters:
    //     1. "globalThis.LWR" must be defined prior to executing the shim and loader
    //     2. the lwc module override needs to be defined before lwc is [re]defined in the custom element code (first define wins)
    return [
        GLOBALTHIS_LWR,
        `Object.assign(globalThis.LWR, ${lwrConfigString});`,
        loaderShimSource ? loaderShimSource : '',
        lwcSpecifier ? lwcDefineOverride(lwcSpecifier) : '',
    ];
}
//# sourceMappingURL=amd-utils.js.map