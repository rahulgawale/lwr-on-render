import getCode from './amd-utils.js';
import runCode from './sandbox.js';
import { performance } from 'perf_hooks';
/**
 * Create a bundle for the given SSR module and run the code in a sandbox.
 * @param moduleInfo - specifier: The ID of the module, generated by "lwc-ssr/moduleProvider", which SSRs a component
 *                     props: A map of the key:value property pairs parsed from the custom element attributes (ie: all string values)
 * @param moduleBundler
 * @param runtimeEnvironment
 * @returns a promise to the SSRed code string
 */
export async function ssrElement({ specifier, props: templateProps }, moduleBundler, { runtimeEnvironment, runtimeParams }) {
    const { format } = runtimeEnvironment;
    const { bundleRecord, code, specifier: bundleSpecifier, version, } = format === 'esm'
        ? await moduleBundler.getModuleBundle({ specifier }, 
        // Ensure the bundle flag is always off in ESM,
        // otherwise TOO much gets bundled in the module registry
        // in ESM, resulting lwc clashes/duplication
        { ...runtimeEnvironment, bundle: false }, undefined, {
            exclude: [],
            alias: {
                // override the default "@lwc/engine-dom" package
                lwc: '@lwc/engine-server',
            },
        })
        : await moduleBundler.getModuleBundle({ specifier }, runtimeEnvironment, undefined, {
            // "lwc" will be defined as an alias to "@lwc/engine-server" in the AMD worker code.
            exclude: ['lwc'],
        });
    // Gather context to send into the SSR sandbox
    const context = {
        props: templateProps,
        params: runtimeParams.params || {},
        query: runtimeParams.query || {},
        locale: runtimeParams.locale || runtimeEnvironment.defaultLocale,
    };
    // Get the SSR string and properties bag
    const startTime = performance.now();
    const { result, props, markup } = format === 'amd'
        ? await runCode([
            ...(await getCode(runtimeEnvironment, version.replace(/\./g, '_'), bundleSpecifier, bundleRecord.includedModules)),
            code,
        ], context)
        : await runCode([code], context);
    const endTime = performance.now();
    const timeDiff = endTime - startTime;
    console.log(`[${specifier} SSR] complete in ${timeDiff} ms`);
    return { html: result, props, markup };
}
//# sourceMappingURL=ssr-element.js.map