import { ModuleCompiled, ModuleEntry, ModuleProvider, ProviderContext, AbstractModuleId } from '@lwrjs/types';
/**
 * This module provider generates code which server-side renders a given component.
 * It handles module specifiers in the form: "@lwrjs/lwc-ssr/${component specifier}".
 * eg: "@lwrjs/lwc-ssr/my/appRoot"
 */
/**
 * Create the virtual source for a module which server-side renders the given component.
 * This code is meant to be executed in a worker on the server; it is run from "lwc-ssr/viewTransformer#ssr-element" during linking.
 * The result is posted to the parentPort and the Promise in the main thread resolves.
 * If available, getPageData() is called on the root component to mutate context.props and gather page markup
 * @param rootSpecifier - The specifier for the component to SSR
 * @returns the generated module source
 */
export declare function createSsrBootstrapModule(rootSpecifier: string): string;
export default class LwcSsrModuleProvider implements ModuleProvider {
    name: string;
    version: string;
    constructor(providerConfig: unknown, { runtimeEnvironment: { lwrVersion } }: ProviderContext);
    getModuleEntry({ specifier }: AbstractModuleId): Promise<ModuleEntry | undefined>;
    getModule({ specifier, namespace, name }: AbstractModuleId): Promise<ModuleCompiled | undefined>;
}
//# sourceMappingURL=index.d.ts.map