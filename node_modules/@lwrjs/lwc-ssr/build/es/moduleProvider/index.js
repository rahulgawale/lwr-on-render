import { hashContent, moduleSpecifierToKebabCase } from '@lwrjs/shared-utils';
import { LWC_SSR_PREFIX } from '../identity.js';
/**
 * This module provider generates code which server-side renders a given component.
 * It handles module specifiers in the form: "@lwrjs/lwc-ssr/${component specifier}".
 * eg: "@lwrjs/lwc-ssr/my/appRoot"
 */
/**
 * Create the virtual source for a module which server-side renders the given component.
 * This code is meant to be executed in a worker on the server; it is run from "lwc-ssr/viewTransformer#ssr-element" during linking.
 * The result is posted to the parentPort and the Promise in the main thread resolves.
 * If available, getPageData() is called on the root component to mutate context.props and gather page markup
 * @param rootSpecifier - The specifier for the component to SSR
 * @returns the generated module source
 */
export function createSsrBootstrapModule(rootSpecifier) {
    return `
import { renderComponent } from '@lwc/engine-server';
import Ctor, * as rootComponent from '${rootSpecifier}';

(async () => {
    // 1. setup page data
    const context = globalThis.getContext();
    let props = context.props;
    let markup;
    if (rootComponent.getPageData) {
        const data = await rootComponent.getPageData(context);
        props = data.props; // overwrite public props
        markup = data.markup;
    }

    // 2. render component
    const result = renderComponent('${moduleSpecifierToKebabCase(rootSpecifier)}', Ctor, props || {});

    // 3. relay results
    globalThis.resolver({ result, props, markup });
})()`;
}
export default class LwcSsrModuleProvider {
    constructor(providerConfig, { runtimeEnvironment: { lwrVersion } }) {
        this.name = 'ssr-module-provider';
        this.version = lwrVersion;
    }
    async getModuleEntry({ specifier }) {
        if (specifier.startsWith(LWC_SSR_PREFIX)) {
            const virtualId = `<virtual>/${specifier}`;
            return {
                id: `${virtualId}|${this.version}`,
                virtual: true,
                entry: virtualId,
                specifier,
                version: this.version,
            };
        }
    }
    async getModule({ specifier, namespace, name }) {
        const moduleEntry = await this.getModuleEntry({ specifier });
        if (!moduleEntry) {
            return;
        }
        // Generate the module source which SSRs a lwc, and return the Module
        const originalSource = createSsrBootstrapModule(specifier.replace(LWC_SSR_PREFIX, ''));
        return {
            id: moduleEntry.id,
            namespace,
            name: name || specifier,
            version: this.version,
            specifier,
            moduleEntry,
            ownHash: hashContent(originalSource),
            originalSource,
            compiledSource: originalSource,
        };
    }
}
//# sourceMappingURL=index.js.map