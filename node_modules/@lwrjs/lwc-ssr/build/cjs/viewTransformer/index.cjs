var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/viewTransformer/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => lwcSsrViewTranformer
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_identity = __toModule(require("../identity.cjs"));
var import_ssr_element = __toModule(require("./ssr-element.cjs"));
function lwcSsrViewTranformer(options, {moduleBundler}) {
  return {
    name: "ssr-lwc-transformer",
    async link(stringBuilder, viewContext, {customElements}) {
      import_shared_utils.logger.debug("lwcSsrViewTranformer");
      import_shared_utils.logger.verbose("lwcSsrViewTranformer input", stringBuilder);
      if (process.env.LOCKER === "true") {
        return;
      }
      if (viewContext.view.bootstrap?.ssr) {
        const ssrModules = [];
        for (const {tagName, location, props} of customElements) {
          if (location) {
            const {startOffset, endOffset} = location;
            const moduleSpecifier = (0, import_shared_utils.kebabCaseToModuleSpecifer)(tagName);
            ssrModules.push({
              startOffset,
              endOffset,
              props,
              tagName,
              specifier: `${import_identity.LWC_SSR_PREFIX}${moduleSpecifier}`
            });
          }
        }
        const ssrProps = {};
        let ssrLinks = "";
        await Promise.all(ssrModules.map(({specifier, tagName, props, startOffset, endOffset}) => {
          return (0, import_ssr_element.ssrElement)({specifier, props}, moduleBundler, viewContext).then(({html, props: props2, markup: {links = []} = {links: []}}) => {
            if (props2) {
              const propsId = (0, import_identity.getPropsId)();
              ssrProps[propsId] = props2;
              const [, remain] = html.split(`<${tagName}`);
              html = [`<${tagName}`, ` ${import_identity.SSR_PROPS_ATTR}="${propsId}"`, remain].join("");
            }
            links.forEach(({href, rel, as, fetchpriority}) => {
              const relStr = rel ? ` rel="${rel}"` : "", asStr = as ? ` as="${as}"` : "", fetchStr = fetchpriority ? ` fetchpriority="${fetchpriority}"` : "";
              ssrLinks += `<link href="${href}"${relStr}${asStr}${fetchStr}>
`;
            });
            stringBuilder.overwrite(startOffset, endOffset, html);
          }).catch((err) => {
            import_shared_utils.logger.warn(`Server-side rendering for "${specifier}" failed. Falling back to client-side rendering. Reason: `, err.stack);
          });
        }));
        if (Object.keys(ssrProps).length) {
          stringBuilder.prependLeft(ssrModules[0].startOffset, `<script type="application/javascript">globalThis.LWR = globalThis.LWR || {};globalThis.LWR.${import_identity.SSR_PROPS_KEY} = ${JSON.stringify(ssrProps)};</script>`);
        }
        if (ssrLinks) {
          const headIndex = stringBuilder.original.indexOf("</head>");
          if (headIndex >= 0) {
            stringBuilder.prependLeft(headIndex, ssrLinks);
          } else {
            import_shared_utils.logger.error("Adding links during server-side rendering failed. Could not find the </head> tag.");
          }
        }
        import_shared_utils.logger.verbose("lwcSsrViewTranformer response", stringBuilder);
      }
    }
  };
}
