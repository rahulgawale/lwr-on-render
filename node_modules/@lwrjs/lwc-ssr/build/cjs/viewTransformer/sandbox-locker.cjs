var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/viewTransformer/sandbox-locker.ts
__markAsModule(exports);
__export(exports, {
  default: () => runCode
});
var import_near_membrane_node = __toModule(require("@locker/near-membrane-node"));
var import_node_fetch = __toModule(require("node-fetch"));
function runCode(codes, context) {
  return new Promise((resolve, reject) => {
    let resolver;
    const p = new Promise((r) => resolver = r);
    function getContext() {
      return context;
    }
    const endowments = Object.getOwnPropertyDescriptors({
      getContext,
      fetch: import_node_fetch.default,
      resolver,
      process,
      setTimeout,
      clearTimeout
    });
    const ve = (0, import_near_membrane_node.default)(globalThis, {endowments});
    try {
      ve.evaluate(codes.join("\n"));
      p.then(resolve);
    } catch (e) {
      reject(e);
    }
  });
}
