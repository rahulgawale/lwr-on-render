var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/viewTransformer/amd-utils.ts
__markAsModule(exports);
__export(exports, {
  default: () => getCode
});
var import_loader = __toModule(require("@lwrjs/loader"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
async function readableToString(readable) {
  let result = "";
  for await (const chunk of readable) {
    result += chunk;
  }
  return result;
}
var loaderShimSource;
async function getLoaderShim(runtimeEnvironment) {
  if (loaderShimSource !== void 0) {
    return loaderShimSource;
  }
  const amdloaderShimService = new import_loader.default({}, {
    runtimeEnvironment,
    resourceRegistry: {resolveResourceUri: () => "NOT IMPLEMENTED"}
  });
  const specifier = (0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER ? "lwr-loader-shim-legacy.bundle.js" : "lwr-loader-shim.bundle.js";
  const resource = await amdloaderShimService.getResource({specifier}, runtimeEnvironment);
  if (resource) {
    const {stream} = resource;
    if (stream) {
      loaderShimSource = await readableToString(stream);
      return loaderShimSource;
    }
  }
}
function getLwrConfig(bundleSpecifier, lwrVersion) {
  return Object.assign({}, {
    autoBoot: true,
    bootstrapModule: `${bundleSpecifier}/v/${lwrVersion}`,
    disableInitDefer: true,
    endpoints: {
      uris: {mapping: "/1/mapping/amd/1/l/en-US/mp/"}
    },
    rootComponents: [`${bundleSpecifier.split("@lwrjs/lwc-ssr/")[1]}/v/${lwrVersion}`]
  }, (0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER ? {
    baseUrl: "ssr"
  } : {
    baseUrl: "/",
    imports: {
      "any/thing.js": ["any/thing"]
    }
  });
}
function lwcDefineOverride(lwcSpecifier) {
  return `LWR.define("${lwcSpecifier}", ["${lwcSpecifier.replace("lwc", "@lwc/engine-server")}"], function(lwcEngine) { return lwcEngine; });`;
}
var GLOBALTHIS_LWR = `globalThis.LWR = globalThis.LWR || {};`;
async function getCode(runtimeEnvironment, lwrVersion, bundleSpecifier, includedModules) {
  const loaderShimSource2 = await getLoaderShim(runtimeEnvironment);
  const lwrConfigString = JSON.stringify(getLwrConfig(bundleSpecifier, lwrVersion));
  const lwcSpecifier = includedModules.reduce((specifier, includedModule) => {
    if (includedModule.startsWith("lwc/v")) {
      return includedModule;
    }
    if (!specifier && includedModule.startsWith("@lwc/engine-server/v")) {
      return includedModule.replace("@lwc/engine-server", "lwc");
    }
    return specifier;
  }, "");
  return [
    GLOBALTHIS_LWR,
    `Object.assign(globalThis.LWR, ${lwrConfigString});`,
    loaderShimSource2 ? loaderShimSource2 : "",
    lwcSpecifier ? lwcDefineOverride(lwcSpecifier) : ""
  ];
}
