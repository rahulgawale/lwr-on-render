var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/viewTransformer/sandbox-worker.ts
__markAsModule(exports);
__export(exports, {
  default: () => runCode
});
var import_worker_threads = __toModule(require("worker_threads"));
var HEADER = "/* This module is generated and meant to be used in a Server context */";
var WORKER_CODE_SANDBOX_APIS = [
  `const { parentPort, workerData } = require('worker_threads');`,
  `globalThis.getContext = () => workerData;`,
  `globalThis.fetch = require('node-fetch');`,
  `globalThis.resolver = (...args) => parentPort.postMessage(...args);`
];
function runCode(codes, workerData) {
  const workerCode = [HEADER, ...WORKER_CODE_SANDBOX_APIS, ...codes].join("\n");
  return new Promise((resolve, reject) => {
    const worker = new import_worker_threads.Worker(workerCode, {eval: true, workerData});
    worker.on("message", resolve);
    worker.on("error", reject);
    worker.on("exit", (code) => {
      if (code !== 0) {
        reject(new Error(`SSR worker stopped with exit code: ${code}`));
      }
    });
  });
}
