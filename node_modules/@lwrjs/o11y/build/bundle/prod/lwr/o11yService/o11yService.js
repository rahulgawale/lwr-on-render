import{getInstrumentation as t}from"o11y/client";import{MODULE_DEFINE as e,MODULE_DEFINE_COUNT as r,BOOTSTRAP_END as n,BOOTSTRAP_DURATION as s,MODULE_FETCH_DURATION as i,MAPPINGS_FETCH_DURATION as a,MODULE_FETCH as o,MAPPINGS_FETCH as c,ROUTER_NAV as m,ROUTER_VIEW as h,ROUTER_NAV_DURATION as l,ROUTER_VIEW_DURATION as u,BOOTSTRAP_ERROR as f,BOOTSTRAP_ERROR_COUNT as k,MODULE_FETCH_COUNT as g,MODULE_ERROR as p,MODULE_ERROR_COUNT as b,MAPPINGS_FETCH_COUNT as T,MAPPINGS_ERROR as y,MAPPINGS_ERROR_COUNT as W,ROUTER_NAV_COUNT as d,ROUTER_ERROR as v,ROUTER_ERROR_COUNT as E}from"lwr/metrics";const M=[o,c,m,h],w=[l,u],O={[f]:k,[e]:r,[o]:g,[p]:b,[c]:T,[y]:W,[m]:d,[v]:E},V=Object.keys(O);class x{constructor(t,e){this.config=e||{},this.instrumentation=t}track(){this.trackExistingMarks(),this.setupObserver()}trackExistingMarks(){const t=performance.getEntriesByType("mark").filter((t=>t.name.startsWith(e)));t.length>0&&this.instrumentation.incrementCounter(r,t.length)}setupObserver(){new PerformanceObserver((t=>{t.getEntries().forEach((t=>{const{name:e,duration:r,startTime:o}=t;e===n&&this.instrumentation.trackValue(s,o);const c=V.find((t=>e.startsWith(t)));c&&this.instrumentation.incrementCounter(O[c],1),this.config.enableModuleFetchTracking&&e.startsWith(i)&&this.instrumentation.trackValue(e,r),this.config.enableMappingFetchTracking&&e.startsWith(a)&&this.instrumentation.trackValue(e,r),w.some((t=>e.startsWith(t)))&&this.instrumentation.trackValue(e,r),M.some((t=>e.startsWith(t)))||performance.clearMarks(e)}))})).observe({entryTypes:["mark","measure"]})}}const C=void 0!==globalThis.performance&&"function"==typeof globalThis.performance.mark,j=globalThis.LWR,F={track:()=>{}};function B(e){const r=t("lwrjs"),n=j.metricsConfig||{};(C?new x(r,n):F).track()}export default B;
