var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/compiler/src/index.ts
__markAsModule(exports);
__export(exports, {
  AMD_DEFINE: () => AMD_DEFINE,
  LwrCompiler: () => LwrCompiler
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_rollup = __toModule(require("rollup"));
var import_compiler = __toModule(require("@locker/compiler"));
var import_transformer = __toModule(require("./transformer.cjs"));
var AMD_DEFINE = "LWR.define";
var AMD_ROLLUP_PLUGIN = function(rootId, source) {
  return {
    name: "lwr-amd-inline",
    resolveId(id) {
      return rootId === id ? id : void 0;
    },
    load(id) {
      return rootId === id ? source : void 0;
    }
  };
};
var LwrCompiler = class {
  constructor() {
    this.getModuleMetadata = import_shared_utils.getImportMetadata;
  }
  async convertToAmd(source, {id}, forceNamedExports = true) {
    const bundler = await (0, import_rollup.rollup)({
      input: id,
      plugins: [AMD_ROLLUP_PLUGIN(id, source)],
      onwarn(warning, warn) {
        if (warning.code === "UNRESOLVED_IMPORT")
          return;
        warn(warning);
      }
    });
    const {output} = await bundler.generate({
      amd: {id, define: AMD_DEFINE},
      exports: forceNamedExports ? "named" : "auto",
      format: "amd"
    });
    const {code} = output[0];
    return {code, map: null};
  }
  lockerize({compiledSource: source, specifier, moduleEntry: {entry: filename}}, {trustedComponents}, sourcemap = false) {
    const {namespace, name: rawName} = (0, import_shared_utils.explodeSpecifier)(specifier);
    const [name] = rawName.split("#");
    const bareSpecifier = namespace ? `${namespace}/${name}` : name;
    const isJS = filename.endsWith(".js") || filename.endsWith(".mjs") || filename.endsWith(".ts");
    if (isJS && trustedComponents && !trustedComponents.includes(`${namespace}/*`) && !trustedComponents.includes(bareSpecifier)) {
      const {code} = import_compiler.Compiler.compile(source, {
        componentName: name,
        filename,
        sandboxKey: namespace || "sandbox",
        sourcemap,
        remapDynamicImport: true
      });
      return {code, map: null};
    }
    return {code: source, map: null};
  }
  minifyJavascript(source) {
    return (0, import_transformer.minify)(source);
  }
  parseJavascript(source, options) {
    return (0, import_transformer.parse)(source, options);
  }
  minifyCSS(source) {
    return (0, import_transformer.minify)(source, {fileType: "css"});
  }
};
