import { Compiler, ModuleCompiled, CompilerResult, LwrLockerConfig, ParseOptions } from '@lwrjs/types';
import { getImportMetadata } from '@lwrjs/shared-utils';
export declare const AMD_DEFINE = "LWR.define";
export declare class LwrCompiler implements Compiler {
    convertToAmd(source: string, { id }: {
        id: string;
    }, forceNamedExports?: boolean): Promise<CompilerResult>;
    getModuleMetadata: typeof getImportMetadata;
    /** Locker
     * Trusted Components can contain namespaces with wildcard or single component
     */
    lockerize({ compiledSource: source, specifier, moduleEntry: { entry: filename } }: ModuleCompiled, { trustedComponents }: LwrLockerConfig, sourcemap?: boolean): CompilerResult;
    minifyJavascript(source: string): Promise<CompilerResult>;
    parseJavascript(source: string, options: ParseOptions): Promise<CompilerResult>;
    minifyCSS(source: string): Promise<CompilerResult>;
}
//# sourceMappingURL=index.d.ts.map