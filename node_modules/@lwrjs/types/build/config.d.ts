import { CacheResponse, RenderOptions, RouteHandlerViewResponse, RuntimeEnvironment, ServerTypes, Specifier, ViewParams, ViewRequest, ViewResponse } from './index';
export interface View {
    id: string;
    rootComponent?: string;
    contentTemplate?: string;
    layoutTemplate?: string;
    bootstrap?: LwrAppBootstrapConfig;
}
export interface LwrBaseRoute extends View {
    properties?: Record<string, any>;
    routeHandler?: string;
    cache?: CacheResponse;
    subRoutes?: string;
}
export interface LwrRoute extends LwrBaseRoute {
    path: string;
    method?: 'get' | 'post';
}
export interface NormalizedLwrRoute extends LwrRoute {
    bootstrap: NormalizedLwrAppBootstrapConfig;
}
export interface LwrErrorRoute extends LwrBaseRoute {
    status: 404 | 500;
}
export interface NormalizedLwrErrorRoute extends LwrBaseRoute {
    bootstrap: NormalizedLwrAppBootstrapConfig;
}
export interface LwrAppBootstrapConfig {
    autoBoot?: boolean;
    syntheticShadow?: boolean;
    workers?: {
        [id: string]: string;
    };
    services?: string[];
    configAsSrc?: boolean;
    ssr?: boolean;
}
export declare type NormalizedLwrAppBootstrapConfig = Required<LwrAppBootstrapConfig>;
export interface LwrLockerConfig {
    enabled: boolean;
    trustedComponents?: string[];
    clientOnly?: boolean;
}
export interface LocalizedViewRequest extends ViewRequest {
    locale?: string;
}
export declare type RouteHandlerFunction = (viewRequest: LocalizedViewRequest, handlerContext: HandlerContext) => Promise<RouteHandlerViewResponse>;
export interface ResourcePaths {
    rootDir: string;
    assets: AssetConfig[];
    layoutsDir: string;
    contentDir: string;
}
export declare type RouteHandlerView = Pick<View, 'contentTemplate' | 'layoutTemplate' | 'rootComponent'>;
export interface RouteHandlerViewApi {
    hasViewResponse(view: RouteHandlerView, viewParams?: ViewParams, renderOptions?: RenderOptions): boolean;
    getViewResponse(view: RouteHandlerView, viewParams?: ViewParams, renderOptions?: RenderOptions): Promise<ViewResponse | undefined>;
}
export interface HandlerContext extends ResourcePaths {
    route: LwrRoute | LwrErrorRoute;
    viewApi: RouteHandlerViewApi;
}
export interface GlobalData {
    [key: string]: any;
}
export interface LwrGlobalConfig {
    apiVersion?: string;
    ignoreLwrConfigFile?: boolean;
    lwrConfigFile?: string;
    port?: number;
    serverMode?: string;
    basePath?: string;
    rootDir?: string;
    cacheDir?: string;
    contentDir?: string;
    layoutsDir?: string;
    globalDataDir?: string;
    globalData?: GlobalData;
    assets?: string | AssetConfig[];
    assetProviders?: ServiceConfig[];
    assetTransformers?: ServiceConfig[];
    hooks?: ServiceConfig[];
    environment?: EnvironmentConfig;
    lwc?: LwcConfig;
    moduleProviders?: ServiceConfig[];
    resourceProviders?: ServiceConfig[];
    viewProviders?: ServiceConfig[];
    viewTransformers?: ServiceConfig[];
    templateEngine?: string;
    routes?: LwrRoute[];
    errorRoutes?: LwrErrorRoute[];
    bundleConfig?: BundleConfig;
    serverType?: ServerTypes;
    staticSiteGenerator?: StaticSiteGenerator;
    locker?: LwrLockerConfig;
}
export interface NormalizedLwrGlobalConfig extends Required<Omit<LwrGlobalConfig, 'lwc'>> {
    routes: NormalizedLwrRoute[];
    assets: AssetConfig[];
    lwrVersion: string;
    amdLoader: string;
    esmLoader: string;
    moduleProviders: ServiceEntry[];
    viewProviders: ServiceEntry[];
    viewTransformers: ServiceEntry[];
    resourceProviders: ServiceEntry[];
    assetProviders: ServiceEntry[];
    assetTransformers: ServiceEntry[];
    lwc: NormalizedLwcConfig;
}
export interface StaticSiteGenerator {
    outputDir?: string;
    locales?: string[];
    _additionalRoutePaths?: string[];
    _additionalModules?: string[];
}
interface AssetConfigCommon {
    urlPath: string;
    alias?: string;
}
export interface AssetDirConfig extends AssetConfigCommon {
    dir: string;
}
export interface AssetFileConfig extends AssetConfigCommon {
    file: string;
}
export declare type AssetConfig = AssetDirConfig | AssetFileConfig;
export interface LwcConfig {
    modules: ResolverModuleRecord[];
    interchangeable?: string[];
    interchangeableModules?: InterchangeableModuleRecord[];
}
export declare type InterchangeableModuleMap = Map<Specifier, Map<Environment, Specifier>>;
export interface NormalizedLwcConfig extends Omit<LwcConfig, 'interchangeableModules'> {
    interchangeableModulesMap?: InterchangeableModuleMap;
}
export declare type ServiceEntry = [string, any?];
export declare type ServiceConfig = string | ServiceEntry;
export interface BundleConfig {
    exclude?: string[];
    UNSAFE_lwrDefaultExclude?: string[];
    external?: Record<string, string>;
    alias?: Record<string, string>;
}
export declare type Environment = string;
export interface EnvironmentConfig {
    default?: Environment;
    supported?: Environment[];
}
export interface AliasModuleRecord {
    name: string;
    path: string;
}
export interface DirModuleRecord {
    dir: string;
}
export interface NpmModuleRecord {
    npm: string;
    map?: {
        [key: string]: string;
    };
}
export declare type ResolverModuleRecord = AliasModuleRecord | DirModuleRecord | NpmModuleRecord;
export interface InterchangeableModuleRecord {
    context: string;
    modules: {
        [target: string]: string;
    };
}
export interface HooksPlugin {
    initConfigs(lwrConfig: NormalizedLwrGlobalConfig, dataConfig: GlobalData, runtimeConfig: RuntimeEnvironment): Promise<void> | void;
}
export {};
//# sourceMappingURL=config.d.ts.map