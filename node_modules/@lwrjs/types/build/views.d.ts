/// <reference types="node" />
import { RouteHandlerFunction, RouteHandlerView, View } from './config.js';
import { AssetSource, AssetUri, Endpoints, FlattenedModuleGraphs, ImportMetadata, Json, LwrStringBuilder, ResourceDefinition, RuntimeEnvironment, RuntimeParams, Specifier, TransformPluginContext } from './index.js';
export declare type ViewIdentity = Pick<View, 'rootComponent' | 'contentTemplate'>;
export interface ViewSource {
    name: string;
    slug: string;
    ownHash: string;
    originalSource: string;
    filePath: string;
}
export interface CompiledView extends ViewSource {
    viewId: ViewIdentity;
    layoutTemplate?: string;
    immutable?: boolean;
    properties?: {
        [key: string]: unknown;
    };
    render: (context?: any) => Promise<RenderingResult>;
}
export declare type NormalizedRenderingResult = Required<RenderingResult>;
export interface RenderingResult {
    renderedView: string;
    metadata?: RenderedViewMetadata;
    options?: RenderOptions;
}
export interface RenderedView {
    compiledView: CompiledView;
    renderedView: string;
    metadata: RenderedViewMetadata;
    options: RenderOptions;
}
export interface CustomElementReference {
    tagName: string;
    props?: {
        [name: string]: string;
    };
    children?: CustomElementReference[];
    location?: {
        startOffset: number;
        endOffset: number;
    };
}
export interface RenderedViewMetadata {
    customElements: CustomElementReference[];
    assetReferences: AssetReference[];
}
export interface RenderedAssetReference {
    url: string;
    tagName?: string;
    override?: AssetUri;
}
export interface AssetReference extends RenderedAssetReference {
    importer?: string;
    relative: boolean;
    location: {
        startOffset: number;
        endOffset: number;
    };
}
export interface LinkedViewDefinitionMetaData {
    customElements: string[];
    assetReferences: RenderedAssetReference[];
}
export interface CustomElementRecord {
    elementName: string;
    flatGraph: FlattenedModuleGraphs;
}
export interface RenderedViewRecord {
    resources?: ResourceDefinition[];
    assetReferences?: RenderedAssetReference[];
    customElements?: CustomElementRecord[];
    endpoints?: Endpoints;
    importMetadata?: ImportMetadata;
    bootstrapModule?: {
        specifier: Specifier;
        flatGraph: FlattenedModuleGraphs;
        resources?: ResourceDefinition[];
    };
}
export interface LinkedViewDefinition {
    renderedView: string;
    viewRecord: RenderedViewRecord;
    immutable: boolean;
}
interface ViewRequestQs {
    [key: string]: undefined | string | string[];
}
export interface ViewRequest {
    url: string;
    requestPath: string;
    params?: any;
    query?: ViewRequestQs;
    routeHandlerFunction?: RouteHandlerFunction;
}
export interface CacheResponse {
    ttl?: string | number;
}
export interface ViewResponse {
    status?: number;
    body: Buffer | string | boolean | Json;
    cache?: CacheResponse;
    headers?: Record<string, string>;
    cookie?: 'wip';
    metadata?: {
        viewDefinition?: LinkedViewDefinition;
    };
}
export declare type RouteHandlerViewResponse = ViewDefinitionResponse | ViewResponse;
export interface ViewDefinitionResponse {
    status?: number;
    view: RouteHandlerView;
    viewParams: ViewParams;
    renderOptions?: RenderOptions;
    cache?: CacheResponse;
    headers?: Record<string, string>;
    cookie?: 'wip';
}
export interface ViewProvider {
    name: string;
    initialize(): Promise<void>;
    getView(viewId: ViewIdentity): Promise<CompiledView | undefined>;
}
export interface ViewTranformPluginContext {
    view: View;
    viewParams: ViewParams;
    runtimeEnvironment: RuntimeEnvironment;
    runtimeParams: RuntimeParams;
    renderOptions: Required<RenderOptions>;
    contentIds: {
        lwrResourcesId: string;
    };
    importer?: string;
}
declare type ViewPluginLinkHook = (builder: LwrStringBuilder, viewContext: ViewTranformPluginContext, viewMetadata: RenderedViewMetadata, context?: TransformPluginContext) => Promise<ViewPluginLinkHookReturn>;
declare type ViewPluginLinkHookReturn = void | null | undefined | false | LwrStringBuilder | {
    builder?: LwrStringBuilder;
    context?: TransformPluginContext;
};
declare type ViewPluginOptimizeHook = (code: string, assetSource: AssetSource, context?: TransformPluginContext) => Promise<ViewPluginOptimizeHookReturn>;
declare type ViewPluginOptimizeHookReturn = null | undefined | false | string | {
    code: string;
    map?: any;
    context?: TransformPluginContext;
};
export interface ViewTransformHooks {
    link: ViewPluginLinkHook;
    optimize: ViewPluginOptimizeHook;
}
export interface ViewTransformPlugin extends Partial<ViewTransformHooks> {
    name: string;
}
export declare type ViewParams = Record<string, Json>;
export interface ViewInfo {
    id: string;
    url: string;
    configAsSrc: boolean;
}
export interface RenderOptions {
    skipMetadataCollection?: boolean;
    freezeAssets?: boolean;
    skipCaching?: boolean;
    viewParamCacheKey?: Json;
}
export interface ViewPageContext {
    id: string;
    title?: string;
    url: string;
}
export declare type ViewModuleResourceContext = {
    isPreload?: boolean;
    isSSR?: boolean;
    async?: boolean;
};
export interface ViewRegistry {
    addViewProviders(providers: ViewProvider[]): void;
    initializeViewProviders(): Promise<void[]>;
    getView(viewId: ViewIdentity, skipCaching?: boolean): Promise<CompiledView>;
    getViewDefinition<R extends RuntimeEnvironment>(view: View, viewParams: ViewParams, runtimeEnvironment: R, runtimeParams?: RuntimeParams, renderOptions?: RenderOptions): Promise<LinkedViewDefinition>;
    hasViewDefinition<R extends RuntimeEnvironment>(view: View, viewParams: ViewParams, runtimeEnvironment: R, runtimeParams?: RuntimeParams, renderOptions?: RenderOptions): boolean;
    getPublicApi(): PublicViewRegistry;
}
export declare type PublicViewRegistry = Pick<ViewRegistry, 'getView' | 'getViewDefinition'>;
export interface SsrRequestContext {
    props: Json;
    params: {
        [key: string]: string;
    };
    query: {
        [key: string]: string;
    };
    locale: string;
}
export interface PageDataResponse {
    props?: Json;
    markup?: {
        links?: {
            href: string;
            as?: string;
            rel?: string;
            fetchpriority?: 'high' | 'low' | 'auto';
        }[];
    };
}
export {};
//# sourceMappingURL=views.d.ts.map