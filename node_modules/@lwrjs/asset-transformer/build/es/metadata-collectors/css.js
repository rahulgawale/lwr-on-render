import postcss from 'postcss';
import valueParser from 'postcss-value-parser';
import { isRelative, isSelfUrl } from '@lwrjs/shared-utils';
const MESSAGE_TYPE = 'url-location';
const PLUGIN_NAME = 'postcss-url-locations';
function urlDeclarationCollector(declaration, { result }) {
    if (declaration.value.includes('url(')) {
        const declarationStart = declaration.source?.start?.offset || -1;
        const declValueStart = declaration.source?.input.css.indexOf(declaration.value, declarationStart) || 0;
        const parsed = valueParser(declaration.value);
        // parse the value to get the exact URL location
        parsed.walk((node) => {
            if (node.type === 'function' && node.value === 'url') {
                const { value, sourceIndex, type } = node.nodes[0];
                // Exclude data URLs as links
                if (!isSelfUrl(value)) {
                    const quoteLength = type === 'string' ? 1 : 0; // a node can we string or word (if unquoted)
                    result.messages.push({
                        type: MESSAGE_TYPE,
                        plugin: PLUGIN_NAME,
                        url: value,
                        relative: isRelative(value),
                        location: {
                            startOffset: declValueStart + sourceIndex + quoteLength,
                            endOffset: declValueStart + sourceIndex + value.length + quoteLength,
                        },
                    });
                }
            }
        });
    }
}
// While potentially incomplete, its faster to only target specific declaration
// Let's add over time whatever rules we are missing
/* The url() function can be included as a value for:
    background, background-image, border, border-image, border-image-source,
    content, cursor, filter, list-style, list-style-image,
        mask, mask-image, offset-path
    Spec grammar: https://drafts.csswg.org/css-values/#urls
*/
export function urlLocatorPlugin(opts) {
    return {
        postcssPlugin: PLUGIN_NAME,
        Declaration: {
            background: urlDeclarationCollector,
            border: urlDeclarationCollector,
            content: urlDeclarationCollector,
            cursor: urlDeclarationCollector,
            filter: urlDeclarationCollector,
            mask: urlDeclarationCollector,
            src: urlDeclarationCollector,
            'background-image': urlDeclarationCollector,
            'border-image': urlDeclarationCollector,
            'border-image-source': urlDeclarationCollector,
            'list-style': urlDeclarationCollector,
            'list-style-image': urlDeclarationCollector,
            'mask-image': urlDeclarationCollector,
            'offset-path': urlDeclarationCollector,
        },
    };
}
export async function linkCss(source, path) {
    const result = await postcss([urlLocatorPlugin()]).process(source, { from: path });
    const assetReferences = result.messages
        .filter((m) => m.type === 'url-location')
        .map(({ url, location, relative }) => ({ url, location, relative }));
    return { assetReferences };
}
//# sourceMappingURL=css.js.map