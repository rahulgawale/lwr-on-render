var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/asset-transformer/src/metadata-collectors/css.ts
__markAsModule(exports);
__export(exports, {
  linkCss: () => linkCss,
  urlLocatorPlugin: () => urlLocatorPlugin
});
var import_postcss = __toModule(require("postcss"));
var import_postcss_value_parser = __toModule(require("postcss-value-parser"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var MESSAGE_TYPE = "url-location";
var PLUGIN_NAME = "postcss-url-locations";
function urlDeclarationCollector(declaration, {result}) {
  if (declaration.value.includes("url(")) {
    const declarationStart = declaration.source?.start?.offset || -1;
    const declValueStart = declaration.source?.input.css.indexOf(declaration.value, declarationStart) || 0;
    const parsed = (0, import_postcss_value_parser.default)(declaration.value);
    parsed.walk((node) => {
      if (node.type === "function" && node.value === "url") {
        const {value, sourceIndex, type} = node.nodes[0];
        if (!(0, import_shared_utils.isSelfUrl)(value)) {
          const quoteLength = type === "string" ? 1 : 0;
          result.messages.push({
            type: MESSAGE_TYPE,
            plugin: PLUGIN_NAME,
            url: value,
            relative: (0, import_shared_utils.isRelative)(value),
            location: {
              startOffset: declValueStart + sourceIndex + quoteLength,
              endOffset: declValueStart + sourceIndex + value.length + quoteLength
            }
          });
        }
      }
    });
  }
}
function urlLocatorPlugin(opts) {
  return {
    postcssPlugin: PLUGIN_NAME,
    Declaration: {
      background: urlDeclarationCollector,
      border: urlDeclarationCollector,
      content: urlDeclarationCollector,
      cursor: urlDeclarationCollector,
      filter: urlDeclarationCollector,
      mask: urlDeclarationCollector,
      src: urlDeclarationCollector,
      "background-image": urlDeclarationCollector,
      "border-image": urlDeclarationCollector,
      "border-image-source": urlDeclarationCollector,
      "list-style": urlDeclarationCollector,
      "list-style-image": urlDeclarationCollector,
      "mask-image": urlDeclarationCollector,
      "offset-path": urlDeclarationCollector
    }
  };
}
async function linkCss(source, path) {
  const result = await (0, import_postcss.default)([urlLocatorPlugin()]).process(source, {from: path});
  const assetReferences = result.messages.filter((m) => m.type === "url-location").map(({url, location, relative}) => ({url, location, relative}));
  return {assetReferences};
}
