import { ModuleFormat } from '@lwrjs/types';
export declare const APP_BOOTSTRAP_PACKAGE_NAME = "@lwrjs/app-service";
export declare const SUPPORTED_MODULE_FORMATS: string[];
export declare type AppResourceType = 'module';
export declare enum AppResourceEnum {
    MODULE = "module"
}
export interface ApplicationIdentity {
    scope?: string;
    namespace?: string;
    name: string;
}
export declare type SubResourceIdentity = PathResourceIdentity | WorkerResourceIdentity;
export declare enum ResourceIdentityTypes {
    PATH = "path",
    WORKER = "worker"
}
export interface PathResourceIdentity {
    type: ResourceIdentityTypes.PATH;
    requestPath: string;
}
export declare type WorkerResourceIdentityType = 'worker';
export interface WorkerResourceIdentity {
    type: ResourceIdentityTypes.WORKER;
    workerId: string;
}
export declare type AppResourceId = Pick<AppResourceIdentity, 'appName' | 'resourceType' | 'format' | 'subResource'>;
export interface AppResourceIdentity {
    packageName: string;
    appName: string;
    appIdentity: ApplicationIdentity;
    resourceType: AppResourceType;
    format: ModuleFormat;
    subResource?: SubResourceIdentity;
}
export declare function parseAppIdentity(specifier: string): AppResourceIdentity | undefined;
export declare function isWorkerSubResource(subResource: SubResourceIdentity): subResource is WorkerResourceIdentity;
export declare function getAppSpecifier(appIdentity: AppResourceId): string;
export declare function isValidResourceIdentity(appIdentity: AppResourceIdentity, resourceType: string): boolean;
//# sourceMappingURL=identity.d.ts.map