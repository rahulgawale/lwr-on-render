import { DEFAULT_LWR_BOOTSTRAP_CONFIG } from '@lwrjs/shared-utils';
function getDefaultImportName(service) {
    return `loaderService_${service.replace(/\//gi, '_').replace(/@/gi, '')}`;
}
function createServicesSource(services) {
    const imports = services.map((service) => {
        const defaultImportName = getDefaultImportName(service);
        return `import ${defaultImportName} from '${service}'`;
    });
    const body = services.map((service) => {
        const defaultImportName = getDefaultImportName(service);
        return `${defaultImportName}(services)`;
    });
    return [...imports, ...body].join(';\n') + ';';
}
/**
 * Create the virtual source for the application bootstrap module with a worker root
 * @returns the generated source
 */
export function createAppWorkerBootstrapModule(workerSpecifier, route, options) {
    // app the route's bootstrap configuration to the worker bootstrap module
    const { bootstrap: { services, syntheticShadow }, } = route;
    const servicesSource = services && createServicesSource(services);
    const serviceApiModule = getServiceApiModule(options.format, options.moduleLoader);
    return [
        '/* This module is generated */',
        // conditional shadow
        syntheticShadow && `import '@lwc/synthetic-shadow';`,
        // Import loader services
        services && services.length && `import { services } from '${serviceApiModule}';`,
        // import and register the configured services
        servicesSource,
        // init module
        `import { init, toKebabCase } from 'lwr/init';`,
        // Import the worker ( no need to initialize the worker )
        `import Worker from "${workerSpecifier}";`,
    ]
        .filter(Boolean)
        .join('\n');
}
function getServiceApiModule(format, moduleLoader) {
    if (format == 'esm') {
        // import ESM version of ServiceAPI
        return 'lwr/servicesESM';
    }
    else {
        // AMD Loader
        return moduleLoader;
    }
}
export function normalizeBootstrap(bootstrap) {
    return {
        ...DEFAULT_LWR_BOOTSTRAP_CONFIG,
        ...bootstrap,
    };
}
/**
 * Create the virtual source for the application bootstrap module
 * @returns the generated source
 */
export function createAppRouteViewBootstrapModule(route, options, lockerConfig) {
    const { bootstrap } = route;
    const { services, syntheticShadow, ssr } = bootstrap;
    const isAMD = options.format === 'amd';
    const isESM = options.format === 'esm';
    const servicesSource = bootstrap.services && createServicesSource(bootstrap.services);
    const serviceApiModule = getServiceApiModule(options.format, options.moduleLoader);
    const bootstrapModule = ssr && !lockerConfig.enabled ? 'lwr/initSsr' : 'lwr/init';
    return [
        '/* This module is generated */',
        // pre app initialization step
        // TODO: enable for AMD once https://github.com/salesforce/lwr/issues/1087 is implemented
        isESM && `import { getClientBootstrapConfig } from 'lwr/preInit';`,
        // conditional shadow
        syntheticShadow && `import '@lwc/synthetic-shadow';`,
        // Import bootstrap services
        services && services.length && `import { services } from '${serviceApiModule}';`,
        // import and register the configured services
        servicesSource,
        // HMR (ESM format only)
        isESM && options.hmrEnabled && `import { initHMR } from 'lwr/hmr';`,
        // Import the ESM module initializer
        isESM && `import { init as esmLoaderInit } from 'lwr/esmLoader';`,
        // init module
        `import { init, toKebabCase } from '${bootstrapModule}';`,
        // locker
        isAMD &&
            lockerConfig &&
            lockerConfig.enabled &&
            lockerConfig.clientOnly &&
            `
import { registerLockerDefine } from 'lwr/lockerDefine';
registerLockerDefine(${JSON.stringify(lockerConfig.trustedComponents)});
        `,
        // grab client bootstrap config
        isESM && `const clientBootstrapConfig = getClientBootstrapConfig()`,
        // TODO: https://github.com/salesforce/lwr/issues/1087
        isAMD && `const clientBootstrapConfig = globalThis.LWR`,
        // Initialize the ESM loader with the Client Bootstrap Config
        isESM &&
            `
const { imports, index, importMappings, endpoints } = clientBootstrapConfig;
esmLoaderInit({ imports, index, importMappings, endpoints });`,
        `
// initialize additional non-configured root components
const { rootComponents, ssrProps } = clientBootstrapConfig;
Promise.all(rootComponents.map(async (rootSpecifier) => {
    const element = toKebabCase(rootSpecifier);
    return import(rootSpecifier).then(({default: Ctor}) => {
        init([[element, Ctor]], ssrProps);
    });
    return;
}));`,
        isESM &&
            options.hmrEnabled &&
            `
// HMR related initialization
const viewMetadata = globalThis._lwrRuntimeDebug.viewMetadata;
const hmrEndpoint = clientBootstrapConfig.endpoints.uris.hmr;
initHMR(hmrEndpoint, viewMetadata);`,
        // TODO: can be removed following https://github.com/salesforce/lwr/issues/1092
        // LAST TASK: Cleanup globalThis.LWR in AMD
        isAMD &&
            `
globalThis.LWR = Object.freeze({
    define: globalThis.LWR.define,
});`,
    ]
        .filter(Boolean)
        .join('\n');
}
//# sourceMappingURL=utils.js.map