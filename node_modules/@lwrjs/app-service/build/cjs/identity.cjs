var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/app-service/src/identity.ts
__markAsModule(exports);
__export(exports, {
  APP_BOOTSTRAP_PACKAGE_NAME: () => APP_BOOTSTRAP_PACKAGE_NAME,
  AppResourceEnum: () => AppResourceEnum,
  ResourceIdentityTypes: () => ResourceIdentityTypes,
  SUPPORTED_MODULE_FORMATS: () => SUPPORTED_MODULE_FORMATS,
  getAppSpecifier: () => getAppSpecifier,
  isValidResourceIdentity: () => isValidResourceIdentity,
  isWorkerSubResource: () => isWorkerSubResource,
  parseAppIdentity: () => parseAppIdentity
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var APP_BOOTSTRAP_PACKAGE_NAME = "@lwrjs/app-service";
var SUPPORTED_MODULE_FORMATS = ["amd", "esm"];
var AppResourceEnum;
(function(AppResourceEnum2) {
  AppResourceEnum2["MODULE"] = "module";
})(AppResourceEnum || (AppResourceEnum = {}));
var ResourceIdentityTypes;
(function(ResourceIdentityTypes2) {
  ResourceIdentityTypes2["PATH"] = "path";
  ResourceIdentityTypes2["WORKER"] = "worker";
})(ResourceIdentityTypes || (ResourceIdentityTypes = {}));
function parseAppIdentity(specifier) {
  const {packageName, subResource: packageSubResource} = (0, import_shared_utils.parsePackageSpecifier)(specifier);
  if (packageSubResource === "") {
    return;
  }
  const {appIdentity, appName, appResourceId} = parseAppResource(packageSubResource);
  const appResource = parseResourceId(appResourceId);
  if (!appResource) {
    return;
  }
  return {
    packageName,
    appIdentity,
    appName,
    ...appResource
  };
}
function isWorkerSubResource(subResource) {
  return subResource.type === ResourceIdentityTypes.WORKER;
}
function getAppSpecifier(appIdentity) {
  const appSubResourceIdentifier = appIdentity.subResource ? isWorkerSubResource(appIdentity.subResource) ? `/${appIdentity.subResource.type}/${appIdentity.subResource.workerId}` : `/${appIdentity.subResource.type}${appIdentity.subResource.requestPath}` : "";
  return `${APP_BOOTSTRAP_PACKAGE_NAME}/${appIdentity.appName}/${appIdentity.resourceType}/${appIdentity.format}${appSubResourceIdentifier}`;
}
function parseResourceId(resourceId) {
  const [resourceType, format, type, ...remaining] = resourceId.split("/");
  let subResource;
  if (!isValidFormat(format) || !isValidResourceType(resourceType)) {
    return;
  }
  switch (type) {
    case ResourceIdentityTypes.PATH:
      subResource = {
        subResource: {
          type,
          requestPath: `/${remaining.join("/")}`
        }
      };
      break;
    case ResourceIdentityTypes.WORKER: {
      subResource = {
        subResource: {
          type,
          workerId: `${remaining[0]}`
        }
      };
    }
  }
  return {
    resourceType,
    format,
    ...subResource
  };
}
function parseAppResource(appResource) {
  const {
    scope: appScope,
    packageName: appPackageName,
    subResource: appResourceId
  } = (0, import_shared_utils.parsePackageSpecifier)(appResource);
  if (appScope) {
    return {
      appName: `${appScope}/${appPackageName}`,
      appIdentity: {
        scope: appScope,
        name: appPackageName
      },
      appResourceId
    };
  } else if (/^(config|mapping|json|module)/.test(appResourceId)) {
    return {
      appName: appPackageName,
      appIdentity: {
        name: appPackageName
      },
      appResourceId
    };
  } else {
    const [name, ...remaining] = appResourceId.split("/");
    return {
      appName: `${appPackageName}/${name}`,
      appIdentity: {
        namespace: appPackageName,
        name
      },
      appResourceId: remaining.join("/")
    };
  }
}
function isValidFormat(format) {
  return format !== void 0 && (format === "esm" || format === "amd");
}
function isValidResourceType(resourceType) {
  return resourceType !== void 0 && resourceType === "module";
}
function isValidResourceIdentity(appIdentity, resourceType) {
  return appIdentity.packageName === APP_BOOTSTRAP_PACKAGE_NAME && isValidResourceType(resourceType) && appIdentity.resourceType === resourceType && isValidFormat(appIdentity.format);
}
