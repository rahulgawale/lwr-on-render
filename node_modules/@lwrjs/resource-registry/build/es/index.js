import { normalizeVersionToUri, getSpecifier } from '@lwrjs/shared-utils';
export class LwrResourceRegistry {
    constructor() {
        this.providers = [];
        this.name = 'lwr-resource-registry';
    }
    // -- Public API --------------------------------------------------------------------
    // Add new resource providers
    addResourceProviders(providers) {
        this.providers.push(...providers);
    }
    // Retrieve a resource from the providers
    async getResource(resourceId, runtimeEnvironment, runtimeParams) {
        for (const provider of this.providers) {
            // eslint-disable-next-line no-await-in-loop
            const result = await provider.getResource(resourceId, runtimeEnvironment, runtimeParams);
            if (result) {
                return result;
            }
        }
        return undefined;
    }
    // Given a resource and environment, return a resource URI
    resolveResourceUri({ specifier, version = '' }, { apiVersion, format, basePath }) {
        const versionedSpecifier = getSpecifier({ specifier, version: normalizeVersionToUri(version) });
        return `${basePath}/${apiVersion}/resource/${format}/${encodeURIComponent(versionedSpecifier)}`;
    }
    getPublicApi() {
        return {
            getResource: this.getResource.bind(this),
            resolveResourceUri: this.resolveResourceUri.bind(this),
        };
    }
}
//# sourceMappingURL=index.js.map