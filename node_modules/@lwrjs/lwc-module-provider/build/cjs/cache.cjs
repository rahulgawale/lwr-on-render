var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-module-provider/src/cache.ts
__markAsModule(exports);
__export(exports, {
  DEFAULT_CACHE_FOLDER: () => DEFAULT_CACHE_FOLDER,
  DEFAULT_CACHE_INDEX: () => DEFAULT_CACHE_INDEX,
  DEFAULT_COMPILED_DIR: () => DEFAULT_COMPILED_DIR,
  addCompiledModuleCacheEntry: () => addCompiledModuleCacheEntry,
  getCompiledModuleCacheEntry: () => getCompiledModuleCacheEntry,
  setupModuleCache: () => setupModuleCache
});
var import_path = __toModule(require("path"));
var import_fs = __toModule(require("fs"));
var DEFAULT_COMPILED_DIR = "lwc_compiled_modules";
var DEFAULT_CACHE_FOLDER = "cache";
var DEFAULT_CACHE_INDEX = `compiled.json`;
var NORMALIZE_PATH_REGEX = /[@\/#\.\?<>\\:\*\|"]/gm;
function setupModuleCache(cacheDir) {
  const lwcCacheDir = import_path.default.join(cacheDir, `${DEFAULT_COMPILED_DIR}`);
  const lwcCacheIndexPath = import_path.default.join(lwcCacheDir, DEFAULT_CACHE_INDEX);
  import_fs.default.mkdirSync(`${lwcCacheDir}/${DEFAULT_CACHE_FOLDER}`, {recursive: true});
  if (!import_fs.default.existsSync(lwcCacheIndexPath)) {
    import_fs.default.writeFileSync(lwcCacheIndexPath, "[]");
    return {lwcCacheDir, lwcCacheIndex: new Map()};
  } else {
    const rawIndex = import_fs.default.readFileSync(lwcCacheIndexPath, "utf-8");
    try {
      const cacheIndexJson = JSON.parse(rawIndex);
      return {lwcCacheDir, lwcCacheIndex: new Map(cacheIndexJson)};
    } catch (err) {
      const newErr = new Error("Invalid LWC Index: " + rawIndex);
      if (err.stack) {
        newErr.stack += "\nCaused by: " + err.stack;
      }
      throw newErr;
    }
  }
}
function addCompiledModuleCacheEntry(moduleSource, compilerResult, {lwcCacheIndex, lwcCacheDir}) {
  const {specifier, version, ownHash} = moduleSource;
  const lwcCacheIndexPath = import_path.default.join(lwcCacheDir, DEFAULT_CACHE_INDEX);
  const cacheKey = `${specifier}@${version}`;
  const normalizedSpecifier = specifier.replace(NORMALIZE_PATH_REGEX, "_");
  const normalizedVersion = version.replace(NORMALIZE_PATH_REGEX, "_");
  const moduleFileName = `${normalizedSpecifier}_${normalizedVersion}.js`;
  const cachedModulePath = import_path.default.join(lwcCacheDir, DEFAULT_CACHE_FOLDER, moduleFileName);
  import_fs.default.writeFileSync(cachedModulePath, compilerResult.code);
  const moduleMetaFileName = `${normalizedSpecifier}_${normalizedVersion}.meta.json`;
  const cachedMetaPath = import_path.default.join(lwcCacheDir, DEFAULT_CACHE_FOLDER, moduleMetaFileName);
  import_fs.default.writeFileSync(cachedMetaPath, JSON.stringify(compilerResult.metadata, null, "  "));
  lwcCacheIndex.set(cacheKey, {
    ownHash,
    module: `./${DEFAULT_CACHE_FOLDER}/${moduleFileName}`,
    moduleMeta: `./${DEFAULT_CACHE_FOLDER}/${moduleMetaFileName}`
  });
  import_fs.default.writeFileSync(lwcCacheIndexPath, JSON.stringify([...lwcCacheIndex], null, "  "));
}
function getCompiledModuleCacheEntry({specifier, version, ownHash}, {lwcCacheIndex, lwcCacheDir}) {
  const cacheKey = `${specifier}@${version}`;
  const cacheEntry = lwcCacheIndex.get(cacheKey);
  if (!cacheEntry) {
    return;
  }
  const cacheModulePath = import_path.default.join(lwcCacheDir, cacheEntry.module);
  const cacheMetaPath = import_path.default.join(lwcCacheDir, cacheEntry.moduleMeta);
  if (ownHash === cacheEntry.ownHash && import_fs.default.existsSync(cacheModulePath) && import_fs.default.existsSync(cacheMetaPath)) {
    return {
      code: import_fs.default.readFileSync(cacheModulePath, "utf-8"),
      metadata: JSON.parse(import_fs.default.readFileSync(cacheMetaPath, "utf-8"))
    };
  }
}
