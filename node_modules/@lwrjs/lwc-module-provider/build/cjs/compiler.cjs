var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-module-provider/src/compiler.ts
__markAsModule(exports);
__export(exports, {
  LwcCompiler: () => LwcCompiler
});
var import_core = __toModule(require("@babel/core"));
var import_compiler = __toModule(require("@lwc/compiler"));
var import_utils = __toModule(require("./utils.cjs"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var DEFAULT_BABEL_CONFIG = {
  babelrc: false,
  configFile: false,
  sourceMaps: true,
  parserOpts: {
    plugins: [["decorators", {decoratorsBeforeExport: true}]]
  }
};
var LwcCompiler = class {
  async compileFile(source, config) {
    const {name, namespace, filename, scopedStyles} = config;
    if (source.startsWith(import_utils.EXPLICIT_CONSTANT)) {
      return {
        code: source,
        map: null,
        metadata: {}
      };
    }
    if (filename.endsWith("ts")) {
      const babelConfig = {
        ...DEFAULT_BABEL_CONFIG,
        presets: [["@babel/preset-typescript", {onlyRemoveTypeImports: false}]],
        filename
      };
      import_shared_utils.logger.debug("babelTransform", {babelConfig});
      let result;
      try {
        result = (0, import_core.transformSync)(source, babelConfig);
      } catch (error) {
        import_shared_utils.logger.debug("babelTransform error", error);
        throw error;
      }
      import_shared_utils.logger.verbose("babelTransform result", {result});
      if (!result || !result.code) {
        import_shared_utils.logger.debug("babelTransform invalid result", {result});
        throw new Error(`Error TS compiling ${filename}`);
      }
      source = result.code;
    }
    if (namespace === "lwr" && name === "hmr") {
      return {
        code: source,
        map: null,
        metadata: {}
      };
    }
    const transformConfig = {
      namespace,
      name,
      experimentalDynamicComponent: {
        strictSpecifier: false
      },
      scopedStyles
    };
    import_shared_utils.logger.debug("transformSync", {filename, transformConfig});
    const compilerResult = (0, import_compiler.transformSync)(source, filename, {
      namespace,
      name,
      experimentalDynamicComponent: {
        strictSpecifier: false
      },
      scopedStyles
    });
    import_shared_utils.logger.verbose("transformSync result", {compilerResult});
    return {
      code: compilerResult.code,
      map: null,
      metadata: {}
    };
  }
};
