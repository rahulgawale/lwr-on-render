import { Environment, LogCollector, LogMeta, MetricsCollector, MetricsExtractorMethods, Schema } from '../../interfaces';
import { SchematizedData } from 'o11y/shared';
import { CoreEnvelopeContents } from 'o11y/core_envelope';
import { UploadResult } from './interfaces/UploadResult';
import { CoreCollectorOptions } from './interfaces/CoreCollectorOptions';
import { UploadMode } from './UploadMode';
export declare type UploadOptionsCallback = () => RequestInit;
export declare class CoreCollector implements LogCollector, MetricsCollector {
    private readonly _messageBuffers;
    private _intervalHandle;
    private _metricsExtractors;
    private readonly _staticAttributes;
    private _immediateUpload;
    private readonly _messagesLimit;
    private readonly _metricsLimit;
    private readonly _formDataKey;
    private readonly _uploadFailedListener;
    private _uploadInterval;
    private _uploadEndpoint;
    private _uploadMode;
    private readonly _emptySize;
    private _messageSize;
    private _uploadOptionsCallback;
    constructor(uploadEndpoint?: string, uploadMode?: UploadMode, environment?: Environment, options?: CoreCollectorOptions);
    get uploadInterval(): number;
    set uploadInterval(uploadInterval: number);
    get uploadEndpoint(): string;
    set uploadEndpoint(uploadEndpoint: string);
    get uploadOptionsCallback(): UploadOptionsCallback;
    set uploadOptionsCallback(uploadOptionsCallback: UploadOptionsCallback);
    get uploadMode(): UploadMode;
    set uploadMode(uploadMode: UploadMode);
    getByteSize(accuracy?: number): number;
    private _stopTimer;
    private _restartTimer;
    collect(schema: Schema, data: SchematizedData, logMeta: LogMeta): Promise<UploadResult>;
    private _shouldUpload;
    private _upload;
    private _uploadContents;
    private _getRequestInit;
    private _checkUploadState;
    upload(contents?: CoreEnvelopeContents): Promise<UploadResult>;
    get hasData(): boolean;
    get messagesCount(): number;
    get metricsCount(): number;
    getProtoEncodedCoreEnvelope(): Uint8Array;
    getContentsOfCoreEnvelope(): CoreEnvelopeContents;
    private _getContentsOfCoreEnvelope;
    private _buildProtoEncodedCoreEnvelope;
    receiveMetricsExtractors(metricsExtractors: MetricsExtractorMethods): void;
}
