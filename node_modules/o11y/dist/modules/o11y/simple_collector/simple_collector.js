import { CoreEnvelopeBuilder } from 'o11y/core_envelope';
import { utility, LazyMapToList, schemaUtil } from 'o11y/shared';

const defaultMaxUniqueSchemas = 10000;
class SimpleCollector {
    constructor(options) {
        this._messageSize = 0;
        this._isCollecting = false;
        let maxUniqueSchemas = defaultMaxUniqueSchemas;
        if (options) {
            const env = options.environment;
            if (env) {
                this._staticAttributes = {
                    appName: env.appName,
                    appVersion: env.appVersion,
                    appExperience: env.appExperience,
                    deviceId: env.deviceId,
                    deviceModel: env.deviceModel,
                    sdkVersion: env.sdkVersion
                };
            }
            if (utility.requireArgumentIfDefined(options.precollectCallback, 'options.precollectCallback', 'function')) {
                this._precollectCallback = options.precollectCallback;
            }
            const mus = options.maxUniqueSchemas;
            if (mus !== undefined) {
                if (typeof mus !== 'number' || !(mus > 0)) {
                    throw new Error('options.maxUniqueSchemas, if defined, must be > 0');
                }
                maxUniqueSchemas = mus;
            }
        }
        this._messageBuffers = new LazyMapToList(maxUniqueSchemas);
    }
    collect(schema, data, logMeta) {
        if (this._isCollecting) {
            return;
        }
        this._isCollecting = true;
        try {
            const msg = {
                timestamp: logMeta.timestamp,
                data,
                age: utility.getAge(logMeta.timestamp),
                rootId: logMeta.rootId,
                seq: logMeta.sequence,
                sseq: logMeta.schemaSequence,
                loggerName: logMeta.loggerName,
                pagePayload: logMeta.pagePayload,
                loggerAppName: logMeta.loggerAppName,
                connectionType: logMeta.connectionType,
                appPayload: logMeta.appPayload
            };
            if (this._precollectCallback && this._precollectCallback(schema, msg) === false) {
                return;
            }
            if (!this._messageBuffers.push(schema, msg)) {
                throw new Error(`Buffer is full. Refusing schemaId ${schemaUtil.getSchemaId(schema)}`);
            }
            this._messageSize += utility.estimateObjectSize(msg);
        }
        finally {
            this._isCollecting = false;
        }
    }
    get estimatedByteSize() {
        return this._messageSize + this.metricsCount * 8;
    }
    get hasData() {
        return this.messagesCount > 0 || this.metricsCount > 0;
    }
    get messagesCount() {
        return this._messageBuffers.totalItemCount;
    }
    get metricsCount() {
        var _a, _b, _c;
        let count = 0;
        if (this._metricsExtractors) {
            count += ((_a = this._metricsExtractors.getAllUpCounters()) === null || _a === void 0 ? void 0 : _a.length) || 0;
            count += ((_b = this._metricsExtractors.getAllValueRecorders()) === null || _b === void 0 ? void 0 : _b.length) || 0;
            count += ((_c = this._metricsExtractors.getAllBucketHistograms()) === null || _c === void 0 ? void 0 : _c.length) || 0;
        }
        return count;
    }
    getRawContentsOfCoreEnvelope() {
        const contents = {
            staticAttributes: this._staticAttributes,
            messages: this._messageBuffers.getAllMessages(true)
        };
        if (this._metricsExtractors) {
            contents.upCounters = CoreEnvelopeBuilder.getUpCounters(this._metricsExtractors.getAllUpCounters(), true);
            contents.valueRecorders = CoreEnvelopeBuilder.getValueRecorders(this._metricsExtractors.getAllValueRecorders(), true);
            contents.bucketHistograms = CoreEnvelopeBuilder.getBucketHistograms(this._metricsExtractors.getAllBucketHistograms(), true);
        }
        this._messageSize = 0;
        return contents;
    }
    receiveMetricsExtractors(metricsExtractors) {
        this._metricsExtractors = metricsExtractors;
    }
}

export { SimpleCollector };
//# sourceMappingURL=simple_collector.js.map
