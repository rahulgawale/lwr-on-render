declare class Utility {
    private static _isProduction;
    readonly notImplemented = "Method not implemented.";
    readonly perfNow: () => number;
    readonly time: () => {
        tsNow: number;
        perfNow: number;
    };
    private readonly _timeOrigin;
    constructor();
    get isProduction(): boolean;
    markProduction(): void;
    private checkArgument;
    requireArgument<T>(argument: T, argumentName: string, argKind?: unknown): void;
    requireArgumentIfDefined<T>(argument: T, argumentName: string, argKind: unknown): boolean;
    checkForDenyListedValues<T>(argument: T, argumentName: string, denyList: ReadonlyArray<T>): void;
    checkForReservedCharacters(argument: string, argumentName: string, reservedChars: ReadonlyArray<string>): void;
    generateUniqueId(length?: number): string;
    getXpath(_element: HTMLElement): string;
    getAge(timestamp: number): number;
    getConnectionType(): string;
    clone<T>(value: T): T;
    definedValueOrDefault<T>(value: T, defaultValue: T): T;
    getGlobal(): typeof globalThis;
    getIsBeaconSupported(): boolean;
    estimateObjectSize(object: unknown): number;
    noProdThrow(e: unknown): void | never;
}
export declare const utility: Readonly<Utility>;
export {};
