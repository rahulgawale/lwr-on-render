import { BucketMetric, Metric } from '../interfaces';
import { BucketHistogram, CoreEnvelope, CoreEnvelopeContents, LogMessage, StaticAttributes, UpCounter, ValueRecorder } from './interfaces';
export declare const coreEnvelopeKey = "o11y";
export declare class CoreEnvelopeBuilder {
    private _envelope;
    constructor();
    withStaticAttributes(staticAttributes: StaticAttributes): CoreEnvelopeBuilder;
    withLogs(schemaName: string, logs: LogMessage[]): CoreEnvelopeBuilder;
    private static _getMetricTags;
    static getUpCounters(metrics: Metric<number>[], reset?: boolean): UpCounter[];
    static getValueRecorders(metrics: Metric<number[]>[], reset?: boolean): ValueRecorder[];
    static getBucketHistograms(metrics: BucketMetric<number[]>[], reset?: boolean): BucketHistogram[];
    withUpCounters(upCounters: UpCounter[]): CoreEnvelopeBuilder;
    withValueRecorders(valueRecorders: ValueRecorder[]): CoreEnvelopeBuilder;
    withBucketHistograms(bucketHistograms: BucketHistogram[]): CoreEnvelopeBuilder;
    build(): CoreEnvelope;
    static buildFrom(contents: CoreEnvelopeContents): CoreEnvelope;
}
