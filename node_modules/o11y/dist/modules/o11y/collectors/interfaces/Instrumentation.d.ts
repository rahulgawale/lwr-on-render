import { LightningElement, LogPromptListener, MetricsTags, SchematizedData } from 'o11y/shared';
import { Activity } from './Activity';
import { ActivityApiOptions } from './ActivityApiOptions';
import { ApiOptions } from './ApiOptions';
import { DomEventApiOptions } from './DomEventApiOptions';
import { Schema } from './Schema';
export interface Instrumentation {
    log(userSchemaOrText: Schema | string, userData?: SchematizedData, options?: ApiOptions): void;
    error(error: unknown, userSchemaOrText?: Schema | string, userData?: SchematizedData, options?: ApiOptions): void;
    startActivity(name: string, options?: ApiOptions): Activity;
    domEvent(event: Event, handledBy: HTMLElement | LightningElement, userSchemaOrText?: Schema | string, userData?: SchematizedData, options?: DomEventApiOptions): void;
    incrementCounter(operation: string, increment?: number, hasError?: boolean, tags?: MetricsTags): void;
    trackValue(operation: string, value: number, hasError?: boolean, tags?: MetricsTags): void;
    bucketValue(operation: string, value: number, buckets?: number[], hasError?: boolean, tags?: MetricsTags): void;
    registerForLogPrompt(listener: LogPromptListener): void;
    activity<T>(name: string, execute: (act: Activity) => T, options?: ActivityApiOptions): T;
    activityAsync<T>(name: string, execute: (act: Activity) => Promise<T>, options?: ActivityApiOptions): Promise<T>;
}
