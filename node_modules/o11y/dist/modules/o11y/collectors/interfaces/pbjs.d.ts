export interface IEnum {
    values: {
        [k: string]: number;
    };
    options?: {
        [k: string]: any;
    };
}
export interface IField {
    rule?: string;
    type: string;
    id: number;
    options?: {
        [k: string]: any;
    };
}
export interface IExtensionField extends IField {
    extend: string;
}
export interface IMapField extends IField {
    keyType: string;
}
export interface IExtensionMapField extends IMapField {
    extend: string;
}
export interface IMethod {
    type?: string;
    requestType: string;
    responseType: string;
    requestStream?: boolean;
    responseStream?: boolean;
    options?: {
        [k: string]: any;
    };
}
export interface INamespace {
    options?: {
        [k: string]: any;
    };
    nested?: {
        [k: string]: AnyNestedObject;
    };
}
declare type AnyExtensionField = IExtensionField | IExtensionMapField;
declare type AnyNestedObject = IEnum | IType | IService | AnyExtensionField | INamespace;
export interface IOneOf {
    oneof: string[];
    options?: {
        [k: string]: any;
    };
}
export interface IService extends INamespace {
    methods: {
        [k: string]: IMethod;
    };
}
export interface IType extends INamespace {
    oneofs?: {
        [k: string]: IOneOf;
    };
    fields: {
        [k: string]: IField;
    };
    extensions?: number[][];
    reserved?: number[][];
    group?: boolean;
}
export {};
