import { IdleDetector, IdleDetectorOptions, IdleDetectorReport } from '../interfaces';
import { IdleDetectedListener, IsBusyChecker, TaskerMulti, TaskerSingle } from '../interfaces/IdleDetector';
export declare class IdleDetectorImpl implements IdleDetector {
    private readonly _instr;
    private readonly _taskers;
    private readonly _listeners;
    private readonly _busyCheckers;
    private readonly _logThreshold;
    private readonly _endedTasks;
    private readonly _pollableReport;
    private _firstCallbackTime;
    private _timerCheckQueued;
    constructor(options?: IdleDetectorOptions);
    requestIdleDetectedCallback(callback: IdleDetectedListener): void;
    private reportTaskEnded;
    declareNotifierTaskSingle(name: string): TaskerSingle;
    declareNotifierTaskMulti(name: string, existingBusyCount?: number): TaskerMulti;
    declarePollableTaskMulti(name: string, isBusyChecker: IsBusyChecker): void;
    private addTasker;
    private areAllNotifiersIdle;
    private getFirstBusyPollable;
    private checkIfLoaded;
    private doubleCheck;
    private addToPollableReport;
    private notify;
    getReport(): IdleDetectorReport;
    private _getReport;
}
