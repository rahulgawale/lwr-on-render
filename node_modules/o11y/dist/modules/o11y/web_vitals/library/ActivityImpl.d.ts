import { SchematizedData } from 'o11y/shared';
import { Activity, ActivityDetail, ActivityStopOptions, Schema, TracingHeadersOptions } from '../interfaces';
export declare const timedout = "timedout";
export declare const terminated = "terminated";
export declare const discarded = "discarded";
export declare type onActivityStop = (detail: ActivityDetail) => void;
export declare type onActivityError = (error: unknown, detail: ActivityDetail) => void;
export declare class ActivityImpl implements Activity {
    protected readonly _name: string;
    protected readonly _rootId: string;
    private readonly _onStopped;
    private readonly _onError;
    protected readonly _isSampled?: boolean;
    protected readonly _id: string;
    private readonly _safety;
    private readonly _usePerf;
    protected static _count: number;
    private readonly _perfId;
    private readonly _perfName;
    private _startTimestamp;
    private _startPerfTime;
    private _stopPerfTime;
    private _stopReason;
    private _timer;
    private _errorCount;
    private _timerOverridden;
    constructor(_name: string, _rootId: string, _onStopped: onActivityStop, _onError: onActivityError, timeout?: number, id?: string, _isSampled?: boolean);
    get id(): string;
    getId(): string;
    getRootId(): string;
    get stopReason(): string;
    error(error: unknown, userSchemaOrText?: Schema | string, userData?: SchematizedData): void;
    stop(userSchemaOrText?: Schema | string, userData?: SchematizedData, options?: ActivityStopOptions): void;
    private _overrideTimer;
    private _setTimerOverride;
    private _stopInternal;
    get isStopped(): boolean;
    discard(): void;
    terminate(): void;
    getIsSampled(): boolean;
    protected _getDetail(userSchemaOrText: Schema | string, userData: SchematizedData): ActivityDetail;
    getTraceHeaders(options: TracingHeadersOptions): Record<string, string>;
    getStartTimestamp(): number;
    getStartPerfTime(): number;
    getStopPerfTime(): number;
}
